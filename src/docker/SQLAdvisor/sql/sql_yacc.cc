
/* A Bison parser, made by GNU Bison 2.4.1.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse         MYSQLparse
#define yylex           MYSQLlex
#define yyerror         MYSQLerror
#define yylval          MYSQLlval
#define yychar          MYSQLchar
#define yydebug         MYSQLdebug
#define yynerrs         MYSQLnerrs


/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 24 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"

/*
Note: YYTHD is passed as an argument to yyparse(), and subsequently to yylex().
*/
#define YYLIP (& YYTHD->m_parser_state->m_lip)
#define YYPS (& YYTHD->m_parser_state->m_yacc)
#define YYCSCL  YYTHD->variables.character_set_client

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (YYTHD->lex)
#define Select Lex->current_select
#include "sql_priv.h"
#include "unireg.h"                    // REQUIRED: for other includes
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "password.h"       /* my_make_scrambled_password_323, my_make_scrambled_password */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_instr.h"
#include "sp_pcontext.h"
#include "sp.h"
#include "sql_alter.h"                         // Sql_cmd_alter_table*
#include "sql_truncate.h"                      // Sql_cmd_truncate_table
#include "sql_admin.h"                         // Sql_cmd_analyze/Check..._table
#include "sql_partition_admin.h"               // Sql_cmd_alter_table_*_part.
#include "sql_handler.h"                       // Sql_cmd_handler_*
#include "sql_signal.h"
#include "sql_get_diagnostics.h"               // Sql_cmd_get_diagnostics
#include "event_parse_data.h"
#include "set_var.h"
#include "opt_explain_traditional.h"
#include "opt_explain_json.h"
#include "handler.h"
#include "my_check_opt.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

using std::min;
using std::max;

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror(YYTHD, (char*) (A));            \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(YYTHD);\
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    __attribute__ ((__unused__))
  #endif
</pre>
  This usage of __attribute__ is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef __attribute__
#define __attribute__(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

LEX_STRING default_key_cache_base= {C_STRING_WITH_LEN("default")};

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  if (!yytext)
    yytext= "";

  /* Push an error into the error stack */
  ErrConvString err(yytext, thd->variables.character_set_client);
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  err.ptr(), lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(THD *thd, const char *s)
{
  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param thd thread handler
*/

void case_stmt_action_case(THD *thd)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  sp->m_parser_data.new_cont_backpatch();

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  pctx->push_label(thd, EMPTY_STR, sp->instructions());
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

bool case_stmt_action_then(THD *thd, LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  sp_instr_jump *i =
    new (thd->mem_root) sp_instr_jump(sp->instructions(), pctx);

  if (!i || sp->add_instr(thd, i))
    return true;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->m_parser_data.do_backpatch(pctx->pop_label(), sp->instructions());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->m_parser_data.add_backpatch_entry(i, pctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  sp->m_parser_data.do_backpatch(pctx->pop_label(), sp->instructions());

  if (simple)
    pctx->pop_case_expr_id();

  sp->m_parser_data.do_cont_backpatch(sp->instructions());
}


static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var == NULL)
    my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), tmp->base_name.str);
  else
    tmp->base_name= null_lex_str;

  return thd->is_error();
}

/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd                thread handler
  @param trigger_field_name the NEW-row field name
  @param expr_item          the value expression being assigned
  @param expr_query         the value expression query

  @return error status (true if error, false otherwise).
*/

static bool set_trigger_new_row(THD *thd,
                                LEX_STRING trigger_field_name,
                                Item *expr_item,
                                LEX_STRING expr_query)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;

  DBUG_ASSERT(expr_item);
  DBUG_ASSERT(sp->m_trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (sp->m_trg_chistics.event == TRG_EVENT_INSERT ||
               sp->m_trg_chistics.event == TRG_EVENT_UPDATE));

  Item_trigger_field *trg_fld=
    new (thd->mem_root) Item_trigger_field(lex->current_context(),
                                           Item_trigger_field::NEW_ROW,
                                           trigger_field_name.str,
                                           UPDATE_ACL, false);

  if (!trg_fld)
    return true;

  sp_instr_set_trigger_field *i=
    new (thd->mem_root)
      sp_instr_set_trigger_field(sp->instructions(),
                                 lex,
                                 trigger_field_name,
                                 trg_fld, expr_item,
                                 expr_query);

  if (!i)
    return true;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  sp->m_cur_instr_trig_field_items.link_in_list(trg_fld,
                                                &trg_fld->next_trg_field);

  return sp->add_instr(thd, i);
}


/**
  Create an object to represent a SP variable in the Item-hierarchy.

  @param thd              The current thread.
  @param name             The SP variable name.
  @param spv              The SP variable (optional).
  @param query_start_ptr  Start of the SQL-statement query string (optional).
  @param start_in_q       Start position of the SP variable name in the query.
  @param end_in_q         End position of the SP variable name in the query.

  @remark If spv is not specified, the name is used to search for the
          variable in the parse-time context. If the variable does not
          exist, a error is set and NULL is returned to the caller.

  @return An Item_splocal object representing the SP variable, or NULL on error.
*/
static Item_splocal* create_item_for_sp_var(THD *thd,
                                            LEX_STRING name,
                                            sp_variable *spv,
                                            const char *query_start_ptr,
                                            const char *start_in_q,
                                            const char *end_in_q)
{
  LEX *lex= thd->lex;
  uint spv_pos_in_query= 0;
  uint spv_len_in_query= 0;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  /* If necessary, look for the variable. */
  if (pctx && !spv)
    spv= pctx->find_variable(name, false);

  if (!spv)
  {
    my_error(ER_SP_UNDECLARED_VAR, MYF(0), name.str);
    return NULL;
  }

  DBUG_ASSERT(pctx && spv);

  if (query_start_ptr)
  {
    /* Position and length of the SP variable name in the query. */
    spv_pos_in_query= start_in_q - query_start_ptr;
    spv_len_in_query= end_in_q - start_in_q;
  }

  Item_splocal *item=
    new (thd->mem_root) Item_splocal(
      name, spv->offset, spv->type, spv_pos_in_query, spv_len_in_query);

#ifndef DBUG_OFF
  if (item)
    item->m_sp= lex->sphead;
#endif

  return item;
}


/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select statement
   uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
   is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool add_select_to_union_list(LEX *lex, bool is_union_distinct, 
                              bool is_top_level)
{
  /* 
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && lex->result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
    return TRUE;
  }
  if (lex->proc_analyse)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "SELECT ... PROCEDURE ANALYSE()");
    return TRUE;
  }
  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  /* This counter shouldn't be incremented for UNION parts */
  lex->nest_level--;
  if (mysql_new_select(lex, 0))
    return TRUE;
  mysql_init_select(lex);
  lex->current_select->linkage=UNION_TYPE;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
    lex->current_select->master_unit()->union_distinct=
      lex->current_select;
  return FALSE;
}

/**
   @brief Initializes a SELECT_LEX for a query within parentheses (aka
   braces).

   @return false if successful, true if an error was reported. In the latter
   case parsing should stop.
 */
bool setup_select_in_parentheses(LEX *lex) 
{
  SELECT_LEX * sel= lex->current_select;
  if (sel->set_braces(1))
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      !sel->master_unit()->first_select()->braces &&
      sel->master_unit()->first_select()->linkage ==
      UNION_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      sel->olap != UNSPECIFIED_OLAP_TYPE &&
      sel->master_unit()->fake_select_lex)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "CUBE/ROLLUP", "ORDER BY");
    return TRUE;
  }
  /* select in braces, can't contain global parameters */
  if (sel->master_unit()->fake_select_lex)
    sel->master_unit()->global_parameters=
      sel->master_unit()->fake_select_lex;
  return FALSE;
}

static bool add_create_index_prepare (LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= Alter_info::ALTER_ADD_INDEX;
  lex->col_list.empty();
  lex->change= NullS;
  return FALSE;
}

static bool add_create_index (LEX *lex, Key::Keytype type,
                              const LEX_STRING &name,
                              KEY_CREATE_INFO *info= NULL, bool generated= 0)
{
  Key *key;
  key= new Key(type, name, info ? info : &lex->key_create_info, generated,
               lex->col_list);
  if (key == NULL)
    return TRUE;

  lex->alter_info.key_list.push_back(key);
  lex->col_list.empty();
  return FALSE;
}

/**
  Make a new string allocated on THD's mem-root.

  @param thd        thread handler.
  @param start_ptr  start of the new string.
  @param end_ptr    end of the new string.

  @return LEX_STRING object, containing a pointer to a newly
  constructed/allocated string, and its length. The pointer is NULL
  in case of out-of-memory error.
*/
static LEX_STRING make_string(THD *thd,
                              const char *start_ptr,
                              const char *end_ptr)
{
  LEX_STRING s;

  s.length= end_ptr - start_ptr;
  s.str= (char *) thd->alloc(s.length + 1);

  if (s.str)
    strmake(s.str, start_ptr, s.length);

  return s;
}

/*
  The start is either lip->ptr, if there was no lookahead, lip->tok_start
  otherwise.
*/
#define YY_TOKEN_START \
  ((yychar == YYEMPTY) ?  YYLIP->get_ptr() : YYLIP->get_tok_start())

/*
   The end is either lip->ptr, if there was no lookahead,
   or lip->tok_end otherwise.
*/

#define YY_TOKEN_END \
  ((yychar == YYEMPTY) ?  YYLIP->get_ptr() : YYLIP->get_tok_end())

/**
  Create a separate LEX for each assignment if in SP.

  If we are in SP we want have own LEX for each assignment.
  This is mostly because it is hard for several sp_instr_set
  and sp_instr_set_trigger instructions share one LEX.
  (Well, it is theoretically possible but adds some extra
  overhead on preparation for execution stage and IMO less
  robust).

  @see sp_create_assignment_instr

  @param thd        Thread context
  @param option_ptr Option-value-expression start pointer
*/

static void sp_create_assignment_lex(THD *thd, const char *option_ptr)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;

  /*
    We can come here in the following cases:

      1. it's a regular SET statement outside stored programs
        (lex->sphead is NULL);

      2. we're parsing a stored program normally (loading from mysql.proc, ...);

      3. we're re-parsing SET-statement with a user variable after meta-data
        change. It's guaranteed, that:
        - this SET-statement deals with a user/system variable (otherwise, it
          would be a different SP-instruction, and we would parse an expression);
        - this SET-statement has a single user/system variable assignment
          (that's how we generate sp_instr_stmt-instructions for SET-statements).
        So, in this case, even if lex->sphead is set, we should not process
        further.
  */

  if (!sp ||            // case #1
      sp->is_invoked()) // case #3
  {
    return;
  }

  LEX *old_lex= lex;
  sp->reset_lex(thd);
  lex= thd->lex;

  /* Set new LEX as if we at start of set rule. */
  mysql_init_select(lex);
  lex->sql_command= SQLCOM_SET_OPTION;
  lex->var_list.empty();
  lex->one_shot_set= 0;
  lex->autocommit= 0;

  /*
    It's a SET statement within SP. It will be either translated
    into one or more sp_instr_stmt instructions, or it will be
    sp_instr_set / sp_instr_set_trigger_field instructions.
    In any case, position of SP-variable can not be determined
    reliably. So, we set the start pointer of the current statement
    to NULL.
  */
  sp->m_parser_data.set_current_stmt_start_ptr(NULL);
  sp->m_parser_data.set_option_start_ptr(option_ptr);

  /* Inherit from outer lex. */
  lex->option_type= old_lex->option_type;
}


/**
  Create a SP instruction for a SET assignment.

  @see sp_create_assignment_lex

  @param thd           Thread context
  @param expr_end_ptr  Option-value-expression end pointer

  @return false if success, true otherwise.
*/

static bool sp_create_assignment_instr(THD *thd, const char *expr_end_ptr)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;

  /*
    We can come here in the following cases:

      1. it's a regular SET statement outside stored programs
        (lex->sphead is NULL);

      2. we're parsing a stored program normally (loading from mysql.proc, ...);

      3. we're re-parsing SET-statement with a user variable after meta-data
        change. It's guaranteed, that:
        - this SET-statement deals with a user/system variable (otherwise, it
          would be a different SP-instruction, and we would parse an expression);
        - this SET-statement has a single user/system variable assignment
          (that's how we generate sp_instr_stmt-instructions for SET-statements).
        So, in this case, even if lex->sphead is set, we should not process
        further.
  */

  if (!sp ||            // case #1
      sp->is_invoked()) // case #3
  {
    return false;
  }

  if (!lex->var_list.is_empty())
  {
    /* Extract expression string. */

    const char *expr_start_ptr= sp->m_parser_data.get_option_start_ptr();

    LEX_STRING expr;
    expr.str= (char *) expr_start_ptr;
    expr.length= expr_end_ptr - expr_start_ptr;

    /* Construct SET-statement query. */

    LEX_STRING set_stmt_query;

    set_stmt_query.length= expr.length + 3;
    set_stmt_query.str= (char *) thd->alloc(set_stmt_query.length + 1);

    if (!set_stmt_query.str)
      return true;

    strmake(strmake(set_stmt_query.str, "SET", 3),
            expr.str, expr.length);

    /*
      We have assignment to user or system variable or option setting, so we
      should construct sp_instr_stmt for it.
    */

    sp_instr_stmt *i=
      new (thd->mem_root)
        sp_instr_stmt(sp->instructions(), lex, set_stmt_query);

    if (!i || sp->add_instr(thd, i))
      return true;
  }

  /* Remember option_type of the currently parsed LEX. */
  enum_var_type inner_option_type= lex->option_type;

  if (sp->restore_lex(thd))
    return true;

  /* Copy option_type to outer lex in case it has changed. */
  thd->lex->option_type= inner_option_type;

  return false;
}

/**
  Compare a LEX_USER against the current user as defined by the exact user and
  host used during authentication.

  @param user A pointer to a user which needs to be matched against the
              current.

  @see SET PASSWORD rules

  @retval true The specified user is the authorized user
  @retval false The user doesn't match
*/

bool match_authorized_user(Security_context *ctx, LEX_USER *user)
{
  if(user->user.str && my_strcasecmp(system_charset_info,
                                     ctx->priv_user,
                                     user->user.str) == 0)
  {
    /*
      users match; let's compare hosts.
      1. first compare with the host we actually authorized,
      2. then see if we match the host mask of the priv_host
    */
    if (user->host.str && my_strcasecmp(system_charset_info,
                                        user->host.str,
                                        ctx->priv_host) == 0)
    {
      /* specified user exactly match the authorized user */
      return true;
    }
  }
  return false;
}




/* Line 189 of yacc.c  */
#line 968 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.cc"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADDDATE_SYM = 262,
     AFTER_SYM = 263,
     AGAINST = 264,
     AGGREGATE_SYM = 265,
     ALGORITHM_SYM = 266,
     ALL = 267,
     ALTER = 268,
     ANALYSE_SYM = 269,
     ANALYZE_SYM = 270,
     AND_AND_SYM = 271,
     AND_SYM = 272,
     ANY_SYM = 273,
     ARCHIVED_SYM = 274,
     AS = 275,
     ASC = 276,
     ASCII_SYM = 277,
     ASENSITIVE_SYM = 278,
     AT_SYM = 279,
     AUTOEXTEND_SIZE_SYM = 280,
     AUTO_INC = 281,
     AVG_ROW_LENGTH = 282,
     AVG_SYM = 283,
     BACKUP_SYM = 284,
     BEFORE_SYM = 285,
     BEGIN_SYM = 286,
     BETWEEN_SYM = 287,
     BIGINT = 288,
     BINARY = 289,
     BINLOG_SYM = 290,
     BIN_NUM = 291,
     BIT_AND = 292,
     BIT_OR = 293,
     BIT_SYM = 294,
     BIT_XOR = 295,
     BLOB_SYM = 296,
     BLOCK_SYM = 297,
     BOOLEAN_SYM = 298,
     BOOL_SYM = 299,
     BOTH = 300,
     BTREE_SYM = 301,
     BY = 302,
     BYTE_SYM = 303,
     CACHE_SYM = 304,
     CALL_SYM = 305,
     CASCADE = 306,
     CASCADED = 307,
     CASE_SYM = 308,
     CAST_SYM = 309,
     CATALOG_NAME_SYM = 310,
     CHAIN_SYM = 311,
     CHANGE = 312,
     CHANGED = 313,
     CHANGED_PAGE_BITMAPS_SYM = 314,
     CHARSET = 315,
     CHAR_SYM = 316,
     CHECKSUM_SYM = 317,
     CHECK_SYM = 318,
     CIPHER_SYM = 319,
     CLASS_ORIGIN_SYM = 320,
     CLIENT_SYM = 321,
     CLIENT_STATS_SYM = 322,
     CLOSE_SYM = 323,
     CLUSTERING_SYM = 324,
     COALESCE = 325,
     CODE_SYM = 326,
     COLLATE_SYM = 327,
     COLLATION_SYM = 328,
     COLUMNS = 329,
     COLUMN_SYM = 330,
     COLUMN_FORMAT_SYM = 331,
     COLUMN_NAME_SYM = 332,
     COMMENT_SYM = 333,
     COMMITTED_SYM = 334,
     COMMIT_SYM = 335,
     COMPACT_SYM = 336,
     COMPLETION_SYM = 337,
     COMPRESSED_SYM = 338,
     CONCURRENT = 339,
     CONDITION_SYM = 340,
     CONNECTION_SYM = 341,
     CONSISTENT_SYM = 342,
     CONSTRAINT = 343,
     CONSTRAINT_CATALOG_SYM = 344,
     CONSTRAINT_NAME_SYM = 345,
     CONSTRAINT_SCHEMA_SYM = 346,
     CONTAINS_SYM = 347,
     CONTEXT_SYM = 348,
     CONTINUE_SYM = 349,
     CONVERT_SYM = 350,
     COUNT_SYM = 351,
     CPU_SYM = 352,
     CREATE = 353,
     CROSS = 354,
     CUBE_SYM = 355,
     CURDATE = 356,
     CURRENT_SYM = 357,
     CURRENT_USER = 358,
     CURSOR_SYM = 359,
     CURSOR_NAME_SYM = 360,
     CURTIME = 361,
     DATABASE = 362,
     DATABASES = 363,
     DATAFILE_SYM = 364,
     DATA_SYM = 365,
     DATETIME = 366,
     DATE_ADD_INTERVAL = 367,
     DATE_SUB_INTERVAL = 368,
     DATE_SYM = 369,
     DAY_HOUR_SYM = 370,
     DAY_MICROSECOND_SYM = 371,
     DAY_MINUTE_SYM = 372,
     DAY_SECOND_SYM = 373,
     DAY_SYM = 374,
     DEALLOCATE_SYM = 375,
     DECIMAL_NUM = 376,
     DECIMAL_SYM = 377,
     DECLARE_SYM = 378,
     DEFAULT = 379,
     DEFAULT_AUTH_SYM = 380,
     DEFINER_SYM = 381,
     DELAYED_SYM = 382,
     DELAY_KEY_WRITE_SYM = 383,
     DELETE_SYM = 384,
     DESC = 385,
     DESCRIBE = 386,
     DES_KEY_FILE = 387,
     DETERMINISTIC_SYM = 388,
     DIAGNOSTICS_SYM = 389,
     DIRECTORY_SYM = 390,
     DISABLE_SYM = 391,
     DISCARD = 392,
     DISK_SYM = 393,
     DISTINCT = 394,
     DIV_SYM = 395,
     DOUBLE_SYM = 396,
     DO_SYM = 397,
     DROP = 398,
     DUAL_SYM = 399,
     DUMPFILE = 400,
     DUPLICATE_SYM = 401,
     DYNAMIC_SYM = 402,
     EACH_SYM = 403,
     ELSE = 404,
     ELSEIF_SYM = 405,
     ENABLE_SYM = 406,
     ENCLOSED = 407,
     END = 408,
     ENDS_SYM = 409,
     END_OF_INPUT = 410,
     ENGINES_SYM = 411,
     ENGINE_SYM = 412,
     ENUM = 413,
     EQ = 414,
     EQUAL_SYM = 415,
     ERROR_SYM = 416,
     ERRORS = 417,
     ESCAPED = 418,
     ESCAPE_SYM = 419,
     EVENTS_SYM = 420,
     EVENT_SYM = 421,
     EVERY_SYM = 422,
     EXCHANGE_SYM = 423,
     EXECUTE_SYM = 424,
     EXISTS = 425,
     EXIT_SYM = 426,
     EXPANSION_SYM = 427,
     EXPIRE_SYM = 428,
     EXPORT_SYM = 429,
     EXTENDED_SYM = 430,
     EXTENT_SIZE_SYM = 431,
     EXTRACT_SYM = 432,
     FALSE_SYM = 433,
     FAST_SYM = 434,
     FAULTS_SYM = 435,
     FETCH_SYM = 436,
     FILE_SYM = 437,
     FIRST_SYM = 438,
     FIXED_SYM = 439,
     FLOAT_NUM = 440,
     FLOAT_SYM = 441,
     FLUSH_SYM = 442,
     FORCE_SYM = 443,
     FOREIGN = 444,
     FOR_SYM = 445,
     FORMAT_SYM = 446,
     FOUND_SYM = 447,
     FROM = 448,
     FULL = 449,
     FULLTEXT_SYM = 450,
     FUNCTION_SYM = 451,
     GE = 452,
     GENERAL = 453,
     GEOMETRYCOLLECTION = 454,
     GEOMETRY_SYM = 455,
     GET_FORMAT = 456,
     GET_SYM = 457,
     GLOBAL_SYM = 458,
     GRANT = 459,
     GRANTS = 460,
     GROUP_SYM = 461,
     GROUP_CONCAT_SYM = 462,
     GT_SYM = 463,
     HANDLER_SYM = 464,
     HASH_SYM = 465,
     HAVING = 466,
     HELP_SYM = 467,
     HEX_NUM = 468,
     HIGH_PRIORITY = 469,
     HOST_SYM = 470,
     HOSTS_SYM = 471,
     HOUR_MICROSECOND_SYM = 472,
     HOUR_MINUTE_SYM = 473,
     HOUR_SECOND_SYM = 474,
     HOUR_SYM = 475,
     IDENT = 476,
     IDENTIFIED_SYM = 477,
     IDENT_QUOTED = 478,
     IF = 479,
     IGNORE_SYM = 480,
     IGNORE_SERVER_IDS_SYM = 481,
     IMPORT = 482,
     INDEXES = 483,
     INDEX_SYM = 484,
     INDEX_STATS_SYM = 485,
     INFILE = 486,
     INITIAL_SIZE_SYM = 487,
     INNER_SYM = 488,
     INOUT_SYM = 489,
     INSENSITIVE_SYM = 490,
     INSERT = 491,
     INSERT_METHOD = 492,
     INSTALL_SYM = 493,
     INTERVAL_SYM = 494,
     INTO = 495,
     INT_SYM = 496,
     INVOKER_SYM = 497,
     IN_SYM = 498,
     IO_AFTER_GTIDS = 499,
     IO_BEFORE_GTIDS = 500,
     IO_SYM = 501,
     IPC_SYM = 502,
     IS = 503,
     ISOLATION = 504,
     ISSUER_SYM = 505,
     ITERATE_SYM = 506,
     JOIN_SYM = 507,
     KEYS = 508,
     KEY_BLOCK_SIZE = 509,
     KEY_SYM = 510,
     KILL_SYM = 511,
     LANGUAGE_SYM = 512,
     LAST_SYM = 513,
     LE = 514,
     LEADING = 515,
     LEAVES = 516,
     LEAVE_SYM = 517,
     LEFT = 518,
     LESS_SYM = 519,
     LEVEL_SYM = 520,
     LEX_HOSTNAME = 521,
     LIKE = 522,
     LIMIT = 523,
     LINEAR_SYM = 524,
     LINES = 525,
     LINESTRING = 526,
     LIST_SYM = 527,
     LOAD = 528,
     LOCAL_SYM = 529,
     LOCATOR_SYM = 530,
     LOCKS_SYM = 531,
     LOCK_SYM = 532,
     LOGFILE_SYM = 533,
     LOGS_SYM = 534,
     LONGBLOB = 535,
     LONGTEXT = 536,
     LONG_NUM = 537,
     LONG_SYM = 538,
     LOOP_SYM = 539,
     LOW_PRIORITY = 540,
     LT = 541,
     MASTER_AUTO_POSITION_SYM = 542,
     MASTER_BIND_SYM = 543,
     MASTER_CONNECT_RETRY_SYM = 544,
     MASTER_DELAY_SYM = 545,
     MASTER_HOST_SYM = 546,
     MASTER_LOG_FILE_SYM = 547,
     MASTER_LOG_POS_SYM = 548,
     MASTER_PASSWORD_SYM = 549,
     MASTER_PORT_SYM = 550,
     MASTER_RETRY_COUNT_SYM = 551,
     MASTER_SERVER_ID_SYM = 552,
     MASTER_SSL_CAPATH_SYM = 553,
     MASTER_SSL_CA_SYM = 554,
     MASTER_SSL_CERT_SYM = 555,
     MASTER_SSL_CIPHER_SYM = 556,
     MASTER_SSL_CRL_SYM = 557,
     MASTER_SSL_CRLPATH_SYM = 558,
     MASTER_SSL_KEY_SYM = 559,
     MASTER_SSL_SYM = 560,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 561,
     MASTER_SYM = 562,
     MASTER_USER_SYM = 563,
     MASTER_HEARTBEAT_PERIOD_SYM = 564,
     MATCH = 565,
     MAX_CONNECTIONS_PER_HOUR = 566,
     MAX_QUERIES_PER_HOUR = 567,
     MAX_ROWS = 568,
     MAX_SIZE_SYM = 569,
     MAX_SYM = 570,
     MAX_UPDATES_PER_HOUR = 571,
     MAX_USER_CONNECTIONS_SYM = 572,
     MAX_VALUE_SYM = 573,
     MEDIUMBLOB = 574,
     MEDIUMINT = 575,
     MEDIUMTEXT = 576,
     MEDIUM_SYM = 577,
     MEMORY_SYM = 578,
     MERGE_SYM = 579,
     MESSAGE_TEXT_SYM = 580,
     MICROSECOND_SYM = 581,
     MIGRATE_SYM = 582,
     MINUTE_MICROSECOND_SYM = 583,
     MINUTE_SECOND_SYM = 584,
     MINUTE_SYM = 585,
     MIN_ROWS = 586,
     MIN_SYM = 587,
     MODE_SYM = 588,
     MODIFIES_SYM = 589,
     MODIFY_SYM = 590,
     MOD_SYM = 591,
     MONTH_SYM = 592,
     MULTILINESTRING = 593,
     MULTIPOINT = 594,
     MULTIPOLYGON = 595,
     MUTEX_SYM = 596,
     MYSQL_ERRNO_SYM = 597,
     NAMES_SYM = 598,
     NAME_SYM = 599,
     NATIONAL_SYM = 600,
     NATURAL = 601,
     NCHAR_STRING = 602,
     NCHAR_SYM = 603,
     NDBCLUSTER_SYM = 604,
     NE = 605,
     NEG = 606,
     NEW_SYM = 607,
     NEXT_SYM = 608,
     NODEGROUP_SYM = 609,
     NONE_SYM = 610,
     NOT2_SYM = 611,
     NOT_SYM = 612,
     NOW_SYM = 613,
     NO_SYM = 614,
     NO_WAIT_SYM = 615,
     NO_WRITE_TO_BINLOG = 616,
     NULL_SYM = 617,
     NUM = 618,
     NUMBER_SYM = 619,
     NUMERIC_SYM = 620,
     NVARCHAR_SYM = 621,
     OFFSET_SYM = 622,
     OLD_PASSWORD = 623,
     ON = 624,
     ONE_SYM = 625,
     ONLY_SYM = 626,
     OPEN_SYM = 627,
     OPTIMIZE = 628,
     OPTIONS_SYM = 629,
     OPTION = 630,
     OPTIONALLY = 631,
     OR2_SYM = 632,
     ORDER_SYM = 633,
     OR_OR_SYM = 634,
     OR_SYM = 635,
     OUTER = 636,
     OUTFILE = 637,
     OUT_SYM = 638,
     OWNER_SYM = 639,
     PACK_KEYS_SYM = 640,
     PAGE_SYM = 641,
     PARAM_MARKER = 642,
     PARSER_SYM = 643,
     PARTIAL = 644,
     PARTITION_SYM = 645,
     PARTITIONS_SYM = 646,
     PARTITIONING_SYM = 647,
     PASSWORD = 648,
     PHASE_SYM = 649,
     PLUGIN_DIR_SYM = 650,
     PLUGIN_SYM = 651,
     PLUGINS_SYM = 652,
     POINT_SYM = 653,
     POLYGON = 654,
     PORT_SYM = 655,
     POSITION_SYM = 656,
     PRECISION = 657,
     PREPARE_SYM = 658,
     PRESERVE_SYM = 659,
     PREV_SYM = 660,
     PRIMARY_SYM = 661,
     PRIVILEGES = 662,
     PROCEDURE_SYM = 663,
     PROCESS = 664,
     PROCESSLIST_SYM = 665,
     PROFILE_SYM = 666,
     PROFILES_SYM = 667,
     PROXY_SYM = 668,
     PURGE = 669,
     QUARTER_SYM = 670,
     QUERY_SYM = 671,
     QUICK = 672,
     RANGE_SYM = 673,
     READS_SYM = 674,
     READ_ONLY_SYM = 675,
     READ_SYM = 676,
     READ_WRITE_SYM = 677,
     REAL = 678,
     REBUILD_SYM = 679,
     RECOVER_SYM = 680,
     REDOFILE_SYM = 681,
     REDO_BUFFER_SIZE_SYM = 682,
     REDUNDANT_SYM = 683,
     REFERENCES = 684,
     REGEXP = 685,
     RELAY = 686,
     RELAYLOG_SYM = 687,
     RELAY_LOG_FILE_SYM = 688,
     RELAY_LOG_POS_SYM = 689,
     RELAY_THREAD = 690,
     RELEASE_SYM = 691,
     RELOAD = 692,
     REMOVE_SYM = 693,
     RENAME = 694,
     REORGANIZE_SYM = 695,
     REPAIR = 696,
     REPEATABLE_SYM = 697,
     REPEAT_SYM = 698,
     REPLACE = 699,
     REPLICATION = 700,
     REQUIRE_SYM = 701,
     RESET_SYM = 702,
     RESIGNAL_SYM = 703,
     RESOURCES = 704,
     RESTORE_SYM = 705,
     RESTRICT = 706,
     RESUME_SYM = 707,
     RETURNED_SQLSTATE_SYM = 708,
     RETURNS_SYM = 709,
     RETURN_SYM = 710,
     REVERSE_SYM = 711,
     REVOKE = 712,
     RIGHT = 713,
     ROLLBACK_SYM = 714,
     ROLLUP_SYM = 715,
     ROUTINE_SYM = 716,
     ROWS_SYM = 717,
     ROW_FORMAT_SYM = 718,
     ROW_SYM = 719,
     ROW_COUNT_SYM = 720,
     RTREE_SYM = 721,
     SAVEPOINT_SYM = 722,
     SCHEDULE_SYM = 723,
     SCHEMA_NAME_SYM = 724,
     SECOND_MICROSECOND_SYM = 725,
     SECOND_SYM = 726,
     SECURITY_SYM = 727,
     SELECT_SYM = 728,
     SENSITIVE_SYM = 729,
     SEPARATOR_SYM = 730,
     SERIALIZABLE_SYM = 731,
     SERIAL_SYM = 732,
     SESSION_SYM = 733,
     SERVER_SYM = 734,
     SERVER_OPTIONS = 735,
     SET = 736,
     SET_VAR = 737,
     SHARE_SYM = 738,
     SHIFT_LEFT = 739,
     SHIFT_RIGHT = 740,
     SHOW = 741,
     SHUTDOWN = 742,
     SIGNAL_SYM = 743,
     SIGNED_SYM = 744,
     SIMPLE_SYM = 745,
     SLAVE = 746,
     SLOW = 747,
     SMALLINT = 748,
     SNAPSHOT_SYM = 749,
     SOCKET_SYM = 750,
     SONAME_SYM = 751,
     SOUNDS_SYM = 752,
     SOURCE_SYM = 753,
     SPATIAL_SYM = 754,
     SPECIFIC_SYM = 755,
     SQLEXCEPTION_SYM = 756,
     SQLSTATE_SYM = 757,
     SQLWARNING_SYM = 758,
     SQL_AFTER_GTIDS = 759,
     SQL_AFTER_MTS_GAPS = 760,
     SQL_BEFORE_GTIDS = 761,
     SQL_BIG_RESULT = 762,
     SQL_BUFFER_RESULT = 763,
     SQL_CACHE_SYM = 764,
     SQL_CALC_FOUND_ROWS = 765,
     SQL_NO_CACHE_SYM = 766,
     SQL_SMALL_RESULT = 767,
     SQL_SYM = 768,
     SQL_THREAD = 769,
     SSL_SYM = 770,
     STARTING = 771,
     STARTS_SYM = 772,
     START_SYM = 773,
     STATEMENT_SYM = 774,
     STATS_AUTO_RECALC_SYM = 775,
     STATS_PERSISTENT_SYM = 776,
     STATS_SAMPLE_PAGES_SYM = 777,
     STATUS_SYM = 778,
     NOLOCK_SYM = 779,
     NONBLOCKING_SYM = 780,
     STDDEV_SAMP_SYM = 781,
     STD_SYM = 782,
     STOP_SYM = 783,
     STORAGE_SYM = 784,
     STRAIGHT_JOIN = 785,
     STRING_SYM = 786,
     SUBCLASS_ORIGIN_SYM = 787,
     SUBDATE_SYM = 788,
     SUBJECT_SYM = 789,
     SUBPARTITIONS_SYM = 790,
     SUBPARTITION_SYM = 791,
     SUBSTRING = 792,
     SUM_SYM = 793,
     SUPER_SYM = 794,
     SUSPEND_SYM = 795,
     SWAPS_SYM = 796,
     SWITCHES_SYM = 797,
     SYSDATE = 798,
     TABLES = 799,
     TABLESPACE = 800,
     TABLE_REF_PRIORITY = 801,
     TABLE_SYM = 802,
     TABLE_STATS_SYM = 803,
     TABLE_CHECKSUM_SYM = 804,
     TABLE_NAME_SYM = 805,
     TEMPORARY = 806,
     TEMPTABLE_SYM = 807,
     TERMINATED = 808,
     TEXT_STRING = 809,
     TEXT_SYM = 810,
     THAN_SYM = 811,
     THEN_SYM = 812,
     THREAD_STATS_SYM = 813,
     TIMESTAMP = 814,
     TIMESTAMP_ADD = 815,
     TIMESTAMP_DIFF = 816,
     TIME_SYM = 817,
     TINYBLOB = 818,
     TINYINT = 819,
     TINYTEXT = 820,
     TO_SYM = 821,
     TOKU_UNCOMPRESSED_SYM = 822,
     TOKU_ZLIB_SYM = 823,
     TOKU_QUICKLZ_SYM = 824,
     TOKU_LZMA_SYM = 825,
     TOKU_FAST_SYM = 826,
     TOKU_SMALL_SYM = 827,
     TRAILING = 828,
     TRANSACTION_SYM = 829,
     TRIGGERS_SYM = 830,
     TRIGGER_SYM = 831,
     TRIM = 832,
     TRUE_SYM = 833,
     TRUNCATE_SYM = 834,
     TYPES_SYM = 835,
     TYPE_SYM = 836,
     UDF_RETURNS_SYM = 837,
     ULONGLONG_NUM = 838,
     UNCOMMITTED_SYM = 839,
     UNDEFINED_SYM = 840,
     UNDERSCORE_CHARSET = 841,
     UNDOFILE_SYM = 842,
     UNDO_BUFFER_SIZE_SYM = 843,
     UNDO_SYM = 844,
     UNICODE_SYM = 845,
     UNINSTALL_SYM = 846,
     UNION_SYM = 847,
     UNIQUE_SYM = 848,
     UNKNOWN_SYM = 849,
     UNLOCK_SYM = 850,
     UNSIGNED = 851,
     UNTIL_SYM = 852,
     UPDATE_SYM = 853,
     UPGRADE_SYM = 854,
     USAGE = 855,
     USER = 856,
     USER_STATS_SYM = 857,
     USE_FRM = 858,
     USE_SYM = 859,
     USING = 860,
     UTC_DATE_SYM = 861,
     UTC_TIMESTAMP_SYM = 862,
     UTC_TIME_SYM = 863,
     VALUES = 864,
     VALUE_SYM = 865,
     VARBINARY = 866,
     VARCHAR = 867,
     VARIABLES = 868,
     VARIANCE_SYM = 869,
     VARYING = 870,
     VAR_SAMP_SYM = 871,
     VIEW_SYM = 872,
     WAIT_SYM = 873,
     WARNINGS = 874,
     WEEK_SYM = 875,
     WEIGHT_STRING_SYM = 876,
     WHEN_SYM = 877,
     WHERE = 878,
     WHILE_SYM = 879,
     WITH = 880,
     WITH_CUBE_SYM = 881,
     WITH_ROLLUP_SYM = 882,
     WORK_SYM = 883,
     WRAPPER_SYM = 884,
     WRITE_SYM = 885,
     X509_SYM = 886,
     XA_SYM = 887,
     XML_SYM = 888,
     XOR = 889,
     YEAR_MONTH_SYM = 890,
     YEAR_SYM = 891,
     ZEROFILL = 892
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADDDATE_SYM 262
#define AFTER_SYM 263
#define AGAINST 264
#define AGGREGATE_SYM 265
#define ALGORITHM_SYM 266
#define ALL 267
#define ALTER 268
#define ANALYSE_SYM 269
#define ANALYZE_SYM 270
#define AND_AND_SYM 271
#define AND_SYM 272
#define ANY_SYM 273
#define ARCHIVED_SYM 274
#define AS 275
#define ASC 276
#define ASCII_SYM 277
#define ASENSITIVE_SYM 278
#define AT_SYM 279
#define AUTOEXTEND_SIZE_SYM 280
#define AUTO_INC 281
#define AVG_ROW_LENGTH 282
#define AVG_SYM 283
#define BACKUP_SYM 284
#define BEFORE_SYM 285
#define BEGIN_SYM 286
#define BETWEEN_SYM 287
#define BIGINT 288
#define BINARY 289
#define BINLOG_SYM 290
#define BIN_NUM 291
#define BIT_AND 292
#define BIT_OR 293
#define BIT_SYM 294
#define BIT_XOR 295
#define BLOB_SYM 296
#define BLOCK_SYM 297
#define BOOLEAN_SYM 298
#define BOOL_SYM 299
#define BOTH 300
#define BTREE_SYM 301
#define BY 302
#define BYTE_SYM 303
#define CACHE_SYM 304
#define CALL_SYM 305
#define CASCADE 306
#define CASCADED 307
#define CASE_SYM 308
#define CAST_SYM 309
#define CATALOG_NAME_SYM 310
#define CHAIN_SYM 311
#define CHANGE 312
#define CHANGED 313
#define CHANGED_PAGE_BITMAPS_SYM 314
#define CHARSET 315
#define CHAR_SYM 316
#define CHECKSUM_SYM 317
#define CHECK_SYM 318
#define CIPHER_SYM 319
#define CLASS_ORIGIN_SYM 320
#define CLIENT_SYM 321
#define CLIENT_STATS_SYM 322
#define CLOSE_SYM 323
#define CLUSTERING_SYM 324
#define COALESCE 325
#define CODE_SYM 326
#define COLLATE_SYM 327
#define COLLATION_SYM 328
#define COLUMNS 329
#define COLUMN_SYM 330
#define COLUMN_FORMAT_SYM 331
#define COLUMN_NAME_SYM 332
#define COMMENT_SYM 333
#define COMMITTED_SYM 334
#define COMMIT_SYM 335
#define COMPACT_SYM 336
#define COMPLETION_SYM 337
#define COMPRESSED_SYM 338
#define CONCURRENT 339
#define CONDITION_SYM 340
#define CONNECTION_SYM 341
#define CONSISTENT_SYM 342
#define CONSTRAINT 343
#define CONSTRAINT_CATALOG_SYM 344
#define CONSTRAINT_NAME_SYM 345
#define CONSTRAINT_SCHEMA_SYM 346
#define CONTAINS_SYM 347
#define CONTEXT_SYM 348
#define CONTINUE_SYM 349
#define CONVERT_SYM 350
#define COUNT_SYM 351
#define CPU_SYM 352
#define CREATE 353
#define CROSS 354
#define CUBE_SYM 355
#define CURDATE 356
#define CURRENT_SYM 357
#define CURRENT_USER 358
#define CURSOR_SYM 359
#define CURSOR_NAME_SYM 360
#define CURTIME 361
#define DATABASE 362
#define DATABASES 363
#define DATAFILE_SYM 364
#define DATA_SYM 365
#define DATETIME 366
#define DATE_ADD_INTERVAL 367
#define DATE_SUB_INTERVAL 368
#define DATE_SYM 369
#define DAY_HOUR_SYM 370
#define DAY_MICROSECOND_SYM 371
#define DAY_MINUTE_SYM 372
#define DAY_SECOND_SYM 373
#define DAY_SYM 374
#define DEALLOCATE_SYM 375
#define DECIMAL_NUM 376
#define DECIMAL_SYM 377
#define DECLARE_SYM 378
#define DEFAULT 379
#define DEFAULT_AUTH_SYM 380
#define DEFINER_SYM 381
#define DELAYED_SYM 382
#define DELAY_KEY_WRITE_SYM 383
#define DELETE_SYM 384
#define DESC 385
#define DESCRIBE 386
#define DES_KEY_FILE 387
#define DETERMINISTIC_SYM 388
#define DIAGNOSTICS_SYM 389
#define DIRECTORY_SYM 390
#define DISABLE_SYM 391
#define DISCARD 392
#define DISK_SYM 393
#define DISTINCT 394
#define DIV_SYM 395
#define DOUBLE_SYM 396
#define DO_SYM 397
#define DROP 398
#define DUAL_SYM 399
#define DUMPFILE 400
#define DUPLICATE_SYM 401
#define DYNAMIC_SYM 402
#define EACH_SYM 403
#define ELSE 404
#define ELSEIF_SYM 405
#define ENABLE_SYM 406
#define ENCLOSED 407
#define END 408
#define ENDS_SYM 409
#define END_OF_INPUT 410
#define ENGINES_SYM 411
#define ENGINE_SYM 412
#define ENUM 413
#define EQ 414
#define EQUAL_SYM 415
#define ERROR_SYM 416
#define ERRORS 417
#define ESCAPED 418
#define ESCAPE_SYM 419
#define EVENTS_SYM 420
#define EVENT_SYM 421
#define EVERY_SYM 422
#define EXCHANGE_SYM 423
#define EXECUTE_SYM 424
#define EXISTS 425
#define EXIT_SYM 426
#define EXPANSION_SYM 427
#define EXPIRE_SYM 428
#define EXPORT_SYM 429
#define EXTENDED_SYM 430
#define EXTENT_SIZE_SYM 431
#define EXTRACT_SYM 432
#define FALSE_SYM 433
#define FAST_SYM 434
#define FAULTS_SYM 435
#define FETCH_SYM 436
#define FILE_SYM 437
#define FIRST_SYM 438
#define FIXED_SYM 439
#define FLOAT_NUM 440
#define FLOAT_SYM 441
#define FLUSH_SYM 442
#define FORCE_SYM 443
#define FOREIGN 444
#define FOR_SYM 445
#define FORMAT_SYM 446
#define FOUND_SYM 447
#define FROM 448
#define FULL 449
#define FULLTEXT_SYM 450
#define FUNCTION_SYM 451
#define GE 452
#define GENERAL 453
#define GEOMETRYCOLLECTION 454
#define GEOMETRY_SYM 455
#define GET_FORMAT 456
#define GET_SYM 457
#define GLOBAL_SYM 458
#define GRANT 459
#define GRANTS 460
#define GROUP_SYM 461
#define GROUP_CONCAT_SYM 462
#define GT_SYM 463
#define HANDLER_SYM 464
#define HASH_SYM 465
#define HAVING 466
#define HELP_SYM 467
#define HEX_NUM 468
#define HIGH_PRIORITY 469
#define HOST_SYM 470
#define HOSTS_SYM 471
#define HOUR_MICROSECOND_SYM 472
#define HOUR_MINUTE_SYM 473
#define HOUR_SECOND_SYM 474
#define HOUR_SYM 475
#define IDENT 476
#define IDENTIFIED_SYM 477
#define IDENT_QUOTED 478
#define IF 479
#define IGNORE_SYM 480
#define IGNORE_SERVER_IDS_SYM 481
#define IMPORT 482
#define INDEXES 483
#define INDEX_SYM 484
#define INDEX_STATS_SYM 485
#define INFILE 486
#define INITIAL_SIZE_SYM 487
#define INNER_SYM 488
#define INOUT_SYM 489
#define INSENSITIVE_SYM 490
#define INSERT 491
#define INSERT_METHOD 492
#define INSTALL_SYM 493
#define INTERVAL_SYM 494
#define INTO 495
#define INT_SYM 496
#define INVOKER_SYM 497
#define IN_SYM 498
#define IO_AFTER_GTIDS 499
#define IO_BEFORE_GTIDS 500
#define IO_SYM 501
#define IPC_SYM 502
#define IS 503
#define ISOLATION 504
#define ISSUER_SYM 505
#define ITERATE_SYM 506
#define JOIN_SYM 507
#define KEYS 508
#define KEY_BLOCK_SIZE 509
#define KEY_SYM 510
#define KILL_SYM 511
#define LANGUAGE_SYM 512
#define LAST_SYM 513
#define LE 514
#define LEADING 515
#define LEAVES 516
#define LEAVE_SYM 517
#define LEFT 518
#define LESS_SYM 519
#define LEVEL_SYM 520
#define LEX_HOSTNAME 521
#define LIKE 522
#define LIMIT 523
#define LINEAR_SYM 524
#define LINES 525
#define LINESTRING 526
#define LIST_SYM 527
#define LOAD 528
#define LOCAL_SYM 529
#define LOCATOR_SYM 530
#define LOCKS_SYM 531
#define LOCK_SYM 532
#define LOGFILE_SYM 533
#define LOGS_SYM 534
#define LONGBLOB 535
#define LONGTEXT 536
#define LONG_NUM 537
#define LONG_SYM 538
#define LOOP_SYM 539
#define LOW_PRIORITY 540
#define LT 541
#define MASTER_AUTO_POSITION_SYM 542
#define MASTER_BIND_SYM 543
#define MASTER_CONNECT_RETRY_SYM 544
#define MASTER_DELAY_SYM 545
#define MASTER_HOST_SYM 546
#define MASTER_LOG_FILE_SYM 547
#define MASTER_LOG_POS_SYM 548
#define MASTER_PASSWORD_SYM 549
#define MASTER_PORT_SYM 550
#define MASTER_RETRY_COUNT_SYM 551
#define MASTER_SERVER_ID_SYM 552
#define MASTER_SSL_CAPATH_SYM 553
#define MASTER_SSL_CA_SYM 554
#define MASTER_SSL_CERT_SYM 555
#define MASTER_SSL_CIPHER_SYM 556
#define MASTER_SSL_CRL_SYM 557
#define MASTER_SSL_CRLPATH_SYM 558
#define MASTER_SSL_KEY_SYM 559
#define MASTER_SSL_SYM 560
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 561
#define MASTER_SYM 562
#define MASTER_USER_SYM 563
#define MASTER_HEARTBEAT_PERIOD_SYM 564
#define MATCH 565
#define MAX_CONNECTIONS_PER_HOUR 566
#define MAX_QUERIES_PER_HOUR 567
#define MAX_ROWS 568
#define MAX_SIZE_SYM 569
#define MAX_SYM 570
#define MAX_UPDATES_PER_HOUR 571
#define MAX_USER_CONNECTIONS_SYM 572
#define MAX_VALUE_SYM 573
#define MEDIUMBLOB 574
#define MEDIUMINT 575
#define MEDIUMTEXT 576
#define MEDIUM_SYM 577
#define MEMORY_SYM 578
#define MERGE_SYM 579
#define MESSAGE_TEXT_SYM 580
#define MICROSECOND_SYM 581
#define MIGRATE_SYM 582
#define MINUTE_MICROSECOND_SYM 583
#define MINUTE_SECOND_SYM 584
#define MINUTE_SYM 585
#define MIN_ROWS 586
#define MIN_SYM 587
#define MODE_SYM 588
#define MODIFIES_SYM 589
#define MODIFY_SYM 590
#define MOD_SYM 591
#define MONTH_SYM 592
#define MULTILINESTRING 593
#define MULTIPOINT 594
#define MULTIPOLYGON 595
#define MUTEX_SYM 596
#define MYSQL_ERRNO_SYM 597
#define NAMES_SYM 598
#define NAME_SYM 599
#define NATIONAL_SYM 600
#define NATURAL 601
#define NCHAR_STRING 602
#define NCHAR_SYM 603
#define NDBCLUSTER_SYM 604
#define NE 605
#define NEG 606
#define NEW_SYM 607
#define NEXT_SYM 608
#define NODEGROUP_SYM 609
#define NONE_SYM 610
#define NOT2_SYM 611
#define NOT_SYM 612
#define NOW_SYM 613
#define NO_SYM 614
#define NO_WAIT_SYM 615
#define NO_WRITE_TO_BINLOG 616
#define NULL_SYM 617
#define NUM 618
#define NUMBER_SYM 619
#define NUMERIC_SYM 620
#define NVARCHAR_SYM 621
#define OFFSET_SYM 622
#define OLD_PASSWORD 623
#define ON 624
#define ONE_SYM 625
#define ONLY_SYM 626
#define OPEN_SYM 627
#define OPTIMIZE 628
#define OPTIONS_SYM 629
#define OPTION 630
#define OPTIONALLY 631
#define OR2_SYM 632
#define ORDER_SYM 633
#define OR_OR_SYM 634
#define OR_SYM 635
#define OUTER 636
#define OUTFILE 637
#define OUT_SYM 638
#define OWNER_SYM 639
#define PACK_KEYS_SYM 640
#define PAGE_SYM 641
#define PARAM_MARKER 642
#define PARSER_SYM 643
#define PARTIAL 644
#define PARTITION_SYM 645
#define PARTITIONS_SYM 646
#define PARTITIONING_SYM 647
#define PASSWORD 648
#define PHASE_SYM 649
#define PLUGIN_DIR_SYM 650
#define PLUGIN_SYM 651
#define PLUGINS_SYM 652
#define POINT_SYM 653
#define POLYGON 654
#define PORT_SYM 655
#define POSITION_SYM 656
#define PRECISION 657
#define PREPARE_SYM 658
#define PRESERVE_SYM 659
#define PREV_SYM 660
#define PRIMARY_SYM 661
#define PRIVILEGES 662
#define PROCEDURE_SYM 663
#define PROCESS 664
#define PROCESSLIST_SYM 665
#define PROFILE_SYM 666
#define PROFILES_SYM 667
#define PROXY_SYM 668
#define PURGE 669
#define QUARTER_SYM 670
#define QUERY_SYM 671
#define QUICK 672
#define RANGE_SYM 673
#define READS_SYM 674
#define READ_ONLY_SYM 675
#define READ_SYM 676
#define READ_WRITE_SYM 677
#define REAL 678
#define REBUILD_SYM 679
#define RECOVER_SYM 680
#define REDOFILE_SYM 681
#define REDO_BUFFER_SIZE_SYM 682
#define REDUNDANT_SYM 683
#define REFERENCES 684
#define REGEXP 685
#define RELAY 686
#define RELAYLOG_SYM 687
#define RELAY_LOG_FILE_SYM 688
#define RELAY_LOG_POS_SYM 689
#define RELAY_THREAD 690
#define RELEASE_SYM 691
#define RELOAD 692
#define REMOVE_SYM 693
#define RENAME 694
#define REORGANIZE_SYM 695
#define REPAIR 696
#define REPEATABLE_SYM 697
#define REPEAT_SYM 698
#define REPLACE 699
#define REPLICATION 700
#define REQUIRE_SYM 701
#define RESET_SYM 702
#define RESIGNAL_SYM 703
#define RESOURCES 704
#define RESTORE_SYM 705
#define RESTRICT 706
#define RESUME_SYM 707
#define RETURNED_SQLSTATE_SYM 708
#define RETURNS_SYM 709
#define RETURN_SYM 710
#define REVERSE_SYM 711
#define REVOKE 712
#define RIGHT 713
#define ROLLBACK_SYM 714
#define ROLLUP_SYM 715
#define ROUTINE_SYM 716
#define ROWS_SYM 717
#define ROW_FORMAT_SYM 718
#define ROW_SYM 719
#define ROW_COUNT_SYM 720
#define RTREE_SYM 721
#define SAVEPOINT_SYM 722
#define SCHEDULE_SYM 723
#define SCHEMA_NAME_SYM 724
#define SECOND_MICROSECOND_SYM 725
#define SECOND_SYM 726
#define SECURITY_SYM 727
#define SELECT_SYM 728
#define SENSITIVE_SYM 729
#define SEPARATOR_SYM 730
#define SERIALIZABLE_SYM 731
#define SERIAL_SYM 732
#define SESSION_SYM 733
#define SERVER_SYM 734
#define SERVER_OPTIONS 735
#define SET 736
#define SET_VAR 737
#define SHARE_SYM 738
#define SHIFT_LEFT 739
#define SHIFT_RIGHT 740
#define SHOW 741
#define SHUTDOWN 742
#define SIGNAL_SYM 743
#define SIGNED_SYM 744
#define SIMPLE_SYM 745
#define SLAVE 746
#define SLOW 747
#define SMALLINT 748
#define SNAPSHOT_SYM 749
#define SOCKET_SYM 750
#define SONAME_SYM 751
#define SOUNDS_SYM 752
#define SOURCE_SYM 753
#define SPATIAL_SYM 754
#define SPECIFIC_SYM 755
#define SQLEXCEPTION_SYM 756
#define SQLSTATE_SYM 757
#define SQLWARNING_SYM 758
#define SQL_AFTER_GTIDS 759
#define SQL_AFTER_MTS_GAPS 760
#define SQL_BEFORE_GTIDS 761
#define SQL_BIG_RESULT 762
#define SQL_BUFFER_RESULT 763
#define SQL_CACHE_SYM 764
#define SQL_CALC_FOUND_ROWS 765
#define SQL_NO_CACHE_SYM 766
#define SQL_SMALL_RESULT 767
#define SQL_SYM 768
#define SQL_THREAD 769
#define SSL_SYM 770
#define STARTING 771
#define STARTS_SYM 772
#define START_SYM 773
#define STATEMENT_SYM 774
#define STATS_AUTO_RECALC_SYM 775
#define STATS_PERSISTENT_SYM 776
#define STATS_SAMPLE_PAGES_SYM 777
#define STATUS_SYM 778
#define NOLOCK_SYM 779
#define NONBLOCKING_SYM 780
#define STDDEV_SAMP_SYM 781
#define STD_SYM 782
#define STOP_SYM 783
#define STORAGE_SYM 784
#define STRAIGHT_JOIN 785
#define STRING_SYM 786
#define SUBCLASS_ORIGIN_SYM 787
#define SUBDATE_SYM 788
#define SUBJECT_SYM 789
#define SUBPARTITIONS_SYM 790
#define SUBPARTITION_SYM 791
#define SUBSTRING 792
#define SUM_SYM 793
#define SUPER_SYM 794
#define SUSPEND_SYM 795
#define SWAPS_SYM 796
#define SWITCHES_SYM 797
#define SYSDATE 798
#define TABLES 799
#define TABLESPACE 800
#define TABLE_REF_PRIORITY 801
#define TABLE_SYM 802
#define TABLE_STATS_SYM 803
#define TABLE_CHECKSUM_SYM 804
#define TABLE_NAME_SYM 805
#define TEMPORARY 806
#define TEMPTABLE_SYM 807
#define TERMINATED 808
#define TEXT_STRING 809
#define TEXT_SYM 810
#define THAN_SYM 811
#define THEN_SYM 812
#define THREAD_STATS_SYM 813
#define TIMESTAMP 814
#define TIMESTAMP_ADD 815
#define TIMESTAMP_DIFF 816
#define TIME_SYM 817
#define TINYBLOB 818
#define TINYINT 819
#define TINYTEXT 820
#define TO_SYM 821
#define TOKU_UNCOMPRESSED_SYM 822
#define TOKU_ZLIB_SYM 823
#define TOKU_QUICKLZ_SYM 824
#define TOKU_LZMA_SYM 825
#define TOKU_FAST_SYM 826
#define TOKU_SMALL_SYM 827
#define TRAILING 828
#define TRANSACTION_SYM 829
#define TRIGGERS_SYM 830
#define TRIGGER_SYM 831
#define TRIM 832
#define TRUE_SYM 833
#define TRUNCATE_SYM 834
#define TYPES_SYM 835
#define TYPE_SYM 836
#define UDF_RETURNS_SYM 837
#define ULONGLONG_NUM 838
#define UNCOMMITTED_SYM 839
#define UNDEFINED_SYM 840
#define UNDERSCORE_CHARSET 841
#define UNDOFILE_SYM 842
#define UNDO_BUFFER_SIZE_SYM 843
#define UNDO_SYM 844
#define UNICODE_SYM 845
#define UNINSTALL_SYM 846
#define UNION_SYM 847
#define UNIQUE_SYM 848
#define UNKNOWN_SYM 849
#define UNLOCK_SYM 850
#define UNSIGNED 851
#define UNTIL_SYM 852
#define UPDATE_SYM 853
#define UPGRADE_SYM 854
#define USAGE 855
#define USER 856
#define USER_STATS_SYM 857
#define USE_FRM 858
#define USE_SYM 859
#define USING 860
#define UTC_DATE_SYM 861
#define UTC_TIMESTAMP_SYM 862
#define UTC_TIME_SYM 863
#define VALUES 864
#define VALUE_SYM 865
#define VARBINARY 866
#define VARCHAR 867
#define VARIABLES 868
#define VARIANCE_SYM 869
#define VARYING 870
#define VAR_SAMP_SYM 871
#define VIEW_SYM 872
#define WAIT_SYM 873
#define WARNINGS 874
#define WEEK_SYM 875
#define WEIGHT_STRING_SYM 876
#define WHEN_SYM 877
#define WHERE 878
#define WHILE_SYM 879
#define WITH 880
#define WITH_CUBE_SYM 881
#define WITH_ROLLUP_SYM 882
#define WORK_SYM 883
#define WRAPPER_SYM 884
#define WRITE_SYM 885
#define X509_SYM 886
#define XA_SYM 887
#define XML_SYM 888
#define XOR 889
#define YEAR_MONTH_SYM 890
#define YEAR_SYM 891
#define ZEROFILL 892




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 909 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_ha_read_modes ha_read_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  const CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  class sp_condition_value *spcondvalue;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  LEX *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  enum index_hint_type index_hint;
  enum enum_filetype filetype;
  enum Foreign_key::fk_option m_fk_option;
  enum enum_yes_no_unknown m_yes_no_unk;
  bool is_not_empty;



/* Line 214 of yacc.c  */
#line 2329 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.cc"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


/* Copy the second part of user declarations.  */

/* Line 264 of yacc.c  */
#line 958 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 264 of yacc.c  */
#line 2346 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  601
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   54570

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  657
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  921
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2606
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4394

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   892

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   650,     2,     2,     2,   644,   639,     2,
     647,   648,   642,   641,   649,   640,   655,   643,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   656,   653,
       2,     2,     2,     2,   654,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   645,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   651,   638,   652,   646,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   119,   121,
     123,   128,   130,   133,   134,   139,   140,   143,   147,   149,
     152,   153,   157,   158,   166,   167,   168,   183,   184,   185,
     200,   201,   202,   217,   218,   225,   226,   230,   235,   240,
     244,   247,   258,   260,   264,   267,   270,   273,   276,   279,
     282,   285,   286,   300,   301,   308,   311,   312,   314,   318,
     320,   321,   324,   325,   328,   329,   331,   335,   340,   341,
     344,   345,   348,   350,   352,   354,   356,   358,   360,   362,
     364,   366,   368,   370,   372,   374,   375,   379,   381,   382,
     385,   386,   389,   392,   395,   398,   401,   405,   409,   411,
     413,   415,   418,   422,   426,   427,   432,   433,   437,   438,
     440,   444,   446,   447,   449,   453,   455,   456,   460,   461,
     463,   467,   469,   474,   475,   477,   479,   481,   482,   486,
     489,   493,   494,   498,   499,   505,   511,   512,   520,   521,
     528,   530,   532,   534,   538,   540,   542,   544,   548,   549,
     551,   553,   555,   557,   560,   562,   564,   568,   569,   570,
     574,   576,   578,   580,   582,   584,   586,   588,   590,   592,
     594,   596,   598,   600,   601,   607,   608,   611,   612,   616,
     617,   620,   623,   626,   629,   630,   637,   640,   641,   644,
     646,   648,   652,   653,   654,   655,   663,   664,   667,   670,
     672,   674,   675,   676,   685,   686,   693,   695,   698,   700,
     703,   704,   705,   712,   713,   714,   721,   722,   725,   726,
     732,   733,   735,   736,   742,   743,   746,   747,   753,   758,
     759,   760,   769,   770,   771,   780,   782,   784,   786,   788,
     790,   793,   798,   804,   805,   810,   815,   820,   824,   828,
     831,   834,   835,   838,   840,   843,   847,   849,   851,   853,
     854,   856,   858,   861,   865,   867,   869,   871,   873,   875,
     877,   879,   881,   882,   884,   886,   889,   893,   895,   897,
     899,   901,   903,   904,   906,   908,   911,   915,   917,   919,
     921,   923,   925,   927,   929,   930,   932,   934,   937,   941,
     943,   945,   947,   950,   953,   956,   958,   960,   962,   964,
     967,   971,   975,   979,   983,   987,   991,   995,   999,  1004,
    1006,  1008,  1010,  1012,  1015,  1019,  1022,  1027,  1033,  1034,
    1040,  1041,  1042,  1048,  1049,  1057,  1059,  1060,  1062,  1063,
    1068,  1069,  1070,  1074,  1080,  1087,  1088,  1093,  1096,  1099,
    1102,  1105,  1106,  1108,  1109,  1113,  1114,  1116,  1118,  1122,
    1124,  1129,  1135,  1141,  1142,  1145,  1146,  1147,  1155,  1156,
    1167,  1169,  1173,  1175,  1177,  1178,  1181,  1182,  1186,  1188,
    1192,  1193,  1200,  1202,  1203,  1204,  1210,  1211,  1216,  1218,
    1220,  1222,  1226,  1228,  1232,  1233,  1234,  1240,  1242,  1246,
    1248,  1250,  1251,  1255,  1257,  1261,  1262,  1267,  1269,  1270,
    1272,  1275,  1277,  1281,  1286,  1290,  1294,  1298,  1303,  1308,
    1312,  1313,  1314,  1321,  1322,  1324,  1325,  1327,  1329,  1332,
    1334,  1336,  1337,  1339,  1341,  1344,  1346,  1347,  1351,  1352,
    1354,  1356,  1359,  1361,  1364,  1368,  1372,  1376,  1380,  1384,
    1388,  1392,  1396,  1400,  1404,  1408,  1412,  1416,  1420,  1424,
    1428,  1432,  1436,  1440,  1444,  1445,  1452,  1454,  1456,  1460,
    1465,  1470,  1473,  1476,  1479,  1483,  1487,  1492,  1497,  1499,
    1501,  1503,  1505,  1507,  1509,  1511,  1513,  1515,  1517,  1519,
    1521,  1523,  1525,  1527,  1529,  1531,  1533,  1536,  1538,  1540,
    1542,  1544,  1546,  1548,  1552,  1554,  1556,  1559,  1562,  1570,
    1579,  1588,  1597,  1606,  1609,  1610,  1612,  1617,  1618,  1620,
    1623,  1624,  1629,  1633,  1637,  1641,  1643,  1646,  1648,  1650,
    1654,  1657,  1661,  1664,  1667,  1669,  1673,  1677,  1680,  1684,
    1686,  1689,  1692,  1695,  1697,  1700,  1702,  1704,  1706,  1709,
    1713,  1716,  1720,  1723,  1726,  1730,  1734,  1738,  1739,  1746,
    1747,  1754,  1757,  1759,  1761,  1763,  1765,  1767,  1769,  1771,
    1773,  1775,  1777,  1779,  1782,  1785,  1787,  1790,  1792,  1795,
    1799,  1802,  1804,  1806,  1808,  1810,  1812,  1814,  1816,  1819,
    1820,  1822,  1824,  1830,  1831,  1835,  1836,  1839,  1843,  1844,
    1846,  1849,  1851,  1853,  1855,  1857,  1861,  1865,  1869,  1873,
    1874,  1876,  1877,  1879,  1880,  1882,  1885,  1887,  1889,  1892,
    1895,  1899,  1901,  1905,  1908,  1910,  1913,  1916,  1919,  1922,
    1925,  1928,  1931,  1934,  1937,  1940,  1943,  1945,  1947,  1950,
    1952,  1954,  1956,  1958,  1960,  1961,  1964,  1966,  1968,  1970,
    1972,  1974,  1975,  1978,  1980,  1982,  1983,  1985,  1987,  1990,
    1993,  1995,  1998,  2001,  2002,  2004,  2006,  2008,  2012,  2014,
    2018,  2019,  2021,  2022,  2027,  2029,  2031,  2033,  2034,  2036,
    2039,  2041,  2043,  2046,  2048,  2052,  2056,  2058,  2060,  2061,
    2064,  2065,  2067,  2073,  2074,  2078,  2082,  2084,  2085,  2088,
    2091,  2094,  2095,  2099,  2103,  2110,  2117,  2119,  2121,  2124,
    2127,  2130,  2132,  2135,  2138,  2140,  2142,  2143,  2145,  2147,
    2149,  2151,  2152,  2154,  2156,  2158,  2160,  2163,  2166,  2168,
    2170,  2172,  2174,  2175,  2177,  2180,  2181,  2183,  2184,  2186,
    2187,  2189,  2191,  2194,  2196,  2199,  2201,  2204,  2207,  2210,
    2214,  2217,  2219,  2221,  2223,  2225,  2229,  2231,  2233,  2235,
    2240,  2243,  2245,  2250,  2251,  2253,  2254,  2257,  2259,  2263,
    2264,  2271,  2272,  2278,  2286,  2287,  2293,  2294,  2300,  2301,
    2307,  2308,  2313,  2314,  2325,  2329,  2334,  2338,  2342,  2350,
    2355,  2359,  2365,  2366,  2370,  2372,  2377,  2378,  2382,  2383,
    2386,  2387,  2389,  2390,  2393,  2396,  2399,  2402,  2404,  2406,
    2408,  2412,  2417,  2418,  2425,  2430,  2431,  2437,  2438,  2445,
    2450,  2454,  2456,  2464,  2468,  2470,  2472,  2473,  2479,  2480,
    2484,  2487,  2488,  2494,  2495,  2496,  2503,  2505,  2509,  2511,
    2513,  2517,  2520,  2524,  2527,  2532,  2533,  2540,  2541,  2542,
    2551,  2556,  2561,  2565,  2569,  2572,  2575,  2582,  2588,  2592,
    2598,  2600,  2602,  2604,  2606,  2608,  2609,  2611,  2613,  2616,
    2619,  2623,  2627,  2631,  2635,  2636,  2638,  2639,  2641,  2642,
    2644,  2646,  2647,  2650,  2652,  2653,  2655,  2657,  2659,  2663,
    2664,  2666,  2668,  2672,  2676,  2683,  2686,  2689,  2690,  2696,
    2697,  2699,  2701,  2702,  2709,  2710,  2712,  2714,  2717,  2719,
    2721,  2723,  2724,  2730,  2733,  2734,  2740,  2741,  2743,  2745,
    2748,  2750,  2752,  2754,  2756,  2758,  2761,  2762,  2768,  2769,
    2771,  2773,  2774,  2779,  2784,  2788,  2794,  2796,  2800,  2804,
    2805,  2812,  2814,  2816,  2818,  2822,  2825,  2829,  2831,  2833,
    2834,  2841,  2843,  2845,  2847,  2851,  2855,  2860,  2861,  2868,
    2869,  2872,  2873,  2878,  2879,  2882,  2884,  2887,  2892,  2895,
    2899,  2902,  2906,  2907,  2911,  2912,  2913,  2920,  2923,  2925,
    2927,  2930,  2933,  2942,  2947,  2948,  2950,  2953,  2955,  2957,
    2959,  2961,  2962,  2965,  2970,  2974,  2976,  2978,  2982,  2987,
    2988,  2989,  2990,  2993,  2996,  2998,  3000,  3001,  3004,  3008,
    3012,  3016,  3019,  3023,  3028,  3032,  3037,  3041,  3046,  3048,
    3052,  3057,  3061,  3065,  3072,  3074,  3080,  3087,  3093,  3101,
    3108,  3117,  3123,  3130,  3135,  3140,  3146,  3150,  3155,  3157,
    3161,  3165,  3169,  3173,  3177,  3181,  3187,  3193,  3197,  3201,
    3205,  3209,  3213,  3217,  3219,  3221,  3223,  3225,  3227,  3229,
    3231,  3233,  3235,  3237,  3239,  3241,  3243,  3245,  3247,  3249,
    3251,  3253,  3255,  3257,  3259,  3261,  3265,  3267,  3269,  3271,
    3273,  3277,  3280,  3283,  3286,  3289,  3293,  3297,  3303,  3310,
    3315,  3320,  3328,  3331,  3338,  3344,  3351,  3358,  3363,  3368,
    3374,  3379,  3386,  3389,  3394,  3399,  3404,  3415,  3422,  3431,
    3438,  3443,  3448,  3455,  3460,  3465,  3470,  3477,  3482,  3490,
    3498,  3506,  3513,  3520,  3527,  3534,  3538,  3543,  3550,  3559,
    3562,  3565,  3574,  3583,  3590,  3597,  3599,  3606,  3613,  3622,
    3631,  3638,  3647,  3654,  3657,  3666,  3675,  3678,  3681,  3684,
    3689,  3694,  3699,  3704,  3708,  3717,  3724,  3733,  3738,  3745,
    3750,  3755,  3760,  3767,  3776,  3781,  3785,  3792,  3797,  3804,
    3810,  3819,  3827,  3838,  3840,  3847,  3852,  3857,  3862,  3867,
    3872,  3879,  3884,  3885,  3891,  3898,  3901,  3905,  3906,  3911,
    3912,  3916,  3917,  3919,  3921,  3925,  3930,  3935,  3941,  3946,
    3951,  3956,  3962,  3967,  3968,  3969,  3977,  3982,  3988,  3993,
    3999,  4004,  4009,  4014,  4019,  4024,  4030,  4031,  4040,  4041,
    4045,  4049,  4051,  4056,  4057,  4059,  4060,  4063,  4064,  4065,
    4070,  4075,  4078,  4079,  4083,  4086,  4090,  4093,  4095,  4098,
    4100,  4103,  4105,  4108,  4111,  4114,  4115,  4117,  4119,  4123,
    4125,  4129,  4131,  4135,  4136,  4138,  4139,  4142,  4147,  4153,
    4155,  4157,  4159,  4161,  4166,  4168,  4172,  4176,  4180,  4181,
    4188,  4189,  4196,  4197,  4206,  4211,  4212,  4221,  4222,  4233,
    4240,  4241,  4250,  4251,  4262,  4269,  4271,  4274,  4277,  4278,
    4280,  4286,  4287,  4293,  4297,  4303,  4306,  4307,  4308,  4316,
    4318,  4319,  4320,  4327,  4328,  4332,  4333,  4334,  4340,  4341,
    4343,  4344,  4346,  4347,  4350,  4354,  4358,  4360,  4362,  4363,
    4371,  4372,  4380,  4382,  4385,  4386,  4387,  4390,  4391,  4394,
    4395,  4397,  4399,  4401,  4403,  4407,  4409,  4413,  4415,  4417,
    4419,  4421,  4423,  4425,  4427,  4429,  4431,  4433,  4435,  4437,
    4439,  4441,  4443,  4445,  4447,  4449,  4451,  4453,  4455,  4457,
    4459,  4461,  4463,  4464,  4466,  4468,  4469,  4472,  4473,  4475,
    4476,  4477,  4481,  4482,  4483,  4487,  4490,  4491,  4492,  4497,
    4502,  4505,  4506,  4508,  4510,  4514,  4518,  4520,  4523,  4524,
    4526,  4527,  4532,  4537,  4540,  4541,  4543,  4545,  4546,  4548,
    4549,  4551,  4554,  4556,  4560,  4564,  4566,  4568,  4570,  4572,
    4574,  4575,  4578,  4580,  4582,  4584,  4586,  4588,  4590,  4592,
    4594,  4596,  4598,  4600,  4602,  4604,  4606,  4608,  4610,  4612,
    4614,  4616,  4618,  4620,  4622,  4624,  4625,  4626,  4633,  4634,
    4636,  4640,  4642,  4643,  4646,  4650,  4652,  4655,  4657,  4658,
    4662,  4663,  4664,  4672,  4675,  4677,  4678,  4682,  4683,  4691,
    4692,  4693,  4702,  4707,  4714,  4719,  4724,  4729,  4730,  4737,
    4742,  4747,  4752,  4758,  4763,  4765,  4769,  4771,  4774,  4776,
    4780,  4782,  4783,  4786,  4787,  4789,  4790,  4792,  4794,  4797,
    4801,  4803,  4805,  4806,  4807,  4816,  4817,  4818,  4825,  4826,
    4828,  4830,  4832,  4834,  4836,  4839,  4841,  4843,  4845,  4849,
    4854,  4855,  4859,  4863,  4865,  4868,  4871,  4872,  4876,  4877,
    4883,  4887,  4889,  4893,  4895,  4899,  4901,  4903,  4904,  4906,
    4907,  4912,  4913,  4915,  4919,  4921,  4923,  4925,  4926,  4927,
    4934,  4935,  4936,  4948,  4952,  4954,  4958,  4962,  4964,  4968,
    4969,  4971,  4972,  4977,  4978,  4986,  4987,  4993,  4994,  5001,
    5003,  5007,  5010,  5015,  5016,  5019,  5020,  5023,  5025,  5027,
    5029,  5030,  5035,  5036,  5038,  5039,  5041,  5043,  5047,  5049,
    5051,  5054,  5057,  5060,  5062,  5064,  5066,  5068,  5069,  5073,
    5074,  5078,  5081,  5086,  5091,  5095,  5100,  5105,  5107,  5111,
    5115,  5122,  5125,  5128,  5129,  5136,  5137,  5144,  5150,  5153,
    5155,  5161,  5167,  5170,  5173,  5175,  5180,  5184,  5187,  5191,
    5194,  5197,  5199,  5203,  5208,  5212,  5216,  5219,  5222,  5226,
    5230,  5233,  5236,  5239,  5242,  5245,  5249,  5253,  5257,  5261,
    5265,  5269,  5273,  5277,  5279,  5281,  5283,  5285,  5287,  5288,
    5290,  5291,  5294,  5295,  5297,  5299,  5301,  5302,  5305,  5306,
    5309,  5310,  5313,  5316,  5317,  5322,  5323,  5328,  5330,  5332,
    5334,  5336,  5338,  5340,  5342,  5343,  5345,  5347,  5351,  5352,
    5354,  5356,  5357,  5362,  5363,  5364,  5370,  5372,  5373,  5377,
    5378,  5382,  5386,  5388,  5391,  5394,  5397,  5400,  5403,  5406,
    5409,  5411,  5413,  5415,  5417,  5419,  5421,  5423,  5425,  5427,
    5429,  5431,  5433,  5434,  5436,  5437,  5441,  5445,  5447,  5448,
    5452,  5454,  5457,  5459,  5460,  5462,  5463,  5467,  5471,  5475,
    5479,  5482,  5485,  5488,  5491,  5495,  5496,  5498,  5500,  5503,
    5504,  5505,  5506,  5507,  5530,  5532,  5534,  5535,  5537,  5538,
    5540,  5542,  5543,  5545,  5547,  5548,  5551,  5554,  5556,  5560,
    5565,  5569,  5573,  5574,  5577,  5580,  5582,  5586,  5590,  5591,
    5596,  5597,  5601,  5603,  5605,  5606,  5610,  5613,  5617,  5619,
    5621,  5624,  5625,  5628,  5632,  5634,  5640,  5642,  5644,  5647,
    5650,  5652,  5654,  5656,  5658,  5660,  5663,  5666,  5668,  5670,
    5672,  5674,  5676,  5678,  5680,  5682,  5685,  5688,  5690,  5692,
    5694,  5696,  5698,  5701,  5704,  5707,  5709,  5711,  5715,  5721,
    5723,  5725,  5727,  5729,  5731,  5735,  5740,  5746,  5748,  5754,
    5758,  5761,  5763,  5767,  5770,  5773,  5778,  5780,  5782,  5784,
    5786,  5788,  5790,  5792,  5794,  5796,  5798,  5800,  5802,  5804,
    5806,  5810,  5813,  5815,  5817,  5819,  5821,  5823,  5825,  5827,
    5829,  5831,  5833,  5835,  5837,  5839,  5841,  5843,  5845,  5847,
    5849,  5851,  5853,  5855,  5857,  5859,  5861,  5863,  5865,  5867,
    5869,  5871,  5873,  5875,  5877,  5879,  5881,  5883,  5885,  5887,
    5889,  5891,  5893,  5895,  5897,  5899,  5901,  5903,  5905,  5907,
    5909,  5911,  5913,  5915,  5917,  5919,  5921,  5923,  5925,  5927,
    5929,  5931,  5933,  5935,  5937,  5939,  5941,  5943,  5945,  5947,
    5949,  5951,  5953,  5955,  5957,  5959,  5961,  5963,  5965,  5967,
    5969,  5971,  5973,  5975,  5977,  5979,  5981,  5983,  5985,  5987,
    5989,  5991,  5993,  5995,  5997,  5999,  6001,  6003,  6005,  6007,
    6009,  6011,  6013,  6015,  6017,  6019,  6021,  6023,  6025,  6027,
    6029,  6031,  6033,  6035,  6037,  6039,  6041,  6043,  6045,  6047,
    6049,  6051,  6053,  6055,  6057,  6059,  6061,  6063,  6065,  6067,
    6069,  6071,  6073,  6075,  6077,  6079,  6081,  6083,  6085,  6087,
    6089,  6091,  6093,  6095,  6097,  6099,  6101,  6103,  6105,  6107,
    6109,  6111,  6113,  6115,  6117,  6119,  6121,  6123,  6125,  6127,
    6129,  6131,  6133,  6135,  6137,  6139,  6141,  6143,  6145,  6147,
    6149,  6151,  6153,  6155,  6157,  6159,  6161,  6163,  6165,  6167,
    6169,  6171,  6173,  6175,  6177,  6179,  6181,  6183,  6185,  6187,
    6189,  6191,  6193,  6195,  6197,  6199,  6201,  6203,  6205,  6207,
    6209,  6211,  6213,  6215,  6217,  6219,  6221,  6223,  6225,  6227,
    6229,  6231,  6233,  6235,  6237,  6239,  6241,  6243,  6245,  6247,
    6249,  6251,  6253,  6255,  6257,  6259,  6261,  6263,  6265,  6267,
    6269,  6271,  6273,  6275,  6277,  6279,  6281,  6283,  6285,  6287,
    6289,  6291,  6293,  6295,  6297,  6299,  6301,  6303,  6305,  6307,
    6309,  6311,  6313,  6315,  6317,  6319,  6321,  6323,  6325,  6327,
    6329,  6331,  6333,  6335,  6337,  6339,  6341,  6343,  6345,  6347,
    6349,  6351,  6353,  6355,  6357,  6359,  6361,  6363,  6365,  6367,
    6369,  6371,  6373,  6375,  6377,  6379,  6381,  6383,  6385,  6387,
    6389,  6391,  6393,  6395,  6397,  6399,  6401,  6403,  6405,  6407,
    6409,  6411,  6413,  6415,  6417,  6419,  6421,  6423,  6425,  6427,
    6429,  6431,  6433,  6435,  6437,  6439,  6441,  6443,  6445,  6447,
    6449,  6451,  6453,  6455,  6457,  6459,  6461,  6463,  6465,  6467,
    6469,  6471,  6473,  6475,  6477,  6479,  6481,  6483,  6485,  6487,
    6489,  6491,  6493,  6495,  6497,  6499,  6501,  6503,  6505,  6507,
    6509,  6511,  6513,  6515,  6517,  6519,  6521,  6523,  6525,  6527,
    6529,  6531,  6533,  6535,  6537,  6539,  6541,  6543,  6544,  6548,
    6549,  6556,  6558,  6562,  6563,  6567,  6568,  6572,  6573,  6577,
    6578,  6582,  6585,  6586,  6589,  6590,  6593,  6594,  6599,  6600,
    6604,  6606,  6608,  6610,  6612,  6613,  6615,  6617,  6619,  6620,
    6623,  6626,  6629,  6633,  6634,  6639,  6644,  6651,  6654,  6658,
    6662,  6666,  6672,  6674,  6678,  6682,  6684,  6686,  6690,  6694,
    6696,  6700,  6703,  6706,  6709,  6712,  6715,  6717,  6719,  6724,
    6729,  6731,  6733,  6735,  6737,  6739,  6742,  6746,  6750,  6751,
    6755,  6757,  6759,  6761,  6765,  6769,  6771,  6773,  6776,  6779,
    6782,  6784,  6786,  6791,  6795,  6796,  6804,  6806,  6809,  6811,
    6813,  6815,  6817,  6819,  6821,  6822,  6828,  6830,  6832,  6834,
    6836,  6838,  6839,  6844,  6851,  6858,  6865,  6873,  6879,  6880,
    6885,  6894,  6903,  6912,  6919,  6920,  6922,  6924,  6927,  6928,
    6930,  6932,  6936,  6937,  6941,  6942,  6946,  6947,  6951,  6952,
    6956,  6958,  6960,  6962,  6964,  6966,  6968,  6970,  6972,  6974,
    6976,  6978,  6981,  6984,  6986,  6990,  6993,  6996,  6999,  7002,
    7005,  7008,  7011,  7014,  7016,  7018,  7021,  7022,  7024,  7028,
    7030,  7033,  7036,  7039,  7041,  7045,  7049,  7051,  7053,  7057,
    7059,  7063,  7068,  7074,  7079,  7086,  7088,  7089,  7093,  7097,
    7099,  7101,  7102,  7105,  7108,  7111,  7114,  7115,  7118,  7119,
    7123,  7126,  7128,  7131,  7134,  7137,  7140,  7143,  7144,  7148,
    7149,  7151,  7152,  7156,  7159,  7160,  7162,  7165,  7166,  7168,
    7173,  7178,  7184,  7187,  7191,  7192,  7194,  7195,  7200,  7201,
    7203,  7205,  7206,  7208,  7209,  7212,  7215,  7217,  7218,  7220,
    7222,  7225,  7229,  7232,  7233,  7240,  7244,  7245,  7246,  7247,
    7249,  7252,  7254,  7256,  7258,  7260,  7262,  7264,  7266,  7268,
    7270,  7273,  7276,  7280,  7282,  7284,  7286,  7288,  7290,  7292,
    7294,  7296,  7298,  7300,  7302,  7304,  7306,  7307,  7311,  7313,
    7316,  7318,  7321,  7325,  7329,  7333,  7334,  7338,  7342,  7343,
    7351,  7352,  7356,  7358,  7362,  7363,  7367,  7368,  7372,  7377,
    7379,  7383,  7384,  7388,  7389,  7393,  7398,  7403,  7404,  7405,
    7406,  7423,  7432,  7440,  7441,  7442,  7443,  7444,  7445,  7461,
    7462,  7463,  7464,  7465,  7478,  7483,  7488,  7492,  7497,  7501,
    7504,  7506,  7510,  7516,  7518,  7520,  7521,  7523,  7525,  7526,
    7529,  7530,  7531,  7535,  7536,  7539,  7545
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     658,     0,    -1,   155,    -1,    -1,   661,   659,   653,   660,
      -1,   661,   155,    -1,    -1,   155,    -1,   662,    -1,  1502,
      -1,  1011,    -1,  1065,    -1,  1067,    -1,   707,    -1,  1068,
      -1,  1057,    -1,  1508,    -1,   674,    -1,   663,    -1,  1312,
      -1,  1344,    -1,  1259,    -1,  1261,    -1,   667,    -1,  1351,
      -1,  1475,    -1,  1465,    -1,   672,    -1,  1276,    -1,  1576,
      -1,  1372,    -1,  1375,    -1,  1456,    -1,  1073,    -1,  1081,
      -1,   842,    -1,  1088,    -1,   665,    -1,  1367,    -1,  1511,
      -1,  1076,    -1,  1060,    -1,  1279,    -1,  1361,    -1,  1472,
      -1,  1509,    -1,  1510,    -1,  1100,    -1,  1426,    -1,  1330,
      -1,  1053,    -1,  1323,    -1,  1577,    -1,  1463,    -1,  1304,
      -1,  1374,    -1,  1568,    -1,   664,   403,  1420,    -1,   120,
      -1,   143,    -1,   403,  1420,   193,   666,    -1,  1417,    -1,
     654,  1422,    -1,    -1,   169,  1420,   668,   669,    -1,    -1,
     605,   670,    -1,   670,   649,   671,    -1,   671,    -1,   654,
    1422,    -1,    -1,   212,   673,  1422,    -1,    -1,    98,   894,
     547,   897,  1413,   675,   831,    -1,    -1,    -1,    98,   985,
     229,  1420,   993,   369,  1413,   676,   647,  1006,   648,   994,
     677,  1045,    -1,    -1,    -1,    98,   990,   229,  1420,   992,
     369,  1413,   678,   647,  1006,   648,   995,   679,  1045,    -1,
      -1,    -1,    98,   991,   229,  1420,   992,   369,  1413,   680,
     647,  1006,   648,   996,   681,  1045,    -1,    -1,    98,   107,
     897,  1420,   682,   891,    -1,    -1,    98,   683,  1530,    -1,
      98,   601,   700,  1492,    -1,    98,   278,   206,   795,    -1,
      98,   545,   792,    -1,    98,   684,    -1,   479,  1422,   189,
     110,   629,  1422,   374,   647,   685,   648,    -1,   686,    -1,
     685,   649,   686,    -1,   601,  1417,    -1,   215,  1417,    -1,
     107,  1417,    -1,   384,  1417,    -1,   393,  1417,    -1,   495,
    1417,    -1,   400,  1240,    -1,    -1,  1117,   166,   897,   701,
     688,   369,   468,   689,   694,   691,   696,   142,   697,    -1,
      -1,   167,  1121,  1212,   690,   692,   693,    -1,    24,  1121,
      -1,    -1,   151,    -1,   136,   369,   491,    -1,   136,    -1,
      -1,   517,  1121,    -1,    -1,   154,  1121,    -1,    -1,   695,
      -1,   369,    82,   404,    -1,   369,    82,   357,   404,    -1,
      -1,    78,  1417,    -1,    -1,   698,   699,    -1,   740,    -1,
     742,    -1,   738,    -1,   759,    -1,   777,    -1,   779,    -1,
     774,    -1,   744,    -1,   746,    -1,   747,    -1,   748,    -1,
     749,    -1,   751,    -1,    -1,  1420,   655,  1420,    -1,  1420,
      -1,    -1,   702,   704,    -1,    -1,   703,   705,    -1,    78,
    1417,    -1,   257,   513,    -1,   359,   513,    -1,    92,   513,
      -1,   419,   513,   110,    -1,   334,   513,   110,    -1,   706,
      -1,   704,    -1,   133,    -1,  1127,   133,    -1,   513,   472,
     126,    -1,   513,   472,   242,    -1,    -1,    50,   701,   708,
     709,    -1,    -1,   647,   710,   648,    -1,    -1,   711,    -1,
     711,   649,  1121,    -1,  1121,    -1,    -1,   713,    -1,   713,
     649,   715,    -1,   715,    -1,    -1,  1420,   714,   945,    -1,
      -1,   717,    -1,   717,   649,   718,    -1,   718,    -1,   719,
     714,  1420,   945,    -1,    -1,   243,    -1,   383,    -1,   234,
      -1,    -1,   720,   737,   653,    -1,   737,   653,    -1,   721,
     737,   653,    -1,    -1,   722,   723,   653,    -1,    -1,   123,
     734,   724,   945,   735,    -1,   123,  1420,    85,   190,   730,
      -1,    -1,   123,   727,   209,   190,   725,   728,   737,    -1,
      -1,   123,  1420,   104,   190,   726,  1100,    -1,   171,    -1,
      94,    -1,   729,    -1,   728,   649,   729,    -1,   733,    -1,
    1240,    -1,   731,    -1,   502,   732,  1418,    -1,    -1,   610,
      -1,   730,    -1,  1420,    -1,   503,    -1,  1127,   192,    -1,
     501,    -1,  1420,    -1,   734,   649,  1420,    -1,    -1,    -1,
     124,   736,  1121,    -1,   740,    -1,   742,    -1,   738,    -1,
     759,    -1,   777,    -1,   779,    -1,   774,    -1,   744,    -1,
     746,    -1,   747,    -1,   748,    -1,   749,    -1,   751,    -1,
      -1,   224,   739,   754,   153,   224,    -1,    -1,   741,   662,
      -1,    -1,   455,   743,  1121,    -1,    -1,   745,   783,    -1,
     262,  1421,    -1,   251,  1421,    -1,   372,  1420,    -1,    -1,
     181,   752,  1420,   240,   750,   753,    -1,    68,  1420,    -1,
      -1,   353,   193,    -1,   193,    -1,  1420,    -1,   753,   649,
    1420,    -1,    -1,    -1,    -1,   755,  1121,   756,   557,   721,
     757,   758,    -1,    -1,   150,   754,    -1,   149,   721,    -1,
     760,    -1,   763,    -1,    -1,    -1,    53,   761,  1121,   762,
     765,   773,   153,    53,    -1,    -1,    53,   764,   766,   773,
     153,    53,    -1,   767,    -1,   765,   767,    -1,   770,    -1,
     766,   770,    -1,    -1,    -1,   622,   768,  1121,   769,   557,
     721,    -1,    -1,    -1,   622,   771,  1121,   772,   557,   721,
      -1,    -1,   149,   721,    -1,    -1,  1421,   656,   775,   783,
     776,    -1,    -1,  1421,    -1,    -1,  1421,   656,   778,   781,
     776,    -1,    -1,   780,   781,    -1,    -1,    31,   782,   722,
     720,   153,    -1,   284,   721,   153,   284,    -1,    -1,    -1,
     624,   784,  1121,   785,   142,   721,   153,   624,    -1,    -1,
      -1,   443,   721,   597,   786,  1121,   787,   153,   443,    -1,
      30,    -1,     8,    -1,   236,    -1,   598,    -1,   129,    -1,
     817,   819,    -1,   817,    57,   814,   798,    -1,   817,     6,
     814,   793,   802,    -1,    -1,   604,   278,   206,  1420,    -1,
     817,     6,   814,   805,    -1,   817,   143,   814,   805,    -1,
     818,   797,   808,    -1,   818,   797,   811,    -1,     6,   815,
      -1,     6,   816,    -1,    -1,   799,   800,    -1,   801,    -1,
     800,   801,    -1,   800,   649,   801,    -1,   820,    -1,   821,
      -1,   822,    -1,    -1,   803,    -1,   804,    -1,   803,   804,
      -1,   803,   649,   804,    -1,   820,    -1,   821,    -1,   822,
      -1,   823,    -1,   826,    -1,   828,    -1,   829,    -1,   827,
      -1,    -1,   806,    -1,   807,    -1,   806,   807,    -1,   806,
     649,   807,    -1,   820,    -1,   821,    -1,   822,    -1,   828,
      -1,   829,    -1,    -1,   809,    -1,   810,    -1,   809,   810,
      -1,   809,   649,   810,    -1,   820,    -1,   824,    -1,   825,
      -1,   826,    -1,   828,    -1,   829,    -1,   827,    -1,    -1,
     812,    -1,   813,    -1,   812,   813,    -1,   812,   649,   813,
      -1,   820,    -1,   828,    -1,   829,    -1,   109,  1417,    -1,
     587,  1417,    -1,   426,  1417,    -1,  1420,    -1,  1420,    -1,
     420,    -1,   422,    -1,   357,     4,    -1,   232,  1296,   830,
      -1,    25,  1296,   830,    -1,   314,  1296,   830,    -1,   176,
    1296,   830,    -1,   588,  1296,   830,    -1,   427,  1296,   830,
      -1,   354,  1296,  1241,    -1,    78,  1296,  1417,    -1,  1337,
     157,  1296,   905,    -1,   618,    -1,   360,    -1,  1243,    -1,
    1416,    -1,   647,   832,    -1,   898,   837,   834,    -1,   267,
    1413,    -1,   647,   267,  1413,   648,    -1,   911,   648,   898,
     837,   834,    -1,    -1,   837,   887,   648,   833,  1515,    -1,
      -1,    -1,  1383,   890,   887,   835,  1512,    -1,    -1,  1383,
     890,   647,   887,   648,   836,  1515,    -1,   838,    -1,    -1,
     839,    -1,    -1,   390,   841,   840,   844,    -1,    -1,    -1,
     390,   843,   844,    -1,    47,   845,   855,   856,   863,    -1,
     847,   255,   848,   647,   849,   648,    -1,    -1,   847,   210,
     846,   853,    -1,   418,   853,    -1,   418,   852,    -1,   272,
     853,    -1,   272,   852,    -1,    -1,   269,    -1,    -1,    11,
     159,  1241,    -1,    -1,   850,    -1,   851,    -1,   850,   649,
     851,    -1,  1420,    -1,    74,   647,   849,   648,    -1,   647,
    1117,   861,  1118,   648,    -1,   647,  1117,   861,  1118,   648,
      -1,    -1,   391,  1241,    -1,    -1,    -1,   536,    47,   847,
     210,   854,   857,   862,    -1,    -1,   536,    47,   847,   255,
     848,   647,   859,   648,   858,   862,    -1,   860,    -1,   859,
     649,   860,    -1,  1420,    -1,  1124,    -1,    -1,   535,  1241,
      -1,    -1,   647,   864,   648,    -1,   865,    -1,   864,   649,
     865,    -1,    -1,   390,   866,   867,   868,   884,   879,    -1,
    1420,    -1,    -1,    -1,   609,   264,   556,   869,   871,    -1,
      -1,   609,   243,   870,   872,    -1,   318,    -1,   874,    -1,
     874,    -1,   647,   873,   648,    -1,   874,    -1,   873,   649,
     874,    -1,    -1,    -1,   647,   875,   877,   876,   648,    -1,
     878,    -1,   877,   649,   878,    -1,   318,    -1,  1124,    -1,
      -1,   647,   880,   648,    -1,   881,    -1,   880,   649,   881,
      -1,    -1,   536,   882,   883,   884,    -1,  1422,    -1,    -1,
     885,    -1,   885,   886,    -1,   886,    -1,   545,  1296,  1422,
      -1,  1337,   157,  1296,   905,    -1,   354,  1296,  1241,    -1,
     313,  1296,  1243,    -1,   331,  1296,  1243,    -1,   110,   135,
    1296,  1417,    -1,   229,   135,  1296,  1417,    -1,    78,  1296,
    1417,    -1,    -1,    -1,   473,   888,  1111,  1115,   889,   909,
      -1,    -1,    20,    -1,    -1,   892,    -1,   893,    -1,   892,
     893,    -1,   904,    -1,   903,    -1,    -1,   895,    -1,   896,
      -1,   896,   895,    -1,   551,    -1,    -1,   224,  1127,   170,
      -1,    -1,   900,    -1,   901,    -1,   901,   899,    -1,   901,
      -1,   901,   900,    -1,   901,   649,   900,    -1,   157,  1296,
     905,    -1,   313,  1296,  1242,    -1,   331,  1296,  1242,    -1,
      27,  1296,  1240,    -1,   393,  1296,  1417,    -1,    78,  1296,
    1417,    -1,    26,  1296,  1242,    -1,   385,  1296,  1240,    -1,
     385,  1296,   124,    -1,   520,  1296,  1240,    -1,   520,  1296,
     124,    -1,   521,  1296,  1240,    -1,   521,  1296,   124,    -1,
     522,  1296,  1240,    -1,   522,  1296,   124,    -1,    62,  1296,
    1240,    -1,   549,  1296,  1240,    -1,   128,  1296,  1240,    -1,
     463,  1296,   907,    -1,    -1,   592,  1296,   902,   647,  1360,
     648,    -1,   903,    -1,   904,    -1,   237,  1296,   908,    -1,
     110,   135,  1296,  1417,    -1,   229,   135,  1296,  1417,    -1,
     545,  1420,    -1,   529,   138,    -1,   529,   323,    -1,    86,
    1296,  1417,    -1,   254,  1296,  1240,    -1,   957,   948,  1296,
     950,    -1,   957,    72,  1296,   956,    -1,  1422,    -1,  1422,
      -1,   124,    -1,   184,    -1,   147,    -1,    83,    -1,   428,
      -1,    81,    -1,   567,    -1,   568,    -1,   569,    -1,   570,
      -1,   571,    -1,   572,    -1,   359,    -1,   183,    -1,   258,
      -1,  1235,    -1,  1110,  1114,    -1,   531,    -1,   423,    -1,
     122,    -1,   241,    -1,   912,    -1,   913,    -1,   912,   649,
     913,    -1,   914,    -1,   915,    -1,   920,   916,    -1,   920,
     974,    -1,   980,  1008,   993,   647,  1006,   648,   994,    -1,
     990,   983,  1008,   992,   647,  1006,   648,   995,    -1,   991,
     983,  1008,   992,   647,  1006,   648,   996,    -1,   918,   981,
    1008,   993,   647,  1006,   648,   994,    -1,   918,   189,   255,
    1008,   647,  1006,   648,   974,    -1,   918,   917,    -1,    -1,
     917,    -1,    63,   647,  1121,   648,    -1,    -1,   919,    -1,
      88,  1008,    -1,    -1,  1412,   921,   922,   942,    -1,   930,
     940,   936,    -1,   931,   941,   936,    -1,   186,   932,   936,
      -1,    39,    -1,    39,   939,    -1,    44,    -1,    43,    -1,
     926,   939,   960,    -1,   926,   960,    -1,   927,   939,   961,
      -1,   927,   961,    -1,    34,   939,    -1,    34,    -1,   928,
     939,   960,    -1,   929,   939,   961,    -1,   611,   939,    -1,
     636,   940,   936,    -1,   114,    -1,   562,   934,    -1,   559,
     934,    -1,   111,   934,    -1,   563,    -1,    41,   940,    -1,
     925,    -1,   319,    -1,   280,    -1,   283,   611,    -1,   283,
     928,   960,    -1,   565,   960,    -1,   555,   940,   960,    -1,
     321,   960,    -1,   281,   960,    -1,   122,   932,   936,    -1,
     365,   932,   936,    -1,   184,   932,   936,    -1,    -1,   158,
     923,   647,  1010,   648,   960,    -1,    -1,   481,   924,   647,
    1010,   648,   960,    -1,   283,   960,    -1,   477,    -1,   200,
      -1,   199,    -1,   398,    -1,   339,    -1,   271,    -1,   338,
      -1,   399,    -1,   340,    -1,    61,    -1,   348,    -1,   345,
      61,    -1,   926,   615,    -1,   612,    -1,   345,   612,    -1,
     366,    -1,   348,   612,    -1,   345,    61,   615,    -1,   348,
     615,    -1,   241,    -1,   564,    -1,   493,    -1,   320,    -1,
      33,    -1,   423,    -1,   141,    -1,   141,   402,    -1,    -1,
     939,    -1,   933,    -1,   647,   363,   649,   363,   648,    -1,
      -1,   647,   363,   648,    -1,    -1,   647,   648,    -1,   647,
     363,   648,    -1,    -1,   937,    -1,   937,   938,    -1,   938,
      -1,   489,    -1,   596,    -1,   637,    -1,   647,   282,   648,
      -1,   647,   583,   648,    -1,   647,   121,   648,    -1,   647,
     363,   648,    -1,    -1,   939,    -1,    -1,   933,    -1,    -1,
     943,    -1,   943,   944,    -1,   944,    -1,   362,    -1,  1127,
     362,    -1,   124,   947,    -1,   369,   598,   946,    -1,    26,
      -1,   477,   124,   610,    -1,   973,   255,    -1,   986,    -1,
     986,   255,    -1,    78,  1417,    -1,    72,   954,    -1,    76,
     124,    -1,    76,   184,    -1,    76,   147,    -1,   529,   124,
      -1,   529,   138,    -1,   529,   323,    -1,   922,   955,    -1,
     358,   935,    -1,   946,    -1,  1402,    -1,    61,   481,    -1,
      60,    -1,  1422,    -1,    34,    -1,   949,    -1,   124,    -1,
      -1,   948,   950,    -1,  1422,    -1,    34,    -1,   952,    -1,
     124,    -1,  1422,    -1,    -1,    72,   956,    -1,   954,    -1,
     124,    -1,    -1,   124,    -1,    22,    -1,    34,    22,    -1,
      22,    34,    -1,   590,    -1,   590,    34,    -1,    34,   590,
      -1,    -1,   958,    -1,   959,    -1,    48,    -1,   948,   949,
     961,    -1,    34,    -1,    34,   948,   949,    -1,    -1,    34,
      -1,    -1,   647,  1241,   963,   648,    -1,    21,    -1,   130,
      -1,   456,    -1,    -1,   964,    -1,   964,   965,    -1,   965,
      -1,  1241,    -1,   967,   966,    -1,   968,    -1,   969,   649,
     968,    -1,   967,   640,   967,    -1,   969,    -1,   970,    -1,
      -1,   265,   971,    -1,    -1,   406,    -1,   429,  1413,   975,
     977,   978,    -1,    -1,   647,   976,   648,    -1,   976,   649,
    1420,    -1,  1420,    -1,    -1,   310,   194,    -1,   310,   389,
      -1,   310,   490,    -1,    -1,   369,   598,   979,    -1,   369,
     129,   979,    -1,   369,   598,   979,   369,   129,   979,    -1,
     369,   129,   979,   369,   598,   979,    -1,   451,    -1,    51,
      -1,   481,   362,    -1,   359,     5,    -1,   481,   124,    -1,
     982,    -1,   406,   255,    -1,   986,   983,    -1,   255,    -1,
     229,    -1,    -1,   982,    -1,   253,    -1,   229,    -1,   228,
      -1,    -1,   986,    -1,   989,    -1,   987,    -1,   988,    -1,
     988,   989,    -1,   989,   988,    -1,   593,    -1,    69,    -1,
     195,    -1,   499,    -1,    -1,   992,    -1,   992,  1000,    -1,
      -1,   997,    -1,    -1,   999,    -1,    -1,   998,    -1,  1002,
      -1,   997,  1002,    -1,  1003,    -1,   998,  1003,    -1,  1004,
      -1,   999,  1004,    -1,   605,  1005,    -1,   581,  1005,    -1,
     254,  1296,  1240,    -1,    78,  1417,    -1,  1001,    -1,  1000,
      -1,  1001,    -1,  1001,    -1,   625,   388,  1416,    -1,    46,
      -1,   466,    -1,   210,    -1,  1006,   649,  1007,  1233,    -1,
    1007,  1233,    -1,  1420,    -1,  1420,   647,   363,   648,    -1,
      -1,  1412,    -1,    -1,   655,  1420,    -1,  1400,    -1,  1010,
     649,  1400,    -1,    -1,    13,  1049,   547,  1413,  1012,  1024,
      -1,    -1,    13,   107,  1023,  1013,   892,    -1,    13,   107,
    1420,   599,   110,   135,   344,    -1,    -1,    13,   408,   701,
    1014,   702,    -1,    -1,    13,   196,   701,  1015,   702,    -1,
      -1,    13,  1538,  1533,  1016,  1540,    -1,    -1,    13,  1533,
    1017,  1540,    -1,    -1,    13,  1533,   166,   701,  1018,  1020,
    1021,   691,   696,  1022,    -1,    13,   545,   794,    -1,    13,
     278,   206,   796,    -1,    13,   545,   791,    -1,    13,   545,
     790,    -1,    13,   479,  1422,   374,   647,   685,   648,    -1,
      13,   601,   700,  1019,    -1,  1423,   393,   173,    -1,  1019,
     649,  1423,   393,   173,    -1,    -1,   369,   468,   689,    -1,
     695,    -1,   369,   468,   689,   695,    -1,    -1,   439,   566,
     701,    -1,    -1,   142,   697,    -1,    -1,  1420,    -1,    -1,
     137,   545,    -1,   227,   545,    -1,  1039,   838,    -1,  1039,
    1028,    -1,  1028,    -1,   839,    -1,  1030,    -1,   143,   390,
    1037,    -1,   424,   390,  1075,  1029,    -1,    -1,   373,   390,
    1075,  1029,  1025,  1075,    -1,    15,   390,  1075,  1029,    -1,
      -1,    63,   390,  1029,  1026,  1070,    -1,    -1,   441,   390,
    1075,  1029,  1027,  1062,    -1,    70,   390,  1075,  1241,    -1,
     579,   390,  1029,    -1,  1033,    -1,   168,   390,  1038,   625,
     547,  1413,   841,    -1,   438,   392,   841,    -1,    12,    -1,
    1037,    -1,    -1,     6,   390,  1075,  1031,  1032,    -1,    -1,
     647,   864,   648,    -1,   391,  1241,    -1,    -1,   440,   390,
    1075,  1034,  1035,    -1,    -1,    -1,  1037,  1036,   240,   647,
     864,   648,    -1,  1038,    -1,  1037,   649,  1038,    -1,  1420,
      -1,  1041,    -1,  1039,   649,  1041,    -1,     6,  1048,    -1,
    1040,   914,  1051,    -1,     6,   915,    -1,  1040,   647,   911,
     648,    -1,    -1,    57,  1048,  1412,  1042,   920,  1051,    -1,
      -1,    -1,   335,  1048,  1412,  1043,   922,   942,  1044,  1051,
      -1,   143,  1048,  1412,  1050,    -1,   143,   189,   255,  1412,
      -1,   143,   406,   255,    -1,   143,   982,  1412,    -1,   136,
     253,    -1,   151,   253,    -1,    13,  1048,  1412,   481,   124,
    1402,    -1,    13,  1048,  1412,   143,   124,    -1,   439,  1052,
    1413,    -1,    95,   566,   948,   950,   955,    -1,   899,    -1,
     188,    -1,  1226,    -1,  1046,    -1,  1047,    -1,    -1,  1047,
      -1,  1046,    -1,  1047,  1046,    -1,  1046,  1047,    -1,    11,
    1296,   124,    -1,    11,  1296,  1420,    -1,   277,  1296,   124,
      -1,   277,  1296,  1420,    -1,    -1,    75,    -1,    -1,   225,
      -1,    -1,   451,    -1,    51,    -1,    -1,     8,  1420,    -1,
     183,    -1,    -1,   566,    -1,   159,    -1,    20,    -1,   518,
     574,  1054,    -1,    -1,  1055,    -1,  1056,    -1,  1055,   649,
    1056,    -1,   625,    87,   494,    -1,   625,    87,   494,   193,
     478,  1121,    -1,   421,   371,    -1,   421,   630,    -1,    -1,
      62,  1459,  1058,  1266,  1059,    -1,    -1,   417,    -1,   175,
      -1,    -1,   441,  1075,  1459,  1061,  1266,  1062,    -1,    -1,
    1063,    -1,  1064,    -1,  1064,  1063,    -1,   417,    -1,   175,
      -1,   603,    -1,    -1,    15,  1075,  1459,  1066,  1266,    -1,
      35,  1417,    -1,    -1,    63,  1459,  1069,  1266,  1070,    -1,
      -1,  1071,    -1,  1072,    -1,  1072,  1071,    -1,   417,    -1,
     179,    -1,   322,    -1,   175,    -1,    58,    -1,   190,   599,
      -1,    -1,   373,  1075,  1459,  1074,  1266,    -1,    -1,   361,
      -1,   274,    -1,    -1,   439,  1459,  1077,  1079,    -1,   439,
     601,   700,  1078,    -1,  1423,   566,  1423,    -1,  1078,   649,
    1423,   566,  1423,    -1,  1080,    -1,  1079,   649,  1080,    -1,
    1413,   566,  1413,    -1,    -1,    49,   229,  1082,  1083,   243,
    1087,    -1,  1084,    -1,  1086,    -1,  1085,    -1,  1084,   649,
    1085,    -1,  1413,  1096,    -1,  1413,  1094,  1096,    -1,  1420,
      -1,   124,    -1,    -1,   273,   229,   240,    49,  1089,  1090,
      -1,  1093,    -1,  1091,    -1,  1092,    -1,  1091,   649,  1092,
      -1,  1413,  1096,  1099,    -1,  1413,  1094,  1096,  1099,    -1,
      -1,   390,   841,  1095,   647,  1029,   648,    -1,    -1,  1097,
    1098,    -1,    -1,   982,   647,  1208,   648,    -1,    -1,   225,
     261,    -1,  1101,    -1,   473,  1104,    -1,   647,  1102,   648,
    1515,    -1,   473,  1106,    -1,   647,  1102,   648,    -1,   473,
    1187,    -1,   647,  1103,   648,    -1,    -1,  1106,  1105,  1512,
      -1,    -1,    -1,  1107,  1111,  1115,  1108,  1109,  1114,    -1,
    1229,  1235,    -1,  1254,    -1,  1110,    -1,  1254,  1110,    -1,
    1110,  1254,    -1,   193,  1167,  1218,  1223,  1220,  1229,  1235,
    1246,    -1,   193,   144,  1218,  1235,    -1,    -1,  1112,    -1,
    1112,  1113,    -1,  1113,    -1,  1529,    -1,   511,    -1,   509,
      -1,    -1,   190,   598,    -1,   277,   243,   483,   333,    -1,
    1115,   649,  1116,    -1,  1116,    -1,   642,    -1,  1117,  1407,
    1118,    -1,  1117,  1121,  1118,  1119,    -1,    -1,    -1,    -1,
      20,  1420,    -1,    20,  1417,    -1,  1420,    -1,  1417,    -1,
      -1,   647,   648,    -1,  1121,  1125,  1121,    -1,  1121,   634,
    1121,    -1,  1121,  1126,  1121,    -1,   357,  1121,    -1,  1122,
     248,   578,    -1,  1122,   248,  1127,   578,    -1,  1122,   248,
     178,    -1,  1122,   248,  1127,   178,    -1,  1122,   248,   594,
      -1,  1122,   248,  1127,   594,    -1,  1122,    -1,  1122,   248,
     362,    -1,  1122,   248,  1127,   362,    -1,  1122,   160,  1123,
      -1,  1122,  1129,  1123,    -1,  1122,  1129,  1130,   647,  1524,
     648,    -1,  1123,    -1,  1124,   243,   647,  1524,   648,    -1,
    1124,  1127,   243,   647,  1524,   648,    -1,  1124,   243,   647,
    1121,   648,    -1,  1124,   243,   647,  1121,   649,  1160,   648,
      -1,  1124,  1127,   243,   647,  1121,   648,    -1,  1124,  1127,
     243,   647,  1121,   649,  1160,   648,    -1,  1124,    32,  1124,
      17,  1123,    -1,  1124,  1127,    32,  1124,    17,  1123,    -1,
    1124,   497,   267,  1124,    -1,  1124,   267,  1131,  1222,    -1,
    1124,  1127,   267,  1131,  1222,    -1,  1124,   430,  1124,    -1,
    1124,  1127,   430,  1124,    -1,  1124,    -1,  1124,   638,  1124,
      -1,  1124,   639,  1124,    -1,  1124,   484,  1124,    -1,  1124,
     485,  1124,    -1,  1124,   641,  1124,    -1,  1124,   640,  1124,
      -1,  1124,   641,   239,  1121,  1212,    -1,  1124,   640,   239,
    1121,  1212,    -1,  1124,   642,  1124,    -1,  1124,   643,  1124,
      -1,  1124,   644,  1124,    -1,  1124,   140,  1124,    -1,  1124,
     336,  1124,    -1,  1124,   645,  1124,    -1,  1131,    -1,   380,
      -1,   377,    -1,    17,    -1,    16,    -1,   357,    -1,   356,
      -1,   650,    -1,   356,    -1,   159,    -1,   197,    -1,   208,
      -1,   259,    -1,   286,    -1,   350,    -1,    12,    -1,    18,
      -1,  1409,    -1,  1132,    -1,  1133,    -1,  1136,    -1,  1134,
      -1,  1131,    72,  1422,    -1,  1403,    -1,  1401,    -1,  1148,
      -1,  1144,    -1,  1131,   379,  1131,    -1,   641,  1131,    -1,
     640,  1131,    -1,   646,  1131,    -1,  1128,  1131,    -1,   647,
    1524,   648,    -1,   647,  1121,   648,    -1,   647,  1121,   649,
    1160,   648,    -1,   464,   647,  1121,   649,  1160,   648,    -1,
     170,   647,  1524,   648,    -1,   651,  1420,  1121,   652,    -1,
     310,  1161,     9,   647,  1124,  1138,   648,    -1,    34,  1131,
      -1,    54,   647,  1121,    20,  1158,   648,    -1,    53,  1163,
    1165,  1164,   153,    -1,    95,   647,  1121,   649,  1158,   648,
      -1,    95,   647,  1121,   605,   949,   648,    -1,   124,   647,
    1409,   648,    -1,   609,   647,  1410,   648,    -1,   239,  1121,
    1212,   641,  1121,    -1,    61,   647,  1160,   648,    -1,    61,
     647,  1160,   605,   949,   648,    -1,   103,  1120,    -1,   114,
     647,  1121,   648,    -1,   119,   647,  1121,   648,    -1,   220,
     647,  1121,   648,    -1,   236,   647,  1121,   649,  1121,   649,
    1121,   649,  1121,   648,    -1,   239,   647,  1121,   649,  1121,
     648,    -1,   239,   647,  1121,   649,  1121,   649,  1160,   648,
      -1,   263,   647,  1121,   649,  1121,   648,    -1,   330,   647,
    1121,   648,    -1,   337,   647,  1121,   648,    -1,   458,   647,
    1121,   649,  1121,   648,    -1,   471,   647,  1121,   648,    -1,
     562,   647,  1121,   648,    -1,   559,   647,  1121,   648,    -1,
     559,   647,  1121,   649,  1121,   648,    -1,   577,   647,  1121,
     648,    -1,   577,   647,   260,  1121,   193,  1121,   648,    -1,
     577,   647,   573,  1121,   193,  1121,   648,    -1,   577,   647,
      45,  1121,   193,  1121,   648,    -1,   577,   647,   260,   193,
    1121,   648,    -1,   577,   647,   573,   193,  1121,   648,    -1,
     577,   647,    45,   193,  1121,   648,    -1,   577,   647,  1121,
     193,  1121,   648,    -1,   601,   647,   648,    -1,   636,   647,
    1121,   648,    -1,     7,   647,  1121,   649,  1121,   648,    -1,
       7,   647,  1121,   649,   239,  1121,  1212,   648,    -1,   101,
    1120,    -1,   106,   935,    -1,   112,   647,  1121,   649,   239,
    1121,  1212,   648,    -1,   113,   647,  1121,   649,   239,  1121,
    1212,   648,    -1,   177,   647,  1212,   193,  1121,   648,    -1,
     201,   647,  1214,   649,  1121,   648,    -1,   946,    -1,   401,
     647,  1124,   243,  1121,   648,    -1,   533,   647,  1121,   649,
    1121,   648,    -1,   533,   647,  1121,   649,   239,  1121,  1212,
     648,    -1,   537,   647,  1121,   649,  1121,   649,  1121,   648,
      -1,   537,   647,  1121,   649,  1121,   648,    -1,   537,   647,
    1121,   193,  1121,   190,  1121,   648,    -1,   537,   647,  1121,
     193,  1121,   648,    -1,   543,   935,    -1,   560,   647,  1213,
     649,  1121,   649,  1121,   648,    -1,   561,   647,  1213,   649,
    1121,   649,  1121,   648,    -1,   606,  1120,    -1,   608,   935,
      -1,   607,   935,    -1,    22,   647,  1121,   648,    -1,    60,
     647,  1121,   648,    -1,    70,   647,  1160,   648,    -1,    73,
     647,  1121,   648,    -1,   107,   647,   648,    -1,   224,   647,
    1121,   649,  1121,   649,  1121,   648,    -1,   191,   647,  1121,
     649,  1121,   648,    -1,   191,   647,  1121,   649,  1121,   649,
    1121,   648,    -1,   326,   647,  1121,   648,    -1,   336,   647,
    1121,   649,  1121,   648,    -1,   368,   647,  1121,   648,    -1,
     393,   647,  1121,   648,    -1,   415,   647,  1121,   648,    -1,
     443,   647,  1121,   649,  1121,   648,    -1,   444,   647,  1121,
     649,  1121,   649,  1121,   648,    -1,   456,   647,  1121,   648,
      -1,   465,   647,   648,    -1,   579,   647,  1121,   649,  1121,
     648,    -1,   620,   647,  1121,   648,    -1,   620,   647,  1121,
     649,  1121,   648,    -1,   621,   647,  1121,   972,   648,    -1,
     621,   647,  1121,    20,    61,   962,   972,   648,    -1,   621,
     647,  1121,    20,    34,   962,   648,    -1,   621,   647,  1121,
     649,  1240,   649,  1240,   649,  1240,   648,    -1,  1135,    -1,
      92,   647,  1121,   649,  1121,   648,    -1,   199,   647,  1160,
     648,    -1,   271,   647,  1160,   648,    -1,   338,   647,  1160,
     648,    -1,   339,   647,  1160,   648,    -1,   340,   647,  1160,
     648,    -1,   398,   647,  1121,   649,  1121,   648,    -1,   399,
     647,  1160,   648,    -1,    -1,  1416,   647,  1137,  1141,   648,
      -1,  1420,   655,  1420,   647,  1159,   648,    -1,  1139,  1140,
      -1,   243,    43,   333,    -1,    -1,   243,   346,   257,   333,
      -1,    -1,   625,   416,   172,    -1,    -1,  1142,    -1,  1143,
      -1,  1142,   649,  1143,    -1,  1117,  1121,  1118,  1119,    -1,
      28,   647,  1156,   648,    -1,    28,   647,   139,  1156,   648,
      -1,    37,   647,  1156,   648,    -1,    38,   647,  1156,   648,
      -1,    40,   647,  1156,   648,    -1,    96,   647,  1217,   642,
     648,    -1,    96,   647,  1156,   648,    -1,    -1,    -1,    96,
     647,   139,  1145,  1160,  1146,   648,    -1,   332,   647,  1156,
     648,    -1,   332,   647,   139,  1156,   648,    -1,   315,   647,
    1156,   648,    -1,   315,   647,   139,  1156,   648,    -1,   527,
     647,  1156,   648,    -1,   614,   647,  1156,   648,    -1,   526,
     647,  1156,   648,    -1,   616,   647,  1156,   648,    -1,   538,
     647,  1156,   648,    -1,   538,   647,   139,  1156,   648,    -1,
      -1,   207,   647,  1151,  1147,  1160,  1153,  1152,   648,    -1,
      -1,   654,  1149,  1150,    -1,  1422,   482,  1121,    -1,  1422,
      -1,   654,  1444,  1422,  1009,    -1,    -1,   139,    -1,    -1,
     475,  1400,    -1,    -1,    -1,   378,    47,  1154,  1155,    -1,
    1155,   649,  1408,  1233,    -1,  1408,  1233,    -1,    -1,  1217,
    1157,  1121,    -1,    34,   940,    -1,    61,   940,   960,    -1,
     348,   940,    -1,   489,    -1,   489,   241,    -1,   596,    -1,
     596,   241,    -1,   114,    -1,   562,   934,    -1,   111,   934,
      -1,   122,   932,    -1,    -1,  1160,    -1,  1121,    -1,  1160,
     649,  1121,    -1,  1162,    -1,   647,  1162,   648,    -1,  1409,
      -1,  1162,   649,  1409,    -1,    -1,  1121,    -1,    -1,   149,
    1121,    -1,   622,  1121,   557,  1121,    -1,  1165,   622,  1121,
     557,  1121,    -1,  1181,    -1,  1170,    -1,  1169,    -1,  1166,
      -1,   651,  1420,  1166,   652,    -1,  1168,    -1,  1169,   649,
    1168,    -1,  1166,  1178,  1166,    -1,  1166,   530,  1181,    -1,
      -1,  1166,  1178,  1166,   369,  1171,  1121,    -1,    -1,  1166,
     530,  1181,   369,  1172,  1121,    -1,    -1,  1166,  1178,  1166,
     605,  1173,   647,  1211,   648,    -1,  1166,   346,   252,  1181,
      -1,    -1,  1166,   263,  1197,   252,  1166,   369,  1174,  1121,
      -1,    -1,  1166,   263,  1197,   252,  1181,  1175,   605,   647,
    1211,   648,    -1,  1166,   346,   263,  1197,   252,  1181,    -1,
      -1,  1166,   458,  1197,   252,  1166,   369,  1176,  1121,    -1,
      -1,  1166,   458,  1197,   252,  1181,  1177,   605,   647,  1211,
     648,    -1,  1166,   346,   458,  1197,   252,  1181,    -1,   252,
      -1,   233,   252,    -1,    99,   252,    -1,    -1,  1180,    -1,
     390,   647,  1211,   648,   841,    -1,    -1,  1182,  1413,  1179,
    1216,  1206,    -1,  1196,  1195,  1192,    -1,   647,  1195,  1183,
     648,  1216,    -1,  1190,  1516,    -1,    -1,    -1,  1183,   592,
    1520,  1184,  1521,  1185,  1516,    -1,  1187,    -1,    -1,    -1,
    1188,  1527,  1115,  1189,   909,  1114,    -1,    -1,  1195,  1191,
    1169,    -1,    -1,    -1,  1193,  1111,  1115,  1194,   909,    -1,
      -1,   473,    -1,    -1,   381,    -1,    -1,   190,   252,    -1,
     190,   378,    47,    -1,   190,   206,    47,    -1,   188,    -1,
     225,    -1,    -1,  1199,   982,  1198,  1201,   647,  1210,   648,
      -1,    -1,   604,   982,  1198,  1202,   647,  1208,   648,    -1,
    1200,    -1,  1203,  1200,    -1,    -1,    -1,  1205,  1203,    -1,
      -1,  1207,  1204,    -1,    -1,  1210,    -1,  1420,    -1,   406,
      -1,  1209,    -1,  1210,   649,  1209,    -1,  1420,    -1,  1211,
     649,  1420,    -1,  1213,    -1,   115,    -1,   116,    -1,   117,
      -1,   118,    -1,   217,    -1,   218,    -1,   219,    -1,   328,
      -1,   329,    -1,   470,    -1,   635,    -1,   119,    -1,   620,
      -1,   220,    -1,   330,    -1,   337,    -1,   415,    -1,   471,
      -1,   326,    -1,   636,    -1,   114,    -1,   562,    -1,   559,
      -1,   111,    -1,    -1,    20,    -1,   159,    -1,    -1,  1215,
    1420,    -1,    -1,    12,    -1,    -1,    -1,   623,  1219,  1121,
      -1,    -1,    -1,   211,  1221,  1121,    -1,   164,  1131,    -1,
      -1,    -1,   206,    47,  1224,  1225,    -1,  1224,   649,  1408,
    1233,    -1,  1408,  1233,    -1,    -1,   626,    -1,   627,    -1,
     378,    47,  1227,    -1,  1227,   649,  1228,    -1,  1228,    -1,
    1410,  1233,    -1,    -1,  1230,    -1,    -1,   378,    47,  1231,
    1232,    -1,  1232,   649,  1408,  1233,    -1,  1408,  1233,    -1,
      -1,    21,    -1,   130,    -1,    -1,  1236,    -1,    -1,  1236,
      -1,   268,  1237,    -1,  1238,    -1,  1238,   649,  1238,    -1,
    1238,   367,  1238,    -1,  1420,    -1,  1401,    -1,   583,    -1,
     282,    -1,   363,    -1,    -1,   268,  1238,    -1,   363,    -1,
     213,    -1,   282,    -1,   583,    -1,   121,    -1,   185,    -1,
     363,    -1,   213,    -1,   282,    -1,   583,    -1,  1244,    -1,
     363,    -1,   583,    -1,   282,    -1,   121,    -1,   185,    -1,
     363,    -1,   583,    -1,   282,    -1,  1244,    -1,  1245,    -1,
     121,    -1,   185,    -1,    -1,    -1,   408,    14,  1247,   647,
    1248,   648,    -1,    -1,  1249,    -1,  1249,   649,  1249,    -1,
     363,    -1,    -1,  1251,  1252,    -1,  1252,   649,  1253,    -1,
    1253,    -1,   654,  1422,    -1,  1422,    -1,    -1,   240,  1255,
    1256,    -1,    -1,    -1,   382,  1419,  1257,   951,  1258,  1384,
    1387,    -1,   145,  1419,    -1,  1250,    -1,    -1,   142,  1260,
    1160,    -1,    -1,   143,  1272,  1459,  1271,  1262,  1266,  1050,
      -1,    -1,    -1,   143,   229,  1420,   369,  1413,  1263,  1264,
    1045,    -1,   143,   107,  1271,  1420,    -1,   143,   196,  1271,
    1420,   655,  1420,    -1,   143,   196,  1271,  1420,    -1,   143,
     408,  1271,   701,    -1,   143,   601,   700,  1491,    -1,    -1,
     143,   617,  1271,  1265,  1266,  1050,    -1,   143,   166,  1271,
     701,    -1,   143,   576,  1271,   701,    -1,   143,   545,   817,
    1273,    -1,   143,   278,   206,   818,  1273,    -1,   143,   479,
    1271,  1422,    -1,  1267,    -1,  1266,   649,  1267,    -1,  1413,
      -1,  1413,  1179,    -1,  1270,    -1,  1269,   649,  1270,    -1,
    1414,    -1,    -1,   224,   170,    -1,    -1,   551,    -1,    -1,
    1274,    -1,  1275,    -1,  1274,  1275,    -1,  1273,   649,  1275,
      -1,   828,    -1,   829,    -1,    -1,    -1,   236,  1277,  1282,
    1049,  1284,  1278,  1286,  1302,    -1,    -1,    -1,   444,  1280,
    1283,  1284,  1281,  1286,    -1,    -1,   285,    -1,   127,    -1,
     214,    -1,  1311,    -1,   127,    -1,   240,  1285,    -1,  1285,
      -1,  1268,    -1,  1289,    -1,   647,   648,  1289,    -1,   647,
    1288,   648,  1289,    -1,    -1,   481,  1287,  1293,    -1,  1288,
     649,  1406,    -1,  1406,    -1,   609,  1292,    -1,   610,  1292,
      -1,    -1,   887,  1290,  1512,    -1,    -1,   647,   887,   648,
    1291,  1515,    -1,  1292,   649,  1297,    -1,  1297,    -1,  1293,
     649,  1294,    -1,  1294,    -1,  1410,  1295,  1301,    -1,   159,
      -1,   482,    -1,    -1,  1295,    -1,    -1,   647,  1298,  1299,
     648,    -1,    -1,  1300,    -1,  1300,   649,  1301,    -1,  1301,
      -1,  1121,    -1,   124,    -1,    -1,    -1,   369,   146,  1303,
     255,   598,  1309,    -1,    -1,    -1,   598,  1305,  1311,  1049,
    1167,   481,  1307,  1306,  1218,  1229,  1239,    -1,  1307,   649,
    1308,    -1,  1308,    -1,  1410,  1295,  1301,    -1,  1309,   649,
    1310,    -1,  1310,    -1,  1410,  1295,  1301,    -1,    -1,   285,
      -1,    -1,   129,  1313,  1321,  1314,    -1,    -1,   193,  1413,
    1179,  1315,  1218,  1229,  1239,    -1,    -1,  1318,  1316,   193,
    1167,  1218,    -1,    -1,   193,  1269,  1317,   605,  1167,  1218,
      -1,  1319,    -1,  1318,   649,  1319,    -1,  1420,  1320,    -1,
    1420,   655,  1420,  1320,    -1,    -1,   655,   642,    -1,    -1,
    1322,  1321,    -1,   417,    -1,   285,    -1,   225,    -1,    -1,
     579,  1325,  1324,  1267,    -1,    -1,   547,    -1,    -1,  1327,
      -1,  1328,    -1,  1327,   649,  1328,    -1,    97,    -1,   323,
      -1,    42,   246,    -1,    93,   542,    -1,   386,   180,    -1,
     247,    -1,   541,    -1,   498,    -1,    12,    -1,    -1,   190,
     416,   363,    -1,    -1,   486,  1331,  1332,    -1,   108,  1343,
      -1,  1339,   544,  1338,  1343,    -1,  1339,   575,  1338,  1343,
      -1,   165,  1338,  1343,    -1,   547,   523,  1338,  1343,    -1,
     372,   544,  1338,  1343,    -1,   397,    -1,   157,   906,  1335,
      -1,   157,    12,  1335,    -1,  1339,    74,  1340,  1413,  1338,
    1343,    -1,  1336,   279,    -1,   491,   216,    -1,    -1,    35,
     165,  1341,  1342,  1333,  1234,    -1,    -1,   432,   165,  1341,
    1342,  1334,  1234,    -1,   984,  1340,  1413,  1338,  1218,    -1,
    1337,   156,    -1,   407,    -1,    96,   647,   642,   648,   619,
      -1,    96,   647,   642,   648,   162,    -1,   619,  1234,    -1,
     162,  1234,    -1,   412,    -1,   411,  1326,  1329,  1234,    -1,
    1443,   523,  1343,    -1,  1339,   410,    -1,  1443,   613,  1343,
      -1,   948,  1343,    -1,    73,  1343,    -1,   205,    -1,   205,
     190,  1423,    -1,    98,   107,   897,  1420,    -1,    98,   547,
    1413,    -1,    98,   617,  1413,    -1,   307,   523,    -1,   491,
     523,    -1,   491,   523,   524,    -1,   491,   523,   525,    -1,
      67,  1343,    -1,   602,  1343,    -1,   558,  1343,    -1,   548,
    1343,    -1,   230,  1343,    -1,    98,   408,   701,    -1,    98,
     196,   701,    -1,    98,   576,   701,    -1,   408,   523,  1343,
      -1,   196,   523,  1343,    -1,   408,    71,   701,    -1,   196,
      71,   701,    -1,    98,   166,   701,    -1,   523,    -1,   341,
      -1,   279,    -1,   307,    -1,    34,    -1,    -1,   529,    -1,
      -1,  1340,  1420,    -1,    -1,   194,    -1,   193,    -1,   243,
      -1,    -1,   243,  1417,    -1,    -1,   193,  1242,    -1,    -1,
     267,  1417,    -1,   623,  1121,    -1,    -1,  1348,  1413,  1345,
    1350,    -1,    -1,  1348,  1349,  1346,  1347,    -1,  1100,    -1,
    1276,    -1,  1279,    -1,  1304,    -1,  1312,    -1,   130,    -1,
     131,    -1,    -1,   175,    -1,   391,    -1,   191,   159,  1422,
      -1,    -1,  1400,    -1,  1420,    -1,    -1,   187,  1075,  1352,
    1353,    -1,    -1,    -1,  1459,  1354,  1360,  1355,  1356,    -1,
    1358,    -1,    -1,   625,   421,   277,    -1,    -1,   190,  1357,
     174,    -1,  1358,   649,  1359,    -1,  1359,    -1,   161,   279,
      -1,   157,   279,    -1,   198,   279,    -1,   492,   279,    -1,
      34,   279,    -1,   431,   279,    -1,   416,    49,    -1,   216,
      -1,   407,    -1,   279,    -1,   523,    -1,    67,    -1,   602,
      -1,   558,    -1,   548,    -1,   230,    -1,   132,    -1,   449,
      -1,    59,    -1,    -1,  1266,    -1,    -1,   447,  1362,  1363,
      -1,  1363,   649,  1364,    -1,  1364,    -1,    -1,   491,  1365,
    1366,    -1,   307,    -1,   416,    49,    -1,    59,    -1,    -1,
      12,    -1,    -1,   414,  1368,  1369,    -1,  1336,   279,  1370,
      -1,    59,    30,  1243,    -1,    19,   279,  1371,    -1,   566,
    1417,    -1,    30,  1121,    -1,   566,  1417,    -1,    30,  1121,
      -1,   256,  1373,  1121,    -1,    -1,    86,    -1,   416,    -1,
     604,  1420,    -1,    -1,    -1,    -1,    -1,   273,  1380,  1376,
    1382,  1381,   231,  1419,  1377,  1383,   240,   547,  1413,  1179,
    1378,   951,  1379,  1390,  1384,  1387,  1391,  1393,  1396,    -1,
     110,    -1,   633,    -1,    -1,   274,    -1,    -1,    84,    -1,
     285,    -1,    -1,   444,    -1,   225,    -1,    -1,    74,  1385,
      -1,  1385,  1386,    -1,  1386,    -1,   553,    47,  1400,    -1,
     376,   152,    47,  1400,    -1,   152,    47,  1400,    -1,   163,
      47,  1400,    -1,    -1,   270,  1388,    -1,  1388,  1389,    -1,
    1389,    -1,   553,    47,  1400,    -1,   516,    47,  1400,    -1,
      -1,   462,   222,    47,  1400,    -1,    -1,   225,   363,  1392,
      -1,   270,    -1,   462,    -1,    -1,   647,  1394,   648,    -1,
     647,   648,    -1,  1394,   649,  1395,    -1,  1395,    -1,  1410,
      -1,   654,  1422,    -1,    -1,   481,  1397,    -1,  1397,   649,
    1398,    -1,  1398,    -1,  1410,  1295,  1117,  1301,  1118,    -1,
     554,    -1,   347,    -1,   586,   554,    -1,  1399,  1418,    -1,
    1418,    -1,   213,    -1,    36,    -1,   387,    -1,  1403,    -1,
     641,  1404,    -1,   640,  1404,    -1,  1399,    -1,  1404,    -1,
    1405,    -1,   362,    -1,   178,    -1,   578,    -1,   213,    -1,
      36,    -1,   586,   213,    -1,   586,    36,    -1,   363,    -1,
     282,    -1,   583,    -1,   121,    -1,   185,    -1,   114,   554,
      -1,   562,   554,    -1,   559,   554,    -1,  1410,    -1,  1407,
      -1,  1420,   655,   642,    -1,  1420,   655,  1420,   655,   642,
      -1,  1121,    -1,  1420,    -1,  1411,    -1,  1420,    -1,  1411,
      -1,  1420,   655,  1420,    -1,   655,  1420,   655,  1420,    -1,
    1420,   655,  1420,   655,  1420,    -1,  1420,    -1,  1420,   655,
    1420,   655,  1420,    -1,  1420,   655,  1420,    -1,   655,  1420,
      -1,  1420,    -1,  1420,   655,  1420,    -1,   655,  1420,    -1,
    1420,  1320,    -1,  1420,   655,  1420,  1320,    -1,  1420,    -1,
     221,    -1,   223,    -1,   554,    -1,   554,    -1,   554,    -1,
    1416,    -1,  1424,    -1,  1416,    -1,  1425,    -1,  1420,    -1,
    1417,    -1,   266,    -1,  1422,    -1,  1422,   654,  1422,    -1,
     103,  1120,    -1,  1425,    -1,    22,    -1,    29,    -1,    31,
      -1,    48,    -1,    49,    -1,    60,    -1,    62,    -1,    68,
      -1,    78,    -1,    80,    -1,    92,    -1,   120,    -1,   142,
      -1,   153,    -1,   169,    -1,   187,    -1,   191,    -1,   209,
      -1,   212,    -1,   215,    -1,   238,    -1,   257,    -1,   359,
      -1,   372,    -1,   374,    -1,   384,    -1,   388,    -1,   400,
      -1,   403,    -1,   438,    -1,   441,    -1,   447,    -1,   450,
      -1,   459,    -1,   467,    -1,   472,    -1,   479,    -1,   489,
      -1,   495,    -1,   491,    -1,   496,    -1,   518,    -1,   528,
      -1,   579,    -1,   590,    -1,   591,    -1,   629,    -1,   632,
      -1,   599,    -1,     5,    -1,     7,    -1,     8,    -1,     9,
      -1,    10,    -1,    11,    -1,    14,    -1,    19,    -1,    18,
      -1,    24,    -1,    26,    -1,    25,    -1,    27,    -1,    28,
      -1,    35,    -1,    39,    -1,    42,    -1,    44,    -1,    43,
      -1,    46,    -1,    52,    -1,    55,    -1,    56,    -1,    58,
      -1,    59,    -1,    64,    -1,    67,    -1,    66,    -1,    65,
      -1,    70,    -1,    71,    -1,    73,    -1,    77,    -1,    76,
      -1,    74,    -1,    79,    -1,    81,    -1,    82,    -1,    83,
      -1,    84,    -1,    86,    -1,    87,    -1,    89,    -1,    91,
      -1,    90,    -1,    93,    -1,    97,    -1,   100,    -1,   102,
      -1,   105,    -1,   110,    -1,   109,    -1,   111,    -1,   114,
      -1,   119,    -1,   125,    -1,   126,    -1,   128,    -1,   132,
      -1,   134,    -1,   135,    -1,   136,    -1,   137,    -1,   138,
      -1,   145,    -1,   146,    -1,   147,    -1,   154,    -1,   158,
      -1,   157,    -1,   156,    -1,   161,    -1,   162,    -1,   164,
      -1,   166,    -1,   165,    -1,   167,    -1,   168,    -1,   172,
      -1,   173,    -1,   174,    -1,   175,    -1,   176,    -1,   180,
      -1,   179,    -1,   192,    -1,   151,    -1,   194,    -1,   182,
      -1,   183,    -1,   184,    -1,   198,    -1,   200,    -1,   199,
      -1,   201,    -1,   205,    -1,   203,    -1,   210,    -1,   216,
      -1,   220,    -1,   222,    -1,   230,    -1,   226,    -1,   242,
      -1,   227,    -1,   228,    -1,   232,    -1,   246,    -1,   247,
      -1,   249,    -1,   250,    -1,   237,    -1,   254,    -1,   258,
      -1,   261,    -1,   264,    -1,   265,    -1,   271,    -1,   272,
      -1,   274,    -1,   276,    -1,   278,    -1,   279,    -1,   313,
      -1,   307,    -1,   309,    -1,   291,    -1,   295,    -1,   292,
      -1,   293,    -1,   308,    -1,   294,    -1,   297,    -1,   289,
      -1,   296,    -1,   290,    -1,   305,    -1,   299,    -1,   298,
      -1,   300,    -1,   301,    -1,   302,    -1,   303,    -1,   304,
      -1,   287,    -1,   311,    -1,   312,    -1,   314,    -1,   316,
      -1,   317,    -1,   322,    -1,   323,    -1,   324,    -1,   325,
      -1,   326,    -1,   327,    -1,   330,    -1,   331,    -1,   335,
      -1,   333,    -1,   337,    -1,   338,    -1,   339,    -1,   340,
      -1,   341,    -1,   342,    -1,   344,    -1,   343,    -1,   345,
      -1,   348,    -1,   349,    -1,   353,    -1,   352,    -1,   360,
      -1,   354,    -1,   355,    -1,   364,    -1,   366,    -1,   367,
      -1,   368,    -1,   370,    -1,   371,    -1,   385,    -1,   386,
      -1,   389,    -1,   392,    -1,   391,    -1,   393,    -1,   394,
      -1,   395,    -1,   396,    -1,   397,    -1,   398,    -1,   399,
      -1,   404,    -1,   405,    -1,   407,    -1,   409,    -1,   410,
      -1,   411,    -1,   412,    -1,   413,    -1,   415,    -1,   416,
      -1,   417,    -1,   420,    -1,   424,    -1,   425,    -1,   427,
      -1,   426,    -1,   428,    -1,   431,    -1,   432,    -1,   433,
      -1,   434,    -1,   435,    -1,   437,    -1,   440,    -1,   442,
      -1,   445,    -1,   449,    -1,   452,    -1,   453,    -1,   454,
      -1,   456,    -1,   460,    -1,   461,    -1,   462,    -1,   465,
      -1,   463,    -1,   464,    -1,   466,    -1,   468,    -1,   469,
      -1,   471,    -1,   477,    -1,   476,    -1,   478,    -1,   490,
      -1,   483,    -1,   487,    -1,   492,    -1,   494,    -1,   497,
      -1,   498,    -1,   504,    -1,   505,    -1,   506,    -1,   509,
      -1,   508,    -1,   511,    -1,   514,    -1,   517,    -1,   520,
      -1,   521,    -1,   522,    -1,   519,    -1,   523,    -1,   529,
      -1,   531,    -1,   532,    -1,   533,    -1,   534,    -1,   536,
      -1,   535,    -1,   539,    -1,   540,    -1,   541,    -1,   542,
      -1,   548,    -1,   550,    -1,   544,    -1,   549,    -1,   545,
      -1,   551,    -1,   552,    -1,   555,    -1,   556,    -1,   558,
      -1,   574,    -1,   575,    -1,   559,    -1,   560,    -1,   561,
      -1,   562,    -1,   567,    -1,   568,    -1,   569,    -1,   570,
      -1,   572,    -1,   571,    -1,   580,    -1,   581,    -1,   582,
      -1,   196,    -1,   584,    -1,   585,    -1,   588,    -1,   587,
      -1,   594,    -1,   597,    -1,   601,    -1,   602,    -1,   603,
      -1,   613,    -1,   617,    -1,   610,    -1,   619,    -1,   618,
      -1,   620,    -1,   628,    -1,   621,    -1,   631,    -1,   633,
      -1,   636,    -1,    -1,   481,  1427,  1430,    -1,    -1,   481,
     519,  1428,  1429,   190,   662,    -1,  1445,    -1,  1429,   649,
    1445,    -1,    -1,  1446,  1431,  1436,    -1,    -1,   574,  1432,
    1449,    -1,    -1,  1442,  1433,  1434,    -1,    -1,  1445,  1435,
    1436,    -1,   574,  1449,    -1,    -1,   649,  1437,    -1,    -1,
    1438,  1440,    -1,    -1,  1437,   649,  1439,  1440,    -1,    -1,
    1442,  1441,  1445,    -1,  1446,    -1,   203,    -1,   274,    -1,
     478,    -1,    -1,   203,    -1,   274,    -1,   478,    -1,    -1,
     203,   655,    -1,   274,   655,    -1,   478,   655,    -1,  1448,
    1295,  1455,    -1,    -1,  1448,  1295,  1447,  1455,    -1,   654,
    1422,  1295,  1121,    -1,   654,   654,  1444,  1448,  1295,  1455,
      -1,   948,   953,    -1,   343,  1295,  1121,    -1,   343,   950,
     955,    -1,   393,  1295,  1454,    -1,   393,   190,  1423,  1295,
    1454,    -1,  1420,    -1,  1420,   655,  1420,    -1,   124,   655,
    1420,    -1,  1450,    -1,  1451,    -1,  1450,   649,  1451,    -1,
    1451,   649,  1450,    -1,  1452,    -1,   249,   265,  1453,    -1,
     421,   371,    -1,   421,   630,    -1,   421,   584,    -1,   421,
      79,    -1,   442,   421,    -1,   476,    -1,   554,    -1,   393,
     647,   554,   648,    -1,   368,   647,   554,   648,    -1,  1121,
      -1,   124,    -1,   369,    -1,    12,    -1,    34,    -1,   277,
    1457,    -1,    35,   190,    29,    -1,   544,   190,    29,    -1,
      -1,  1459,  1458,  1460,    -1,   547,    -1,   544,    -1,  1461,
      -1,  1460,   649,  1461,    -1,  1413,  1216,  1462,    -1,   421,
      -1,   630,    -1,   285,   630,    -1,   421,   274,    -1,   595,
    1464,    -1,    35,    -1,  1459,    -1,   209,  1413,   372,  1216,
      -1,   209,  1415,    68,    -1,    -1,   209,  1415,   421,  1466,
    1467,  1218,  1235,    -1,  1468,    -1,  1420,  1469,    -1,   183,
      -1,   353,    -1,   183,    -1,   353,    -1,   405,    -1,   258,
      -1,    -1,  1471,  1470,   647,  1300,   648,    -1,   159,    -1,
     197,    -1,   259,    -1,   208,    -1,   286,    -1,    -1,   457,
     700,  1473,  1474,    -1,  1479,   369,  1478,  1490,   193,  1492,
      -1,  1479,   369,   196,  1490,   193,  1492,    -1,  1479,   369,
     408,  1490,   193,  1492,    -1,    12,  1480,   649,   204,   375,
     193,  1492,    -1,   413,   369,  1423,   193,  1492,    -1,    -1,
     204,   700,  1476,  1477,    -1,  1479,   369,  1478,  1490,   566,
    1492,  1497,  1498,    -1,  1479,   369,   196,  1490,   566,  1492,
    1497,  1498,    -1,  1479,   369,   408,  1490,   566,  1492,  1497,
    1498,    -1,   413,   369,  1423,   566,  1492,  1499,    -1,    -1,
     547,    -1,  1481,    -1,    12,  1480,    -1,    -1,   407,    -1,
    1482,    -1,  1481,   649,  1482,    -1,    -1,   473,  1483,  1494,
      -1,    -1,   236,  1484,  1494,    -1,    -1,   598,  1485,  1494,
      -1,    -1,   429,  1486,  1494,    -1,   129,    -1,   600,    -1,
     229,    -1,    13,    -1,    98,    -1,   143,    -1,   169,    -1,
     437,    -1,   487,    -1,   409,    -1,   182,    -1,   204,   375,
      -1,   486,   108,    -1,   539,    -1,    98,   551,   544,    -1,
     277,   544,    -1,   445,   491,    -1,   445,    66,    -1,    98,
     617,    -1,   486,   617,    -1,    98,   461,    -1,    13,   461,
      -1,    98,   601,    -1,   166,    -1,   576,    -1,    98,   545,
      -1,    -1,    17,    -1,  1489,  1487,  1488,    -1,  1489,    -1,
     534,   554,    -1,   250,   554,    -1,    64,   554,    -1,   642,
      -1,  1420,   655,   642,    -1,   642,   655,   642,    -1,  1413,
      -1,  1423,    -1,  1491,   649,  1423,    -1,  1493,    -1,  1492,
     649,  1493,    -1,  1423,   222,    47,   554,    -1,  1423,   222,
      47,   393,   554,    -1,  1423,   222,   625,  1422,    -1,  1423,
     222,   625,  1422,    20,  1417,    -1,  1423,    -1,    -1,   647,
    1495,   648,    -1,  1495,   649,  1496,    -1,  1496,    -1,  1420,
      -1,    -1,   446,  1488,    -1,   446,   515,    -1,   446,   631,
      -1,   446,   355,    -1,    -1,   625,  1500,    -1,    -1,   625,
     204,   375,    -1,  1500,  1501,    -1,  1501,    -1,   204,   375,
      -1,   312,  1240,    -1,   316,  1240,    -1,   311,  1240,    -1,
     317,  1240,    -1,    -1,    31,  1503,  1504,    -1,    -1,   628,
      -1,    -1,    17,   359,    56,    -1,    17,    56,    -1,    -1,
     436,    -1,   359,   436,    -1,    -1,   467,    -1,    80,  1504,
    1505,  1506,    -1,   459,  1504,  1505,  1506,    -1,   459,  1504,
     566,  1507,  1420,    -1,   467,  1420,    -1,   436,   467,  1420,
      -1,    -1,  1513,    -1,    -1,   592,  1520,  1514,  1101,    -1,
      -1,  1513,    -1,  1517,    -1,    -1,  1517,    -1,    -1,  1518,
    1519,    -1,  1230,  1234,    -1,  1236,    -1,    -1,   139,    -1,
      12,    -1,   473,  1186,    -1,   647,  1103,   648,    -1,  1521,
    1516,    -1,    -1,  1522,   592,  1520,  1523,  1521,  1516,    -1,
    1525,  1522,  1526,    -1,    -1,    -1,    -1,  1528,    -1,  1528,
    1529,    -1,  1529,    -1,   530,    -1,   214,    -1,   139,    -1,
     512,    -1,   507,    -1,   508,    -1,   510,    -1,    12,    -1,
    1535,  1531,    -1,  1534,  1532,    -1,  1536,  1533,  1540,    -1,
    1540,    -1,  1552,    -1,  1563,    -1,  1557,    -1,   687,    -1,
    1540,    -1,  1552,    -1,  1563,    -1,  1557,    -1,  1556,    -1,
     687,    -1,  1534,    -1,  1535,    -1,    -1,   126,   159,  1423,
      -1,  1537,    -1,  1537,  1538,    -1,  1538,    -1,   380,   444,
      -1,    11,   159,   585,    -1,    11,   159,   324,    -1,    11,
     159,   552,    -1,    -1,   513,   472,   126,    -1,   513,   472,
     242,    -1,    -1,  1539,   617,  1413,  1541,  1542,    20,  1544,
      -1,    -1,   647,  1543,   648,    -1,  1420,    -1,  1543,   649,
    1420,    -1,    -1,  1545,  1546,  1551,    -1,    -1,  1549,  1547,
    1512,    -1,   647,  1548,   648,  1515,    -1,  1549,    -1,   647,
    1548,   648,    -1,    -1,   473,  1550,  1106,    -1,    -1,   625,
      63,   375,    -1,   625,    52,    63,   375,    -1,   625,   274,
      63,   375,    -1,    -1,    -1,    -1,   576,  1117,   701,   788,
     789,   369,  1117,  1553,  1413,   190,  1117,  1554,   148,   464,
    1555,   737,    -1,    10,  1117,   196,  1420,   454,   910,   496,
    1417,    -1,  1117,   196,  1420,   454,   910,   496,  1417,    -1,
      -1,    -1,    -1,    -1,    -1,  1117,   196,   701,   647,  1558,
     712,   648,  1559,   454,  1560,   945,  1561,   703,  1562,   737,
      -1,    -1,    -1,    -1,    -1,   408,  1117,   701,  1564,   647,
    1565,   716,   648,  1566,   703,  1567,   737,    -1,   632,  1570,
    1569,  1571,    -1,   632,   153,  1569,  1573,    -1,   632,   403,
    1569,    -1,   632,    80,  1569,  1572,    -1,   632,   459,  1569,
      -1,   632,   425,    -1,  1400,    -1,  1400,   649,  1400,    -1,
    1400,   649,  1400,   649,  1240,    -1,    31,    -1,   518,    -1,
      -1,   252,    -1,   452,    -1,    -1,   370,   394,    -1,    -1,
      -1,   540,  1574,  1575,    -1,    -1,   190,   327,    -1,   238,
     396,  1420,   496,  1417,    -1,   591,   396,  1420,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1898,  1898,  1911,  1910,  1935,  1942,  1944,  1948,  1949,
    1954,  1955,  1956,  1957,  1958,  1959,  1960,  1961,  1962,  1963,
    1964,  1965,  1966,  1967,  1968,  1969,  1970,  1971,  1972,  1973,
    1974,  1975,  1976,  1977,  1978,  1979,  1980,  1981,  1982,  1983,
    1984,  1985,  1986,  1987,  1988,  1989,  1990,  1991,  1992,  1993,
    1994,  1995,  1996,  1997,  1998,  1999,  2000,  2004,  2014,  2015,
    2019,  2039,  2046,  2057,  2056,  2067,  2069,  2073,  2074,  2078,
    2091,  2090,  2110,  2109,  2142,  2147,  2141,  2154,  2159,  2152,
    2166,  2171,  2164,  2177,  2176,  2189,  2188,  2196,  2200,  2204,
    2208,  2215,  2228,  2229,  2233,  2237,  2241,  2245,  2249,  2254,
    2258,  2266,  2265,  2297,  2296,  2303,  2310,  2311,  2317,  2323,
    2333,  2339,  2345,  2347,  2354,  2355,  2359,  2365,  2374,  2375,
    2383,  2383,  2438,  2439,  2440,  2441,  2442,  2443,  2444,  2445,
    2446,  2447,  2448,  2449,  2450,  2455,  2469,  2483,  2502,  2503,
    2507,  2508,  2513,  2515,  2517,  2519,  2521,  2523,  2525,  2531,
    2532,  2533,  2537,  2541,  2549,  2548,  2560,  2562,  2565,  2567,
    2571,  2575,  2582,  2584,  2588,  2589,  2594,  2613,  2643,  2645,
    2649,  2650,  2654,  2683,  2684,  2685,  2686,  2690,  2691,  2695,
    2696,  2701,  2704,  2731,  2730,  2814,  2831,  2830,  2905,  2904,
    2977,  2978,  2983,  2985,  2990,  3013,  3024,  3028,  3050,  3051,
    3055,  3059,  3072,  3078,  3084,  3094,  3114,  3138,  3140,  3139,
    3146,  3147,  3148,  3149,  3150,  3151,  3152,  3153,  3154,  3155,
    3156,  3157,  3158,  3163,  3162,  3173,  3173,  3230,  3229,  3286,
    3286,  3308,  3367,  3417,  3442,  3441,  3467,  3490,  3492,  3493,
    3497,  3515,  3536,  3545,  3581,  3536,  3610,  3612,  3613,  3617,
    3618,  3623,  3634,  3622,  3685,  3684,  3698,  3699,  3703,  3704,
    3709,  3718,  3708,  3767,  3776,  3766,  3820,  3833,  3838,  3837,
    3875,  3876,  3881,  3880,  3914,  3914,  3933,  3932,  3982,  3999,
    4008,  3998,  4062,  4071,  4061,  4111,  4113,  4118,  4120,  4122,
    4139,  4144,  4150,  4157,  4158,  4166,  4172,  4181,  4187,  4193,
    4194,  4198,  4198,  4203,  4204,  4205,  4209,  4210,  4211,  4214,
    4216,  4220,  4221,  4222,  4226,  4227,  4228,  4229,  4230,  4231,
    4232,  4233,  4236,  4238,  4242,  4243,  4244,  4248,  4249,  4250,
    4251,  4252,  4255,  4257,  4261,  4262,  4263,  4267,  4268,  4269,
    4270,  4271,  4272,  4273,  4276,  4278,  4282,  4283,  4284,  4288,
    4289,  4290,  4295,  4303,  4311,  4319,  4331,  4343,  4348,  4353,
    4361,  4369,  4377,  4385,  4393,  4401,  4409,  4422,  4435,  4449,
    4454,  4467,  4468,  4519,  4520,  4523,  4536,  4552,  4557,  4555,
    4562,  4564,  4563,  4567,  4566,  4572,  4609,  4610,  4615,  4614,
    4633,  4639,  4638,  4655,  4659,  4667,  4666,  4669,  4671,  4673,
    4675,  4680,  4681,  4687,  4688,  4705,  4706,  4710,  4711,  4715,
    4734,  4744,  4755,  4764,  4765,  4781,  4783,  4782,  4787,  4785,
    4796,  4797,  4801,  4819,  4835,  4836,  4852,  4867,  4889,  4890,
    4895,  4894,  4918,  4928,  4950,  4949,  4967,  4966,  4986,  5008,
    5012,  5041,  5053,  5054,  5059,  5070,  5058,  5095,  5096,  5100,
    5113,  5134,  5147,  5173,  5174,  5179,  5178,  5215,  5220,  5221,
    5225,  5226,  5230,  5232,  5238,  5240,  5242,  5244,  5246,  5248,
    5258,  5273,  5257,  5287,  5288,  5292,  5293,  5297,  5298,  5302,
    5303,  5307,  5308,  5312,  5313,  5317,  5321,  5322,  5325,  5327,
    5331,  5332,  5336,  5337,  5338,  5342,  5347,  5352,  5357,  5362,
    5367,  5372,  5377,  5392,  5398,  5413,  5418,  5433,  5439,  5457,
    5462,  5467,  5472,  5477,  5483,  5482,  5508,  5509,  5510,  5515,
    5520,  5525,  5527,  5529,  5531,  5537,  5545,  5563,  5580,  5586,
    5592,  5593,  5594,  5595,  5596,  5597,  5598,  5599,  5600,  5601,
    5602,  5603,  5607,  5608,  5609,  5613,  5614,  5618,  5619,  5620,
    5621,  5626,  5633,  5634,  5638,  5639,  5643,  5644,  5651,  5656,
    5662,  5668,  5681,  5700,  5706,  5708,  5712,  5716,  5717,  5721,
    5726,  5725,  5748,  5749,  5750,  5751,  5756,  5760,  5765,  5770,
    5774,  5779,  5784,  5790,  5795,  5801,  5805,  5810,  5815,  5833,
    5835,  5837,  5853,  5855,  5860,  5865,  5877,  5882,  5887,  5892,
    5894,  5896,  5898,  5900,  5902,  5904,  5906,  5909,  5908,  5913,
    5912,  5916,  5918,  5927,  5928,  5929,  5935,  5936,  5937,  5938,
    5939,  5943,  5947,  5948,  5952,  5953,  5957,  5958,  5959,  5960,
    5961,  5965,  5966,  5967,  5968,  5969,  5973,  5978,  5980,  5986,
    5987,  5989,  5994,  6004,  6005,  6009,  6010,  6011,  6019,  6020,
    6024,  6025,  6029,  6030,  6031,  6035,  6036,  6037,  6038,  6041,
    6042,  6046,  6047,  6051,  6052,  6056,  6057,  6061,  6062,  6063,
    6064,  6065,  6066,  6072,  6078,  6087,  6096,  6097,  6110,  6116,
    6122,  6128,  6133,  6138,  6147,  6168,  6176,  6177,  6182,  6183,
    6187,  6195,  6199,  6200,  6204,  6205,  6209,  6218,  6222,  6223,
    6227,  6235,  6236,  6240,  6241,  6245,  6246,  6251,  6252,  6256,
    6263,  6272,  6277,  6285,  6286,  6287,  6288,  6289,  6290,  6295,
    6303,  6304,  6309,  6308,  6321,  6322,  6326,  6329,  6330,  6331,
    6332,  6336,  6344,  6351,  6352,  6356,  6366,  6367,  6371,  6372,
    6375,  6377,  6381,  6393,  6394,  6398,  6405,  6418,  6419,  6421,
    6423,  6429,  6434,  6440,  6446,  6453,  6463,  6464,  6465,  6466,
    6467,  6471,  6475,  6476,  6481,  6482,  6486,  6487,  6491,  6492,
    6493,  6497,  6498,  6502,  6506,  6513,  6517,  6521,  6528,  6532,
    6536,  6540,  6553,  6565,  6566,  6570,  6571,  6575,  6576,  6580,
    6581,  6585,  6586,  6590,  6591,  6595,  6596,  6600,  6601,  6605,
    6607,  6611,  6612,  6616,  6620,  6621,  6628,  6629,  6630,  6634,
    6635,  6639,  6645,  6659,  6660,  6664,  6665,  6669,  6670,  6678,
    6677,  6721,  6720,  6734,  6746,  6745,  6764,  6763,  6782,  6781,
    6800,  6794,  6814,  6813,  6846,  6851,  6856,  6861,  6866,  6873,
    6880,  6885,  6893,  6894,  6895,  6896,  6900,  6901,  6913,  6914,
    6918,  6919,  6922,  6924,  6932,  6940,  6942,  6944,  6945,  6953,
    6954,  6958,  6967,  6965,  6979,  6993,  6992,  7006,  7004,  7018,
    7025,  7036,  7037,  7063,  7070,  7074,  7079,  7078,  7094,  7096,
    7101,  7109,  7108,  7124,  7128,  7127,  7139,  7140,  7144,  7159,
    7160,  7164,  7173,  7177,  7182,  7188,  7187,  7198,  7207,  7197,
    7222,  7231,  7240,  7249,  7258,  7264,  7270,  7279,  7288,  7316,
    7337,  7347,  7351,  7356,  7357,  7360,  7362,  7363,  7364,  7365,
    7368,  7373,  7384,  7389,  7400,  7401,  7405,  7406,  7410,  7411,
    7412,  7416,  7417,  7422,  7430,  7431,  7432,  7433,  7437,  7454,
    7457,  7464,  7468,  7475,  7479,  7485,  7489,  7497,  7496,  7508,
    7509,  7510,  7515,  7514,  7536,  7537,  7541,  7542,  7546,  7547,
    7548,  7553,  7552,  7574,  7583,  7582,  7609,  7610,  7614,  7615,
    7619,  7620,  7621,  7622,  7623,  7624,  7629,  7628,  7650,  7651,
    7652,  7657,  7656,  7662,  7669,  7674,  7682,  7683,  7687,  7699,
    7698,  7711,  7712,  7716,  7717,  7721,  7730,  7739,  7740,  7745,
    7744,  7755,  7756,  7760,  7761,  7765,  7774,  7784,  7783,  7791,
    7791,  7802,  7803,  7808,  7809,  7818,  7827,  7828,  7832,  7837,
    7842,  7847,  7852,  7851,  7871,  7879,  7871,  7886,  7887,  7888,
    7889,  7890,  7894,  7901,  7908,  7910,  7921,  7922,  7926,  7927,
    7955,  7985,  7987,  7993,  8003,  8004,  8005,  8020,  8027,  8052,
    8058,  8064,  8065,  8066,  8067,  8068,  8072,  8073,  8078,  8129,
    8136,  8179,  8185,  8191,  8197,  8203,  8209,  8215,  8221,  8225,
    8231,  8237,  8243,  8249,  8255,  8259,  8265,  8275,  8281,  8289,
    8295,  8305,  8311,  8320,  8330,  8336,  8346,  8352,  8361,  8365,
    8371,  8377,  8383,  8389,  8395,  8401,  8407,  8413,  8419,  8425,
    8431,  8437,  8443,  8449,  8453,  8454,  8458,  8459,  8463,  8464,
    8468,  8469,  8473,  8474,  8475,  8476,  8477,  8478,  8482,  8483,
    8487,  8488,  8489,  8490,  8491,  8492,  8504,  8505,  8506,  8507,
    8508,  8514,  8518,  8524,  8530,  8536,  8542,  8544,  8551,  8558,
    8564,  8605,  8614,  8621,  8629,  8635,  8642,  8648,  8662,  8669,
    8685,  8691,  8697,  8705,  8711,  8717,  8723,  8729,  8744,  8756,
    8762,  8768,  8774,  8780,  8786,  8792,  8798,  8804,  8810,  8816,
    8822,  8828,  8834,  8840,  8846,  8852,  8860,  8881,  8888,  8894,
    8901,  8908,  8915,  8922,  8928,  8934,  8939,  8945,  8952,  8958,
    8964,  8970,  8976,  8982,  9000,  9006,  9012,  9019,  9026,  9041,
    9047,  9053,  9059,  9065,  9072,  9078,  9084,  9090,  9096,  9102,
    9110,  9123,  9129,  9135,  9141,  9147,  9155,  9161,  9173,  9179,
    9185,  9193,  9203,  9209,  9225,  9231,  9238,  9245,  9252,  9259,
    9266,  9270,  9290,  9289,  9331,  9371,  9373,  9378,  9379,  9383,
    9384,  9388,  9389,  9393,  9400,  9408,  9434,  9440,  9446,  9452,
    9458,  9464,  9473,  9480,  9482,  9479,  9489,  9500,  9506,  9512,
    9518,  9524,  9530,  9536,  9542,  9548,  9555,  9554,  9574,  9573,
    9588,  9599,  9607,  9621,  9622,  9627,  9632,  9635,  9638,  9637,
    9654,  9656,  9662,  9661,  9678,  9680,  9682,  9684,  9686,  9688,
    9690,  9692,  9694,  9696,  9698,  9703,  9704,  9708,  9715,  9723,
    9724,  9728,  9735,  9743,  9744,  9748,  9749,  9753,  9761,  9772,
    9773,  9782,  9793,  9794,  9800,  9801,  9821,  9823,  9827,  9825,
    9842,  9840,  9858,  9856,  9863,  9872,  9870,  9888,  9887,  9897,
    9908,  9906,  9925,  9924,  9935,  9946,  9947,  9948,  9956,  9957,
    9961,  9976,  9976,  9989, 10029, 10101, 10112, 10117, 10109, 10136,
   10156, 10164, 10156, 10173, 10172, 10195, 10212, 10195, 10219, 10223,
   10249, 10250, 10255, 10258, 10259, 10260, 10264, 10265, 10270, 10269,
   10275, 10274, 10282, 10283, 10286, 10288, 10288, 10292, 10292, 10297,
   10298, 10302, 10304, 10309, 10310, 10314, 10325, 10338, 10339, 10340,
   10341, 10342, 10343, 10344, 10345, 10346, 10347, 10348, 10349, 10353,
   10354, 10355, 10356, 10357, 10358, 10359, 10360, 10361, 10365, 10366,
   10367, 10368, 10371, 10373, 10374, 10378, 10379, 10387, 10389, 10393,
   10395, 10394, 10408, 10411, 10410, 10425, 10431, 10446, 10448, 10452,
   10454, 10459, 10460, 10480, 10511, 10515, 10516, 10520, 10533, 10535,
   10540, 10539, 10574, 10576, 10581, 10582, 10583, 10588, 10594, 10598,
   10599, 10603, 10614, 10621, 10628, 10638, 10665, 10669, 10675, 10681,
   10691, 10695, 10709, 10710, 10711, 10712, 10713, 10714, 10718, 10719,
   10720, 10721, 10722, 10726, 10727, 10728, 10729, 10730, 10734, 10735,
   10736, 10737, 10741, 10746, 10747, 10750, 10753, 10752, 10786, 10787,
   10791, 10799, 10812, 10812, 10822, 10823, 10827, 10846, 10886, 10885,
   10898, 10906, 10897, 10908, 10920, 10932, 10931, 10949, 10948, 10957,
   10958, 10957, 10972, 10979, 11000, 11021, 11033, 11038, 11037, 11045,
   11051, 11058, 11063, 11068, 11078, 11079, 11083, 11092, 11103, 11104,
   11108, 11117, 11118, 11122, 11123, 11126, 11128, 11131, 11132, 11133,
   11137, 11138, 11146, 11154, 11145, 11164, 11171, 11163, 11181, 11193,
   11194, 11207, 11211, 11212, 11228, 11229, 11233, 11242, 11243, 11244,
   11246, 11245, 11256, 11257, 11261, 11262, 11264, 11263, 11267, 11266,
   11272, 11273, 11277, 11278, 11282, 11292, 11293, 11297, 11298, 11303,
   11302, 11316, 11317, 11321, 11326, 11334, 11335, 11343, 11345, 11345,
   11353, 11361, 11352, 11383, 11384, 11388, 11396, 11397, 11401, 11411,
   11412, 11419, 11418, 11432, 11431, 11441, 11440, 11450, 11449, 11461,
   11462, 11466, 11477, 11491, 11492, 11496, 11497, 11501, 11502, 11503,
   11508, 11507, 11527, 11529, 11532, 11534, 11537, 11538, 11541, 11545,
   11549, 11553, 11557, 11561, 11565, 11569, 11573, 11581, 11584, 11594,
   11593, 11608, 11613, 11619, 11625, 11631, 11637, 11643, 11648, 11650,
   11652, 11659, 11663, 11668, 11667, 11673, 11672, 11677, 11684, 11689,
   11694, 11696, 11698, 11700, 11702, 11710, 11719, 11725, 11727, 11733,
   11738, 11743, 11753, 11760, 11766, 11775, 11783, 11787, 11792, 11797,
   11801, 11806, 11811, 11816, 11821, 11826, 11833, 11840, 11846, 11851,
   11856, 11861, 11866, 11874, 11876, 11878, 11883, 11884, 11887, 11889,
   11893, 11894, 11898, 11899, 11903, 11904, 11908, 11909, 11913, 11914,
   11917, 11919, 11926, 11937, 11936, 11950, 11949, 11956, 11957, 11958,
   11959, 11960, 11964, 11965, 11970, 11974, 11980, 11986, 12008, 12009,
   12010, 12025, 12024, 12037, 12041, 12036, 12043, 12047, 12048, 12060,
   12059, 12081, 12082, 12087, 12089, 12091, 12093, 12095, 12097, 12099,
   12101, 12103, 12105, 12107, 12109, 12111, 12113, 12115, 12117, 12119,
   12121, 12123, 12128, 12129, 12134, 12133, 12143, 12144, 12148, 12148,
   12150, 12151, 12152, 12157, 12158, 12163, 12162, 12173, 12174, 12181,
   12185, 12189, 12199, 12204, 12216, 12226, 12227, 12228, 12234, 12246,
   12258, 12268, 12278, 12245, 12286, 12287, 12291, 12292, 12296, 12297,
   12309, 12313, 12314, 12315, 12318, 12320, 12324, 12325, 12329, 12334,
   12341, 12346, 12353, 12355, 12359, 12360, 12364, 12369, 12377, 12378,
   12381, 12383, 12391, 12393, 12397, 12398, 12399, 12403, 12405, 12410,
   12411, 12420, 12421, 12425, 12426, 12430, 12450, 12474, 12486, 12497,
   12516, 12524, 12536, 12551, 12572, 12573, 12574, 12583, 12584, 12585,
   12586, 12593, 12599, 12605, 12611, 12617, 12646, 12677, 12687, 12697,
   12703, 12712, 12724, 12730, 12736, 12752, 12753, 12757, 12766, 12782,
   12786, 12837, 12841, 12859, 12863, 12943, 12968, 12999, 13000, 13016,
   13026, 13030, 13036, 13042, 13052, 13058, 13067, 13077, 13078, 13121,
   13137, 13153, 13170, 13171, 13182, 13183, 13194, 13195, 13196, 13200,
   13227, 13260, 13275, 13276, 13277, 13278, 13279, 13280, 13281, 13282,
   13283, 13284, 13285, 13286, 13287, 13288, 13289, 13290, 13291, 13292,
   13293, 13294, 13295, 13296, 13297, 13298, 13299, 13300, 13301, 13302,
   13303, 13304, 13305, 13306, 13307, 13308, 13309, 13310, 13311, 13312,
   13313, 13314, 13315, 13316, 13317, 13318, 13319, 13320, 13321, 13322,
   13323, 13324, 13334, 13335, 13336, 13337, 13338, 13339, 13340, 13341,
   13342, 13343, 13344, 13345, 13346, 13347, 13348, 13349, 13350, 13351,
   13352, 13353, 13354, 13355, 13356, 13357, 13358, 13359, 13360, 13361,
   13362, 13363, 13364, 13365, 13366, 13367, 13368, 13369, 13370, 13371,
   13372, 13373, 13374, 13375, 13376, 13377, 13378, 13379, 13380, 13381,
   13386, 13387, 13388, 13389, 13390, 13391, 13392, 13393, 13394, 13395,
   13396, 13397, 13398, 13399, 13400, 13401, 13402, 13403, 13404, 13405,
   13406, 13407, 13408, 13409, 13410, 13411, 13412, 13413, 13414, 13415,
   13416, 13417, 13418, 13419, 13420, 13421, 13422, 13423, 13424, 13425,
   13426, 13427, 13428, 13429, 13430, 13431, 13432, 13433, 13434, 13435,
   13436, 13437, 13438, 13439, 13440, 13441, 13442, 13443, 13444, 13445,
   13446, 13447, 13448, 13449, 13450, 13451, 13452, 13453, 13454, 13455,
   13456, 13457, 13458, 13459, 13460, 13461, 13462, 13463, 13464, 13465,
   13466, 13467, 13468, 13469, 13470, 13471, 13472, 13473, 13474, 13475,
   13476, 13477, 13478, 13479, 13480, 13481, 13482, 13483, 13484, 13485,
   13486, 13487, 13488, 13489, 13490, 13491, 13492, 13493, 13494, 13495,
   13496, 13497, 13498, 13499, 13500, 13501, 13502, 13503, 13504, 13505,
   13506, 13507, 13508, 13509, 13510, 13511, 13512, 13513, 13514, 13515,
   13516, 13517, 13518, 13519, 13520, 13521, 13522, 13523, 13524, 13525,
   13526, 13527, 13528, 13529, 13530, 13531, 13532, 13533, 13534, 13535,
   13536, 13537, 13538, 13539, 13540, 13541, 13542, 13543, 13544, 13545,
   13546, 13547, 13548, 13549, 13550, 13551, 13552, 13553, 13554, 13555,
   13556, 13557, 13558, 13559, 13560, 13561, 13562, 13563, 13564, 13565,
   13566, 13567, 13568, 13569, 13570, 13571, 13572, 13573, 13574, 13575,
   13576, 13577, 13578, 13579, 13580, 13581, 13582, 13583, 13584, 13585,
   13586, 13587, 13588, 13589, 13590, 13591, 13592, 13593, 13594, 13595,
   13596, 13597, 13598, 13599, 13600, 13601, 13602, 13603, 13604, 13605,
   13606, 13607, 13608, 13609, 13610, 13611, 13612, 13613, 13614, 13615,
   13616, 13617, 13618, 13619, 13620, 13621, 13622, 13623, 13624, 13625,
   13626, 13627, 13628, 13629, 13630, 13631, 13632, 13633, 13634, 13635,
   13636, 13637, 13638, 13639, 13640, 13641, 13642, 13643, 13644, 13645,
   13646, 13647, 13648, 13649, 13650, 13651, 13652, 13664, 13663, 13678,
   13677, 13705, 13706, 13711, 13710, 13717, 13716, 13726, 13725, 13736,
   13735, 13741, 13749, 13751, 13756, 13756, 13765, 13764, 13778, 13777,
   13782, 13786, 13787, 13788, 13792, 13793, 13794, 13795, 13799, 13800,
   13801, 13802, 13807, 13817, 13816, 13912, 13923, 13926, 13942, 13955,
   13977, 14012, 14054, 14082, 14128, 14142, 14143, 14144, 14145, 14149,
   14167, 14185, 14186, 14190, 14191, 14192, 14193, 14197, 14198, 14216,
   14230, 14231, 14232, 14238, 14244, 14255, 14266, 14270, 14275, 14274,
   14283, 14284, 14288, 14289, 14293, 14303, 14304, 14305, 14310, 14314,
   14325, 14329, 14340, 14356, 14373, 14372, 14411, 14412, 14416, 14417,
   14421, 14422, 14423, 14424, 14426, 14425, 14439, 14440, 14441, 14442,
   14443, 14449, 14449, 14454, 14459, 14469, 14479, 14483, 14492, 14492,
   14497, 14503, 14514, 14525, 14533, 14535, 14539, 14546, 14553, 14555,
   14559, 14560, 14565, 14564, 14568, 14567, 14571, 14570, 14574, 14573,
   14576, 14577, 14578, 14579, 14580, 14581, 14582, 14583, 14584, 14585,
   14586, 14587, 14588, 14589, 14590, 14591, 14592, 14593, 14594, 14595,
   14596, 14597, 14598, 14599, 14600, 14601, 14605, 14606, 14610, 14611,
   14615, 14625, 14635, 14648, 14663, 14676, 14689, 14701, 14706, 14714,
   14719, 14727, 14744, 14758, 14770, 14783, 14792, 14796, 14800, 14801,
   14805, 14832, 14834, 14838, 14842, 14846, 14853, 14854, 14858, 14859,
   14863, 14864, 14868, 14869, 14875, 14881, 14887, 14897, 14896, 14906,
   14907, 14912, 14913, 14914, 14919, 14920, 14921, 14925, 14926, 14930,
   14942, 14951, 14961, 14970, 14984, 14985, 14990, 14989, 15005, 15006,
   15007, 15011, 15012, 15016, 15016, 15040, 15041, 15045, 15046, 15047,
   15051, 15055, 15062, 15065, 15063, 15079, 15086, 15107, 15124, 15126,
   15130, 15131, 15135, 15136, 15142, 15143, 15144, 15145, 15151, 15157,
   15167, 15169, 15171, 15176, 15177, 15178, 15179, 15180, 15184, 15185,
   15186, 15187, 15188, 15189, 15199, 15200, 15205, 15218, 15231, 15233,
   15235, 15240, 15245, 15247, 15249, 15255, 15256, 15258, 15264, 15263,
   15279, 15280, 15284, 15289, 15297, 15297, 15323, 15322, 15339, 15343,
   15348, 15353, 15352, 15364, 15365, 15367, 15369, 15387, 15393, 15398,
   15380, 15459, 15477, 15502, 15534, 15539, 15547, 15570, 15498, 15636,
   15656, 15669, 15679, 15635, 15700, 15704, 15708, 15712, 15716, 15720,
   15727, 15734, 15741, 15751, 15752, 15756, 15757, 15758, 15762, 15763,
   15768, 15770, 15769, 15775, 15776, 15780, 15790
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADDDATE_SYM", "AFTER_SYM", "AGAINST", "AGGREGATE_SYM",
  "ALGORITHM_SYM", "ALL", "ALTER", "ANALYSE_SYM", "ANALYZE_SYM",
  "AND_AND_SYM", "AND_SYM", "ANY_SYM", "ARCHIVED_SYM", "AS", "ASC",
  "ASCII_SYM", "ASENSITIVE_SYM", "AT_SYM", "AUTOEXTEND_SIZE_SYM",
  "AUTO_INC", "AVG_ROW_LENGTH", "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM",
  "BEGIN_SYM", "BETWEEN_SYM", "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM",
  "BIT_AND", "BIT_OR", "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM",
  "BOOLEAN_SYM", "BOOL_SYM", "BOTH", "BTREE_SYM", "BY", "BYTE_SYM",
  "CACHE_SYM", "CALL_SYM", "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM",
  "CATALOG_NAME_SYM", "CHAIN_SYM", "CHANGE", "CHANGED",
  "CHANGED_PAGE_BITMAPS_SYM", "CHARSET", "CHAR_SYM", "CHECKSUM_SYM",
  "CHECK_SYM", "CIPHER_SYM", "CLASS_ORIGIN_SYM", "CLIENT_SYM",
  "CLIENT_STATS_SYM", "CLOSE_SYM", "CLUSTERING_SYM", "COALESCE",
  "CODE_SYM", "COLLATE_SYM", "COLLATION_SYM", "COLUMNS", "COLUMN_SYM",
  "COLUMN_FORMAT_SYM", "COLUMN_NAME_SYM", "COMMENT_SYM", "COMMITTED_SYM",
  "COMMIT_SYM", "COMPACT_SYM", "COMPLETION_SYM", "COMPRESSED_SYM",
  "CONCURRENT", "CONDITION_SYM", "CONNECTION_SYM", "CONSISTENT_SYM",
  "CONSTRAINT", "CONSTRAINT_CATALOG_SYM", "CONSTRAINT_NAME_SYM",
  "CONSTRAINT_SCHEMA_SYM", "CONTAINS_SYM", "CONTEXT_SYM", "CONTINUE_SYM",
  "CONVERT_SYM", "COUNT_SYM", "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM",
  "CURDATE", "CURRENT_SYM", "CURRENT_USER", "CURSOR_SYM",
  "CURSOR_NAME_SYM", "CURTIME", "DATABASE", "DATABASES", "DATAFILE_SYM",
  "DATA_SYM", "DATETIME", "DATE_ADD_INTERVAL", "DATE_SUB_INTERVAL",
  "DATE_SYM", "DAY_HOUR_SYM", "DAY_MICROSECOND_SYM", "DAY_MINUTE_SYM",
  "DAY_SECOND_SYM", "DAY_SYM", "DEALLOCATE_SYM", "DECIMAL_NUM",
  "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT", "DEFAULT_AUTH_SYM",
  "DEFINER_SYM", "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DELETE_SYM",
  "DESC", "DESCRIBE", "DES_KEY_FILE", "DETERMINISTIC_SYM",
  "DIAGNOSTICS_SYM", "DIRECTORY_SYM", "DISABLE_SYM", "DISCARD", "DISK_SYM",
  "DISTINCT", "DIV_SYM", "DOUBLE_SYM", "DO_SYM", "DROP", "DUAL_SYM",
  "DUMPFILE", "DUPLICATE_SYM", "DYNAMIC_SYM", "EACH_SYM", "ELSE",
  "ELSEIF_SYM", "ENABLE_SYM", "ENCLOSED", "END", "ENDS_SYM",
  "END_OF_INPUT", "ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQ", "EQUAL_SYM",
  "ERROR_SYM", "ERRORS", "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM",
  "EVENT_SYM", "EVERY_SYM", "EXCHANGE_SYM", "EXECUTE_SYM", "EXISTS",
  "EXIT_SYM", "EXPANSION_SYM", "EXPIRE_SYM", "EXPORT_SYM", "EXTENDED_SYM",
  "EXTENT_SIZE_SYM", "EXTRACT_SYM", "FALSE_SYM", "FAST_SYM", "FAULTS_SYM",
  "FETCH_SYM", "FILE_SYM", "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM",
  "FLOAT_SYM", "FLUSH_SYM", "FORCE_SYM", "FOREIGN", "FOR_SYM",
  "FORMAT_SYM", "FOUND_SYM", "FROM", "FULL", "FULLTEXT_SYM",
  "FUNCTION_SYM", "GE", "GENERAL", "GEOMETRYCOLLECTION", "GEOMETRY_SYM",
  "GET_FORMAT", "GET_SYM", "GLOBAL_SYM", "GRANT", "GRANTS", "GROUP_SYM",
  "GROUP_CONCAT_SYM", "GT_SYM", "HANDLER_SYM", "HASH_SYM", "HAVING",
  "HELP_SYM", "HEX_NUM", "HIGH_PRIORITY", "HOST_SYM", "HOSTS_SYM",
  "HOUR_MICROSECOND_SYM", "HOUR_MINUTE_SYM", "HOUR_SECOND_SYM", "HOUR_SYM",
  "IDENT", "IDENTIFIED_SYM", "IDENT_QUOTED", "IF", "IGNORE_SYM",
  "IGNORE_SERVER_IDS_SYM", "IMPORT", "INDEXES", "INDEX_SYM",
  "INDEX_STATS_SYM", "INFILE", "INITIAL_SIZE_SYM", "INNER_SYM",
  "INOUT_SYM", "INSENSITIVE_SYM", "INSERT", "INSERT_METHOD", "INSTALL_SYM",
  "INTERVAL_SYM", "INTO", "INT_SYM", "INVOKER_SYM", "IN_SYM",
  "IO_AFTER_GTIDS", "IO_BEFORE_GTIDS", "IO_SYM", "IPC_SYM", "IS",
  "ISOLATION", "ISSUER_SYM", "ITERATE_SYM", "JOIN_SYM", "KEYS",
  "KEY_BLOCK_SIZE", "KEY_SYM", "KILL_SYM", "LANGUAGE_SYM", "LAST_SYM",
  "LE", "LEADING", "LEAVES", "LEAVE_SYM", "LEFT", "LESS_SYM", "LEVEL_SYM",
  "LEX_HOSTNAME", "LIKE", "LIMIT", "LINEAR_SYM", "LINES", "LINESTRING",
  "LIST_SYM", "LOAD", "LOCAL_SYM", "LOCATOR_SYM", "LOCKS_SYM", "LOCK_SYM",
  "LOGFILE_SYM", "LOGS_SYM", "LONGBLOB", "LONGTEXT", "LONG_NUM",
  "LONG_SYM", "LOOP_SYM", "LOW_PRIORITY", "LT", "MASTER_AUTO_POSITION_SYM",
  "MASTER_BIND_SYM", "MASTER_CONNECT_RETRY_SYM", "MASTER_DELAY_SYM",
  "MASTER_HOST_SYM", "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM",
  "MASTER_PASSWORD_SYM", "MASTER_PORT_SYM", "MASTER_RETRY_COUNT_SYM",
  "MASTER_SERVER_ID_SYM", "MASTER_SSL_CAPATH_SYM", "MASTER_SSL_CA_SYM",
  "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM", "MASTER_SSL_CRL_SYM",
  "MASTER_SSL_CRLPATH_SYM", "MASTER_SSL_KEY_SYM", "MASTER_SSL_SYM",
  "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM", "MASTER_USER_SYM",
  "MASTER_HEARTBEAT_PERIOD_SYM", "MATCH", "MAX_CONNECTIONS_PER_HOUR",
  "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE_SYM", "MAX_SYM",
  "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM",
  "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM",
  "MERGE_SYM", "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS",
  "MIN_SYM", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM",
  "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
  "MUTEX_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM", "NAME_SYM", "NATIONAL_SYM",
  "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM", "NE", "NEG",
  "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM",
  "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG",
  "NULL_SYM", "NUM", "NUMBER_SYM", "NUMERIC_SYM", "NVARCHAR_SYM",
  "OFFSET_SYM", "OLD_PASSWORD", "ON", "ONE_SYM", "ONLY_SYM", "OPEN_SYM",
  "OPTIMIZE", "OPTIONS_SYM", "OPTION", "OPTIONALLY", "OR2_SYM",
  "ORDER_SYM", "OR_OR_SYM", "OR_SYM", "OUTER", "OUTFILE", "OUT_SYM",
  "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM", "PARAM_MARKER", "PARSER_SYM",
  "PARTIAL", "PARTITION_SYM", "PARTITIONS_SYM", "PARTITIONING_SYM",
  "PASSWORD", "PHASE_SYM", "PLUGIN_DIR_SYM", "PLUGIN_SYM", "PLUGINS_SYM",
  "POINT_SYM", "POLYGON", "PORT_SYM", "POSITION_SYM", "PRECISION",
  "PREPARE_SYM", "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES",
  "PROCEDURE_SYM", "PROCESS", "PROCESSLIST_SYM", "PROFILE_SYM",
  "PROFILES_SYM", "PROXY_SYM", "PURGE", "QUARTER_SYM", "QUERY_SYM",
  "QUICK", "RANGE_SYM", "READS_SYM", "READ_ONLY_SYM", "READ_SYM",
  "READ_WRITE_SYM", "REAL", "REBUILD_SYM", "RECOVER_SYM", "REDOFILE_SYM",
  "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM", "REFERENCES", "REGEXP", "RELAY",
  "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM", "RELAY_LOG_POS_SYM",
  "RELAY_THREAD", "RELEASE_SYM", "RELOAD", "REMOVE_SYM", "RENAME",
  "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM", "REPEAT_SYM", "REPLACE",
  "REPLICATION", "REQUIRE_SYM", "RESET_SYM", "RESIGNAL_SYM", "RESOURCES",
  "RESTORE_SYM", "RESTRICT", "RESUME_SYM", "RETURNED_SQLSTATE_SYM",
  "RETURNS_SYM", "RETURN_SYM", "REVERSE_SYM", "REVOKE", "RIGHT",
  "ROLLBACK_SYM", "ROLLUP_SYM", "ROUTINE_SYM", "ROWS_SYM",
  "ROW_FORMAT_SYM", "ROW_SYM", "ROW_COUNT_SYM", "RTREE_SYM",
  "SAVEPOINT_SYM", "SCHEDULE_SYM", "SCHEMA_NAME_SYM",
  "SECOND_MICROSECOND_SYM", "SECOND_SYM", "SECURITY_SYM", "SELECT_SYM",
  "SENSITIVE_SYM", "SEPARATOR_SYM", "SERIALIZABLE_SYM", "SERIAL_SYM",
  "SESSION_SYM", "SERVER_SYM", "SERVER_OPTIONS", "SET", "SET_VAR",
  "SHARE_SYM", "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN",
  "SIGNAL_SYM", "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SLOW", "SMALLINT",
  "SNAPSHOT_SYM", "SOCKET_SYM", "SONAME_SYM", "SOUNDS_SYM", "SOURCE_SYM",
  "SPATIAL_SYM", "SPECIFIC_SYM", "SQLEXCEPTION_SYM", "SQLSTATE_SYM",
  "SQLWARNING_SYM", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS",
  "SQL_BEFORE_GTIDS", "SQL_BIG_RESULT", "SQL_BUFFER_RESULT",
  "SQL_CACHE_SYM", "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM",
  "SQL_SMALL_RESULT", "SQL_SYM", "SQL_THREAD", "SSL_SYM", "STARTING",
  "STARTS_SYM", "START_SYM", "STATEMENT_SYM", "STATS_AUTO_RECALC_SYM",
  "STATS_PERSISTENT_SYM", "STATS_SAMPLE_PAGES_SYM", "STATUS_SYM",
  "NOLOCK_SYM", "NONBLOCKING_SYM", "STDDEV_SAMP_SYM", "STD_SYM",
  "STOP_SYM", "STORAGE_SYM", "STRAIGHT_JOIN", "STRING_SYM",
  "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM", "SUBJECT_SYM", "SUBPARTITIONS_SYM",
  "SUBPARTITION_SYM", "SUBSTRING", "SUM_SYM", "SUPER_SYM", "SUSPEND_SYM",
  "SWAPS_SYM", "SWITCHES_SYM", "SYSDATE", "TABLES", "TABLESPACE",
  "TABLE_REF_PRIORITY", "TABLE_SYM", "TABLE_STATS_SYM",
  "TABLE_CHECKSUM_SYM", "TABLE_NAME_SYM", "TEMPORARY", "TEMPTABLE_SYM",
  "TERMINATED", "TEXT_STRING", "TEXT_SYM", "THAN_SYM", "THEN_SYM",
  "THREAD_STATS_SYM", "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF",
  "TIME_SYM", "TINYBLOB", "TINYINT", "TINYTEXT", "TO_SYM",
  "TOKU_UNCOMPRESSED_SYM", "TOKU_ZLIB_SYM", "TOKU_QUICKLZ_SYM",
  "TOKU_LZMA_SYM", "TOKU_FAST_SYM", "TOKU_SMALL_SYM", "TRAILING",
  "TRANSACTION_SYM", "TRIGGERS_SYM", "TRIGGER_SYM", "TRIM", "TRUE_SYM",
  "TRUNCATE_SYM", "TYPES_SYM", "TYPE_SYM", "UDF_RETURNS_SYM",
  "ULONGLONG_NUM", "UNCOMMITTED_SYM", "UNDEFINED_SYM",
  "UNDERSCORE_CHARSET", "UNDOFILE_SYM", "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM",
  "UNICODE_SYM", "UNINSTALL_SYM", "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM",
  "UNLOCK_SYM", "UNSIGNED", "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM",
  "USAGE", "USER", "USER_STATS_SYM", "USE_FRM", "USE_SYM", "USING",
  "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM", "VALUES",
  "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES", "VARIANCE_SYM",
  "VARYING", "VAR_SAMP_SYM", "VIEW_SYM", "WAIT_SYM", "WARNINGS",
  "WEEK_SYM", "WEIGHT_STRING_SYM", "WHEN_SYM", "WHERE", "WHILE_SYM",
  "WITH", "WITH_CUBE_SYM", "WITH_ROLLUP_SYM", "WORK_SYM", "WRAPPER_SYM",
  "WRITE_SYM", "X509_SYM", "XA_SYM", "XML_SYM", "XOR", "YEAR_MONTH_SYM",
  "YEAR_SYM", "ZEROFILL", "'|'", "'&'", "'-'", "'+'", "'*'", "'/'", "'%'",
  "'^'", "'~'", "'('", "')'", "','", "'!'", "'{'", "'}'", "';'", "'@'",
  "'.'", "':'", "$accept", "query", "$@1", "opt_end_of_input",
  "verb_clause", "statement", "deallocate", "deallocate_or_drop",
  "prepare", "prepare_src", "execute", "$@2", "execute_using",
  "execute_var_list", "execute_var_ident", "help", "$@3", "create", "$@4",
  "$@5", "$@6", "$@7", "$@8", "$@9", "$@10", "$@11", "$@12", "server_def",
  "server_options_list", "server_option", "event_tail", "$@13",
  "ev_schedule_time", "$@14", "opt_ev_status", "ev_starts", "ev_ends",
  "opt_ev_on_completion", "ev_on_completion", "opt_ev_comment",
  "ev_sql_stmt", "$@15", "ev_sql_stmt_inner", "clear_privileges",
  "sp_name", "sp_a_chistics", "sp_c_chistics", "sp_chistic",
  "sp_c_chistic", "sp_suid", "call", "$@16", "opt_sp_cparam_list",
  "opt_sp_cparams", "sp_cparams", "sp_fdparam_list", "sp_fdparams",
  "sp_init_param", "sp_fdparam", "sp_pdparam_list", "sp_pdparams",
  "sp_pdparam", "sp_opt_inout", "sp_proc_stmts", "sp_proc_stmts1",
  "sp_decls", "sp_decl", "$@17", "$@18", "$@19", "sp_handler_type",
  "sp_hcond_list", "sp_hcond_element", "sp_cond", "sqlstate", "opt_value",
  "sp_hcond", "sp_decl_idents", "sp_opt_default", "$@20", "sp_proc_stmt",
  "sp_proc_stmt_if", "$@21", "sp_proc_stmt_statement", "$@22",
  "sp_proc_stmt_return", "$@23", "sp_proc_stmt_unlabeled", "$@24",
  "sp_proc_stmt_leave", "sp_proc_stmt_iterate", "sp_proc_stmt_open",
  "sp_proc_stmt_fetch", "$@25", "sp_proc_stmt_close", "sp_opt_fetch_noise",
  "sp_fetch_list", "sp_if", "$@26", "$@27", "$@28", "sp_elseifs",
  "case_stmt_specification", "simple_case_stmt", "$@29", "$@30",
  "searched_case_stmt", "$@31", "simple_when_clause_list",
  "searched_when_clause_list", "simple_when_clause", "$@32", "$@33",
  "searched_when_clause", "$@34", "$@35", "else_clause_opt",
  "sp_labeled_control", "$@36", "sp_opt_label", "sp_labeled_block", "$@37",
  "sp_unlabeled_block", "$@38", "sp_block_content", "$@39",
  "sp_unlabeled_control", "$@40", "$@41", "$@42", "$@43",
  "trg_action_time", "trg_event", "change_tablespace_access",
  "change_tablespace_info", "tablespace_info", "opt_logfile_group_name",
  "alter_tablespace_info", "logfile_group_info",
  "alter_logfile_group_info", "add_log_file", "change_ts_option_list",
  "$@44", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "ts_wait", "size_number", "create2", "create2a", "$@45",
  "create3", "$@46", "$@47", "opt_create_partitioning", "opt_partitioning",
  "partitioning", "$@48", "have_partitioning", "partition_entry", "$@49",
  "partition", "part_type_def", "$@50", "opt_linear", "opt_key_algo",
  "part_field_list", "part_field_item_list", "part_field_item",
  "part_column_list", "part_func", "sub_part_func", "opt_num_parts",
  "opt_sub_part", "$@51", "$@52", "sub_part_field_list",
  "sub_part_field_item", "part_func_expr", "opt_num_subparts", "part_defs",
  "part_def_list", "part_definition", "$@53", "part_name",
  "opt_part_values", "$@54", "$@55", "part_func_max", "part_values_in",
  "part_value_list", "part_value_item", "$@56", "$@57",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@58", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "$@59", "$@60", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "opt_create_table_options", "create_table_options_space_separated",
  "create_table_options", "create_table_option", "$@61", "default_charset",
  "default_collation", "storage_engines", "known_storage_engines",
  "row_types", "merge_insert_types", "opt_select_from", "udf_type",
  "create_field_list", "field_list", "field_list_item", "column_def",
  "key_def", "opt_check_constraint", "check_constraint", "opt_constraint",
  "constraint", "field_spec", "$@62", "type", "$@63", "$@64",
  "spatial_type", "char", "nchar", "varchar", "nvarchar", "int_type",
  "real_type", "float_options", "precision", "type_datetime_precision",
  "func_datetime_precision", "field_options", "field_opt_list",
  "field_option", "field_length", "opt_field_length", "opt_precision",
  "opt_attribute", "opt_attribute_list", "attribute",
  "type_with_opt_collate", "now", "now_or_signed_literal", "charset",
  "charset_name", "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "ascii", "unicode", "opt_binary", "opt_bin_mod",
  "ws_nweights", "$@65", "ws_level_flag_desc", "ws_level_flag_reverse",
  "ws_level_flags", "ws_level_number", "ws_level_list_item",
  "ws_level_list", "ws_level_range", "ws_level_list_or_range",
  "opt_ws_levels", "opt_primary", "references", "opt_ref_list", "ref_list",
  "opt_match_clause", "opt_on_update_delete", "delete_option",
  "normal_key_type", "constraint_key_type", "key_or_index",
  "opt_key_or_index", "keys_or_index", "opt_unique_combo_clustering",
  "unique_combo_clustering", "unique_opt_clustering", "unique",
  "clustering", "fulltext", "spatial", "init_key_options", "key_alg",
  "normal_key_options", "fulltext_key_options", "spatial_key_options",
  "normal_key_opts", "spatial_key_opts", "fulltext_key_opts",
  "key_using_alg", "all_key_opt", "normal_key_opt", "spatial_key_opt",
  "fulltext_key_opt", "btree_or_rtree", "key_list", "key_part",
  "opt_ident", "opt_component", "string_list", "alter", "$@66", "$@67",
  "$@68", "$@69", "$@70", "$@71", "$@72", "alter_user_list",
  "ev_alter_on_schedule_completion", "opt_ev_rename_to", "opt_ev_sql_stmt",
  "ident_or_empty", "alter_commands", "$@73", "$@74", "$@75",
  "remove_partitioning", "all_or_alt_part_name_list", "add_partition_rule",
  "$@76", "add_part_extra", "reorg_partition_rule", "$@77",
  "reorg_parts_rule", "$@78", "alt_part_name_list", "alt_part_name_item",
  "alter_list", "add_column", "alter_list_item", "$@79", "$@80", "$@81",
  "opt_index_lock_algorithm", "alter_algorithm_option",
  "alter_lock_option", "opt_column", "opt_ignore", "opt_restrict",
  "opt_place", "opt_to", "start", "opt_start_transaction_option_list",
  "start_transaction_option_list", "start_transaction_option", "checksum",
  "$@82", "opt_checksum_type", "repair", "$@83", "opt_mi_repair_type",
  "mi_repair_types", "mi_repair_type", "analyze", "$@84",
  "binlog_base64_event", "check", "$@85", "opt_mi_check_type",
  "mi_check_types", "mi_check_type", "optimize", "$@86",
  "opt_no_write_to_binlog", "rename", "$@87", "rename_list",
  "table_to_table_list", "table_to_table", "keycache", "$@88",
  "keycache_list_or_parts", "keycache_list", "assign_to_keycache",
  "assign_to_keycache_parts", "key_cache_name", "preload", "$@89",
  "preload_list_or_parts", "preload_list", "preload_keys",
  "preload_keys_parts", "adm_partition", "$@90", "cache_keys_spec", "$@91",
  "cache_key_list_or_empty", "opt_ignore_leaves", "select", "select_init",
  "select_paren", "select_paren_derived", "select_init2", "$@92",
  "select_part2", "$@93", "$@94", "select_into", "select_from",
  "select_options", "select_option_list", "select_option",
  "select_lock_type", "select_item_list", "select_item", "remember_name",
  "remember_end", "select_alias", "optional_braces", "expr", "bool_pri",
  "predicate", "bit_expr", "or", "and", "not", "not2", "comp_op",
  "all_or_any", "simple_expr", "function_call_keyword",
  "function_call_nonkeyword", "function_call_conflict",
  "geometry_function", "function_call_generic", "$@95", "fulltext_options",
  "opt_natural_language_mode", "opt_query_expansion", "opt_udf_expr_list",
  "udf_expr_list", "udf_expr", "sum_expr", "$@96", "$@97", "$@98",
  "variable", "$@99", "variable_aux", "opt_distinct",
  "opt_gconcat_separator", "opt_gorder_clause", "$@100", "gorder_list",
  "in_sum_expr", "$@101", "cast_type", "opt_expr_list", "expr_list",
  "ident_list_arg", "ident_list", "opt_expr", "opt_else", "when_list",
  "table_ref", "join_table_list", "esc_table_ref", "derived_table_list",
  "join_table", "$@102", "$@103", "$@104", "$@105", "$@106", "$@107",
  "$@108", "normal_join", "opt_use_partition", "use_partition",
  "table_factor", "$@109", "select_derived_union", "$@110", "$@111",
  "select_init2_derived", "select_part2_derived", "$@112", "$@113",
  "select_derived", "$@114", "select_derived2", "$@115", "$@116",
  "get_select_lex", "select_derived_init", "opt_outer",
  "index_hint_clause", "index_hint_type", "index_hint_definition", "$@117",
  "$@118", "index_hints_list", "opt_index_hints_list", "$@119",
  "opt_key_definition", "$@120", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "where_clause", "$@121", "having_clause", "$@122", "opt_escape",
  "group_clause", "group_list", "olap_opt", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "$@123", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "delete_limit_clause", "ulong_num",
  "real_ulong_num", "ulonglong_num", "real_ulonglong_num", "dec_num_error",
  "dec_num", "procedure_analyse_clause", "$@124",
  "opt_procedure_analyse_params", "procedure_analyse_param",
  "select_var_list_init", "$@125", "select_var_list", "select_var_ident",
  "into", "$@126", "into_destination", "$@127", "$@128", "do", "$@129",
  "drop", "$@130", "$@131", "$@132", "$@133", "table_list", "table_name",
  "table_name_with_opt_use_partition", "table_alias_ref_list",
  "table_alias_ref", "if_exists", "opt_temporary", "drop_ts_options_list",
  "drop_ts_options", "drop_ts_option", "insert", "$@134", "$@135",
  "replace", "$@136", "$@137", "insert_lock_option", "replace_lock_option",
  "insert2", "insert_table", "insert_field_spec", "$@138", "fields",
  "insert_values", "$@139", "$@140", "values_list", "ident_eq_list",
  "ident_eq_value", "equal", "opt_equal", "no_braces", "$@141",
  "opt_values", "values", "expr_or_default", "opt_insert_update", "$@142",
  "update", "$@143", "$@144", "update_list", "update_elem",
  "insert_update_list", "insert_update_elem", "opt_low_priority", "delete",
  "$@145", "single_multi", "$@146", "$@147", "$@148", "table_wild_list",
  "table_wild_one", "opt_wild", "opt_delete_options", "opt_delete_option",
  "truncate", "$@149", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@150", "show_param",
  "$@151", "$@152", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "from_or_in", "binlog_in", "binlog_from",
  "wild_and_where", "describe", "$@153", "$@154", "explanable_command",
  "describe_command", "opt_extended_describe", "opt_describe_column",
  "flush", "$@155", "flush_options", "$@156", "$@157", "opt_flush_lock",
  "$@158", "flush_options_list", "flush_option", "opt_table_list", "reset",
  "$@159", "reset_options", "reset_option", "$@160", "slave_reset_options",
  "purge", "$@161", "purge_options", "purge_option",
  "purge_archive_option", "kill", "kill_option", "use", "load", "$@162",
  "$@163", "$@164", "$@165", "data_or_xml", "opt_local", "load_data_lock",
  "opt_duplicate", "opt_field_term", "field_term_list", "field_term",
  "opt_line_term", "line_term_list", "line_term",
  "opt_xml_rows_identified_by", "opt_ignore_lines", "lines_or_rows",
  "opt_field_or_var_spec", "fields_or_vars", "field_or_var",
  "opt_load_data_set_spec", "load_data_set_list", "load_data_set_elem",
  "text_literal", "text_string", "param_marker", "signed_literal",
  "literal", "NUM_literal", "temporal_literal", "insert_ident",
  "table_wild", "order_ident", "simple_ident", "simple_ident_nospvar",
  "simple_ident_q", "field_ident", "table_ident", "table_ident_opt_wild",
  "table_ident_nodb", "IDENT_sys", "TEXT_STRING_sys",
  "TEXT_STRING_literal", "TEXT_STRING_filesystem", "ident", "label_ident",
  "ident_or_text", "user", "keyword", "keyword_sp", "set", "$@166",
  "$@167", "set_stmt_option_value_following_option_type_list",
  "start_option_value_list", "$@168", "$@169", "$@170",
  "start_option_value_list_following_option_type", "$@171",
  "option_value_list_continued", "option_value_list", "$@172", "$@173",
  "option_value", "$@174", "option_type", "opt_var_type",
  "opt_var_ident_type", "option_value_following_option_type",
  "option_value_no_option_type", "$@175", "internal_variable_name",
  "transaction_characteristics", "transaction_access_mode",
  "isolation_level", "transaction_access_mode_types", "isolation_types",
  "text_or_password", "set_expr_or_default", "lock", "lock_variant",
  "$@176", "table_or_tables", "table_lock_list", "table_lock",
  "lock_option", "unlock", "unlock_variant", "handler", "$@177",
  "handler_read_or_scan", "handler_scan_function", "handler_rkey_function",
  "$@178", "handler_rkey_mode", "revoke", "$@179", "revoke_command",
  "grant", "$@180", "grant_command", "opt_table", "grant_privileges",
  "opt_privileges", "object_privilege_list", "object_privilege", "$@181",
  "$@182", "$@183", "$@184", "opt_and", "require_list",
  "require_list_element", "grant_ident", "user_list", "grant_list",
  "grant_user", "opt_column_list", "column_list", "column_list_id",
  "require_clause", "grant_options", "opt_grant_option",
  "grant_option_list", "grant_option", "begin", "$@185", "opt_work",
  "opt_chain", "opt_release", "opt_savepoint", "commit", "rollback",
  "savepoint", "release", "union_clause", "union_list", "$@186",
  "union_opt", "opt_union_order_or_limit", "union_order_or_limit", "$@187",
  "order_or_limit", "union_option", "query_specification",
  "query_expression_body", "$@188", "subselect", "subselect_start",
  "subselect_end", "opt_query_expression_options",
  "query_expression_option_list", "query_expression_option",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_replace_or_algorithm",
  "view_replace", "view_algorithm", "view_suid", "view_tail", "$@189",
  "view_list_opt", "view_list", "view_select", "$@190", "view_select_aux",
  "$@191", "create_view_select_paren", "create_view_select", "$@192",
  "view_check_option", "trigger_tail", "$@193", "$@194", "$@195",
  "udf_tail", "sf_tail", "$@196", "$@197", "$@198", "$@199", "$@200",
  "sp_tail", "$@201", "$@202", "$@203", "$@204", "xa", "xid",
  "begin_or_start", "opt_join_or_resume", "opt_one_phase", "opt_suspend",
  "$@205", "opt_migrate", "install", "uninstall", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   864,
     865,   866,   867,   868,   869,   870,   871,   872,   873,   874,
     875,   876,   877,   878,   879,   880,   881,   882,   883,   884,
     885,   886,   887,   888,   889,   890,   891,   892,   124,    38,
      45,    43,    42,    47,    37,    94,   126,    40,    41,    44,
      33,   123,   125,    59,    64,    46,    58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   657,   658,   659,   658,   658,   660,   660,   661,   661,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   663,   664,   664,
     665,   666,   666,   668,   667,   669,   669,   670,   670,   671,
     673,   672,   675,   674,   676,   677,   674,   678,   679,   674,
     680,   681,   674,   682,   674,   683,   674,   674,   674,   674,
     674,   684,   685,   685,   686,   686,   686,   686,   686,   686,
     686,   688,   687,   690,   689,   689,   691,   691,   691,   691,
     692,   692,   693,   693,   694,   694,   695,   695,   696,   696,
     698,   697,   699,   699,   699,   699,   699,   699,   699,   699,
     699,   699,   699,   699,   699,   700,   701,   701,   702,   702,
     703,   703,   704,   704,   704,   704,   704,   704,   704,   705,
     705,   705,   706,   706,   708,   707,   709,   709,   710,   710,
     711,   711,   712,   712,   713,   713,   714,   715,   716,   716,
     717,   717,   718,   719,   719,   719,   719,   720,   720,   721,
     721,   722,   722,   724,   723,   723,   725,   723,   726,   723,
     727,   727,   728,   728,   729,   730,   730,   731,   732,   732,
     733,   733,   733,   733,   733,   734,   734,   735,   736,   735,
     737,   737,   737,   737,   737,   737,   737,   737,   737,   737,
     737,   737,   737,   739,   738,   741,   740,   743,   742,   745,
     744,   746,   747,   748,   750,   749,   751,   752,   752,   752,
     753,   753,   755,   756,   757,   754,   758,   758,   758,   759,
     759,   761,   762,   760,   764,   763,   765,   765,   766,   766,
     768,   769,   767,   771,   772,   770,   773,   773,   775,   774,
     776,   776,   778,   777,   780,   779,   782,   781,   783,   784,
     785,   783,   786,   787,   783,   788,   788,   789,   789,   789,
     790,   791,   792,   793,   793,   794,   794,   795,   796,   797,
     797,   799,   798,   800,   800,   800,   801,   801,   801,   802,
     802,   803,   803,   803,   804,   804,   804,   804,   804,   804,
     804,   804,   805,   805,   806,   806,   806,   807,   807,   807,
     807,   807,   808,   808,   809,   809,   809,   810,   810,   810,
     810,   810,   810,   810,   811,   811,   812,   812,   812,   813,
     813,   813,   814,   815,   816,   817,   818,   819,   819,   819,
     820,   821,   822,   823,   824,   825,   826,   827,   828,   829,
     829,   830,   830,   831,   831,   831,   831,   832,   833,   832,
     834,   835,   834,   836,   834,   837,   838,   838,   840,   839,
     841,   843,   842,   844,   845,   846,   845,   845,   845,   845,
     845,   847,   847,   848,   848,   849,   849,   850,   850,   851,
     852,   853,   854,   855,   855,   856,   857,   856,   858,   856,
     859,   859,   860,   861,   862,   862,   863,   863,   864,   864,
     866,   865,   867,   868,   869,   868,   870,   868,   871,   871,
     872,   872,   873,   873,   875,   876,   874,   877,   877,   878,
     878,   879,   879,   880,   880,   882,   881,   883,   884,   884,
     885,   885,   886,   886,   886,   886,   886,   886,   886,   886,
     888,   889,   887,   890,   890,   891,   891,   892,   892,   893,
     893,   894,   894,   895,   895,   896,   897,   897,   898,   898,
     899,   899,   900,   900,   900,   901,   901,   901,   901,   901,
     901,   901,   901,   901,   901,   901,   901,   901,   901,   901,
     901,   901,   901,   901,   902,   901,   901,   901,   901,   901,
     901,   901,   901,   901,   901,   901,   903,   904,   905,   906,
     907,   907,   907,   907,   907,   907,   907,   907,   907,   907,
     907,   907,   908,   908,   908,   909,   909,   910,   910,   910,
     910,   911,   912,   912,   913,   913,   914,   914,   915,   915,
     915,   915,   915,   915,   916,   916,   917,   918,   918,   919,
     921,   920,   922,   922,   922,   922,   922,   922,   922,   922,
     922,   922,   922,   922,   922,   922,   922,   922,   922,   922,
     922,   922,   922,   922,   922,   922,   922,   922,   922,   922,
     922,   922,   922,   922,   922,   922,   922,   923,   922,   924,
     922,   922,   922,   925,   925,   925,   925,   925,   925,   925,
     925,   926,   927,   927,   928,   928,   929,   929,   929,   929,
     929,   930,   930,   930,   930,   930,   931,   931,   931,   932,
     932,   932,   933,   934,   934,   935,   935,   935,   936,   936,
     937,   937,   938,   938,   938,   939,   939,   939,   939,   940,
     940,   941,   941,   942,   942,   943,   943,   944,   944,   944,
     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   945,   946,   947,   947,   948,   948,
     949,   949,   950,   950,   951,   951,   952,   952,   953,   953,
     954,   955,   955,   956,   956,   957,   957,   958,   958,   958,
     959,   959,   959,   960,   960,   960,   960,   960,   960,   960,
     961,   961,   963,   962,   964,   964,   965,   966,   966,   966,
     966,   967,   968,   969,   969,   970,   971,   971,   972,   972,
     973,   973,   974,   975,   975,   976,   976,   977,   977,   977,
     977,   978,   978,   978,   978,   978,   979,   979,   979,   979,
     979,   980,   981,   981,   982,   982,   983,   983,   984,   984,
     984,   985,   985,   986,   986,   987,   987,   987,   988,   989,
     990,   991,   992,   993,   993,   994,   994,   995,   995,   996,
     996,   997,   997,   998,   998,   999,   999,  1000,  1000,  1001,
    1001,  1002,  1002,  1003,  1004,  1004,  1005,  1005,  1005,  1006,
    1006,  1007,  1007,  1008,  1008,  1009,  1009,  1010,  1010,  1012,
    1011,  1013,  1011,  1011,  1014,  1011,  1015,  1011,  1016,  1011,
    1017,  1011,  1018,  1011,  1011,  1011,  1011,  1011,  1011,  1011,
    1019,  1019,  1020,  1020,  1020,  1020,  1021,  1021,  1022,  1022,
    1023,  1023,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,
    1024,  1024,  1025,  1024,  1024,  1026,  1024,  1027,  1024,  1024,
    1024,  1024,  1024,  1028,  1029,  1029,  1031,  1030,  1032,  1032,
    1032,  1034,  1033,  1035,  1036,  1035,  1037,  1037,  1038,  1039,
    1039,  1040,  1041,  1041,  1041,  1042,  1041,  1043,  1044,  1041,
    1041,  1041,  1041,  1041,  1041,  1041,  1041,  1041,  1041,  1041,
    1041,  1041,  1041,  1041,  1041,  1045,  1045,  1045,  1045,  1045,
    1046,  1046,  1047,  1047,  1048,  1048,  1049,  1049,  1050,  1050,
    1050,  1051,  1051,  1051,  1052,  1052,  1052,  1052,  1053,  1054,
    1054,  1055,  1055,  1056,  1056,  1056,  1056,  1058,  1057,  1059,
    1059,  1059,  1061,  1060,  1062,  1062,  1063,  1063,  1064,  1064,
    1064,  1066,  1065,  1067,  1069,  1068,  1070,  1070,  1071,  1071,
    1072,  1072,  1072,  1072,  1072,  1072,  1074,  1073,  1075,  1075,
    1075,  1077,  1076,  1076,  1078,  1078,  1079,  1079,  1080,  1082,
    1081,  1083,  1083,  1084,  1084,  1085,  1086,  1087,  1087,  1089,
    1088,  1090,  1090,  1091,  1091,  1092,  1093,  1095,  1094,  1097,
    1096,  1098,  1098,  1099,  1099,  1100,  1101,  1101,  1102,  1102,
    1103,  1103,  1105,  1104,  1107,  1108,  1106,  1109,  1109,  1109,
    1109,  1109,  1110,  1110,  1111,  1111,  1112,  1112,  1113,  1113,
    1113,  1114,  1114,  1114,  1115,  1115,  1115,  1116,  1116,  1117,
    1118,  1119,  1119,  1119,  1119,  1119,  1120,  1120,  1121,  1121,
    1121,  1121,  1121,  1121,  1121,  1121,  1121,  1121,  1121,  1122,
    1122,  1122,  1122,  1122,  1122,  1123,  1123,  1123,  1123,  1123,
    1123,  1123,  1123,  1123,  1123,  1123,  1123,  1123,  1123,  1124,
    1124,  1124,  1124,  1124,  1124,  1124,  1124,  1124,  1124,  1124,
    1124,  1124,  1124,  1124,  1125,  1125,  1126,  1126,  1127,  1127,
    1128,  1128,  1129,  1129,  1129,  1129,  1129,  1129,  1130,  1130,
    1131,  1131,  1131,  1131,  1131,  1131,  1131,  1131,  1131,  1131,
    1131,  1131,  1131,  1131,  1131,  1131,  1131,  1131,  1131,  1131,
    1131,  1131,  1131,  1131,  1131,  1131,  1131,  1131,  1131,  1131,
    1132,  1132,  1132,  1132,  1132,  1132,  1132,  1132,  1132,  1132,
    1132,  1132,  1132,  1132,  1132,  1132,  1132,  1132,  1132,  1132,
    1132,  1132,  1132,  1132,  1132,  1132,  1132,  1133,  1133,  1133,
    1133,  1133,  1133,  1133,  1133,  1133,  1133,  1133,  1133,  1133,
    1133,  1133,  1133,  1133,  1133,  1133,  1133,  1133,  1133,  1134,
    1134,  1134,  1134,  1134,  1134,  1134,  1134,  1134,  1134,  1134,
    1134,  1134,  1134,  1134,  1134,  1134,  1134,  1134,  1134,  1134,
    1134,  1134,  1134,  1134,  1135,  1135,  1135,  1135,  1135,  1135,
    1135,  1135,  1137,  1136,  1136,  1138,  1138,  1139,  1139,  1140,
    1140,  1141,  1141,  1142,  1142,  1143,  1144,  1144,  1144,  1144,
    1144,  1144,  1144,  1145,  1146,  1144,  1144,  1144,  1144,  1144,
    1144,  1144,  1144,  1144,  1144,  1144,  1147,  1144,  1149,  1148,
    1150,  1150,  1150,  1151,  1151,  1152,  1152,  1153,  1154,  1153,
    1155,  1155,  1157,  1156,  1158,  1158,  1158,  1158,  1158,  1158,
    1158,  1158,  1158,  1158,  1158,  1159,  1159,  1160,  1160,  1161,
    1161,  1162,  1162,  1163,  1163,  1164,  1164,  1165,  1165,  1166,
    1166,  1167,  1168,  1168,  1169,  1169,  1170,  1170,  1171,  1170,
    1172,  1170,  1173,  1170,  1170,  1174,  1170,  1175,  1170,  1170,
    1176,  1170,  1177,  1170,  1170,  1178,  1178,  1178,  1179,  1179,
    1180,  1182,  1181,  1181,  1181,  1183,  1184,  1185,  1183,  1186,
    1188,  1189,  1187,  1191,  1190,  1193,  1194,  1192,  1195,  1196,
    1197,  1197,  1198,  1198,  1198,  1198,  1199,  1199,  1201,  1200,
    1202,  1200,  1203,  1203,  1204,  1205,  1204,  1207,  1206,  1208,
    1208,  1209,  1209,  1210,  1210,  1211,  1211,  1212,  1212,  1212,
    1212,  1212,  1212,  1212,  1212,  1212,  1212,  1212,  1212,  1213,
    1213,  1213,  1213,  1213,  1213,  1213,  1213,  1213,  1214,  1214,
    1214,  1214,  1215,  1215,  1215,  1216,  1216,  1217,  1217,  1218,
    1219,  1218,  1220,  1221,  1220,  1222,  1222,  1223,  1223,  1224,
    1224,  1225,  1225,  1225,  1226,  1227,  1227,  1228,  1229,  1229,
    1231,  1230,  1232,  1232,  1233,  1233,  1233,  1234,  1234,  1235,
    1235,  1236,  1237,  1237,  1237,  1238,  1238,  1238,  1238,  1238,
    1239,  1239,  1240,  1240,  1240,  1240,  1240,  1240,  1241,  1241,
    1241,  1241,  1241,  1242,  1242,  1242,  1242,  1242,  1243,  1243,
    1243,  1243,  1244,  1245,  1245,  1246,  1247,  1246,  1248,  1248,
    1248,  1249,  1251,  1250,  1252,  1252,  1253,  1253,  1255,  1254,
    1257,  1258,  1256,  1256,  1256,  1260,  1259,  1262,  1261,  1263,
    1264,  1261,  1261,  1261,  1261,  1261,  1261,  1265,  1261,  1261,
    1261,  1261,  1261,  1261,  1266,  1266,  1267,  1268,  1269,  1269,
    1270,  1271,  1271,  1272,  1272,  1273,  1273,  1274,  1274,  1274,
    1275,  1275,  1277,  1278,  1276,  1280,  1281,  1279,  1282,  1282,
    1282,  1282,  1283,  1283,  1284,  1284,  1285,  1286,  1286,  1286,
    1287,  1286,  1288,  1288,  1289,  1289,  1290,  1289,  1291,  1289,
    1292,  1292,  1293,  1293,  1294,  1295,  1295,  1296,  1296,  1298,
    1297,  1299,  1299,  1300,  1300,  1301,  1301,  1302,  1303,  1302,
    1305,  1306,  1304,  1307,  1307,  1308,  1309,  1309,  1310,  1311,
    1311,  1313,  1312,  1315,  1314,  1316,  1314,  1317,  1314,  1318,
    1318,  1319,  1319,  1320,  1320,  1321,  1321,  1322,  1322,  1322,
    1324,  1323,  1325,  1325,  1326,  1326,  1327,  1327,  1328,  1328,
    1328,  1328,  1328,  1328,  1328,  1328,  1328,  1329,  1329,  1331,
    1330,  1332,  1332,  1332,  1332,  1332,  1332,  1332,  1332,  1332,
    1332,  1332,  1332,  1333,  1332,  1334,  1332,  1332,  1332,  1332,
    1332,  1332,  1332,  1332,  1332,  1332,  1332,  1332,  1332,  1332,
    1332,  1332,  1332,  1332,  1332,  1332,  1332,  1332,  1332,  1332,
    1332,  1332,  1332,  1332,  1332,  1332,  1332,  1332,  1332,  1332,
    1332,  1332,  1332,  1335,  1335,  1335,  1336,  1336,  1337,  1337,
    1338,  1338,  1339,  1339,  1340,  1340,  1341,  1341,  1342,  1342,
    1343,  1343,  1343,  1345,  1344,  1346,  1344,  1347,  1347,  1347,
    1347,  1347,  1348,  1348,  1349,  1349,  1349,  1349,  1350,  1350,
    1350,  1352,  1351,  1354,  1355,  1353,  1353,  1356,  1356,  1357,
    1356,  1358,  1358,  1359,  1359,  1359,  1359,  1359,  1359,  1359,
    1359,  1359,  1359,  1359,  1359,  1359,  1359,  1359,  1359,  1359,
    1359,  1359,  1360,  1360,  1362,  1361,  1363,  1363,  1365,  1364,
    1364,  1364,  1364,  1366,  1366,  1368,  1367,  1369,  1369,  1369,
    1370,  1370,  1371,  1371,  1372,  1373,  1373,  1373,  1374,  1376,
    1377,  1378,  1379,  1375,  1380,  1380,  1381,  1381,  1382,  1382,
    1382,  1383,  1383,  1383,  1384,  1384,  1385,  1385,  1386,  1386,
    1386,  1386,  1387,  1387,  1388,  1388,  1389,  1389,  1390,  1390,
    1391,  1391,  1392,  1392,  1393,  1393,  1393,  1394,  1394,  1395,
    1395,  1396,  1396,  1397,  1397,  1398,  1399,  1399,  1399,  1399,
    1400,  1400,  1400,  1401,  1402,  1402,  1402,  1403,  1403,  1403,
    1403,  1403,  1403,  1403,  1403,  1403,  1403,  1404,  1404,  1404,
    1404,  1404,  1405,  1405,  1405,  1406,  1406,  1407,  1407,  1408,
    1409,  1409,  1410,  1410,  1411,  1411,  1411,  1412,  1412,  1412,
    1412,  1413,  1413,  1413,  1414,  1414,  1415,  1416,  1416,  1417,
    1418,  1419,  1420,  1420,  1421,  1421,  1422,  1422,  1422,  1423,
    1423,  1423,  1424,  1424,  1424,  1424,  1424,  1424,  1424,  1424,
    1424,  1424,  1424,  1424,  1424,  1424,  1424,  1424,  1424,  1424,
    1424,  1424,  1424,  1424,  1424,  1424,  1424,  1424,  1424,  1424,
    1424,  1424,  1424,  1424,  1424,  1424,  1424,  1424,  1424,  1424,
    1424,  1424,  1424,  1424,  1424,  1424,  1424,  1424,  1424,  1424,
    1424,  1424,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,
    1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,
    1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,
    1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,
    1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,
    1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,
    1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,
    1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,
    1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,
    1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,
    1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,
    1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,
    1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,
    1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,
    1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,
    1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,
    1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,
    1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,
    1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,
    1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,
    1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,
    1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,
    1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,
    1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,
    1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,
    1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,
    1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,
    1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,
    1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,
    1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,
    1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,  1425,
    1425,  1425,  1425,  1425,  1425,  1425,  1425,  1427,  1426,  1428,
    1426,  1429,  1429,  1431,  1430,  1432,  1430,  1433,  1430,  1435,
    1434,  1434,  1436,  1436,  1438,  1437,  1439,  1437,  1441,  1440,
    1440,  1442,  1442,  1442,  1443,  1443,  1443,  1443,  1444,  1444,
    1444,  1444,  1445,  1447,  1446,  1446,  1446,  1446,  1446,  1446,
    1446,  1446,  1448,  1448,  1448,  1449,  1449,  1449,  1449,  1450,
    1451,  1452,  1452,  1453,  1453,  1453,  1453,  1454,  1454,  1454,
    1455,  1455,  1455,  1455,  1455,  1456,  1457,  1457,  1458,  1457,
    1459,  1459,  1460,  1460,  1461,  1462,  1462,  1462,  1462,  1463,
    1464,  1464,  1465,  1465,  1466,  1465,  1467,  1467,  1468,  1468,
    1469,  1469,  1469,  1469,  1470,  1469,  1471,  1471,  1471,  1471,
    1471,  1473,  1472,  1474,  1474,  1474,  1474,  1474,  1476,  1475,
    1477,  1477,  1477,  1477,  1478,  1478,  1479,  1479,  1480,  1480,
    1481,  1481,  1483,  1482,  1484,  1482,  1485,  1482,  1486,  1482,
    1482,  1482,  1482,  1482,  1482,  1482,  1482,  1482,  1482,  1482,
    1482,  1482,  1482,  1482,  1482,  1482,  1482,  1482,  1482,  1482,
    1482,  1482,  1482,  1482,  1482,  1482,  1487,  1487,  1488,  1488,
    1489,  1489,  1489,  1490,  1490,  1490,  1490,  1491,  1491,  1492,
    1492,  1493,  1493,  1493,  1493,  1493,  1494,  1494,  1495,  1495,
    1496,  1497,  1497,  1497,  1497,  1497,  1498,  1498,  1499,  1499,
    1500,  1500,  1501,  1501,  1501,  1501,  1501,  1503,  1502,  1504,
    1504,  1505,  1505,  1505,  1506,  1506,  1506,  1507,  1507,  1508,
    1509,  1509,  1510,  1511,  1512,  1512,  1514,  1513,  1515,  1515,
    1515,  1516,  1516,  1518,  1517,  1519,  1519,  1520,  1520,  1520,
    1521,  1521,  1522,  1523,  1522,  1524,  1525,  1526,  1527,  1527,
    1528,  1528,  1529,  1529,  1529,  1529,  1529,  1529,  1529,  1529,
    1530,  1530,  1530,  1531,  1531,  1531,  1531,  1531,  1532,  1532,
    1532,  1532,  1532,  1532,  1533,  1533,  1534,  1535,  1536,  1536,
    1536,  1537,  1538,  1538,  1538,  1539,  1539,  1539,  1541,  1540,
    1542,  1542,  1543,  1543,  1545,  1544,  1547,  1546,  1546,  1548,
    1548,  1550,  1549,  1551,  1551,  1551,  1551,  1553,  1554,  1555,
    1552,  1556,  1556,  1558,  1559,  1560,  1561,  1562,  1557,  1564,
    1565,  1566,  1567,  1563,  1568,  1568,  1568,  1568,  1568,  1568,
    1569,  1569,  1569,  1570,  1570,  1571,  1571,  1571,  1572,  1572,
    1573,  1574,  1573,  1575,  1575,  1576,  1577
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     1,     1,
       4,     1,     2,     0,     4,     0,     2,     3,     1,     2,
       0,     3,     0,     7,     0,     0,    14,     0,     0,    14,
       0,     0,    14,     0,     6,     0,     3,     4,     4,     3,
       2,    10,     1,     3,     2,     2,     2,     2,     2,     2,
       2,     0,    13,     0,     6,     2,     0,     1,     3,     1,
       0,     2,     0,     2,     0,     1,     3,     4,     0,     2,
       0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     3,     1,     0,     2,
       0,     2,     2,     2,     2,     2,     3,     3,     1,     1,
       1,     2,     3,     3,     0,     4,     0,     3,     0,     1,
       3,     1,     0,     1,     3,     1,     0,     3,     0,     1,
       3,     1,     4,     0,     1,     1,     1,     0,     3,     2,
       3,     0,     3,     0,     5,     5,     0,     7,     0,     6,
       1,     1,     1,     3,     1,     1,     1,     3,     0,     1,
       1,     1,     1,     2,     1,     1,     3,     0,     0,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     5,     0,     2,     0,     3,     0,
       2,     2,     2,     2,     0,     6,     2,     0,     2,     1,
       1,     3,     0,     0,     0,     7,     0,     2,     2,     1,
       1,     0,     0,     8,     0,     6,     1,     2,     1,     2,
       0,     0,     6,     0,     0,     6,     0,     2,     0,     5,
       0,     1,     0,     5,     0,     2,     0,     5,     4,     0,
       0,     8,     0,     0,     8,     1,     1,     1,     1,     1,
       2,     4,     5,     0,     4,     4,     4,     3,     3,     2,
       2,     0,     2,     1,     2,     3,     1,     1,     1,     0,
       1,     1,     2,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     1,     1,     2,     3,     1,     1,     1,
       1,     1,     0,     1,     1,     2,     3,     1,     1,     1,
       1,     1,     1,     1,     0,     1,     1,     2,     3,     1,
       1,     1,     2,     2,     2,     1,     1,     1,     1,     2,
       3,     3,     3,     3,     3,     3,     3,     3,     4,     1,
       1,     1,     1,     2,     3,     2,     4,     5,     0,     5,
       0,     0,     5,     0,     7,     1,     0,     1,     0,     4,
       0,     0,     3,     5,     6,     0,     4,     2,     2,     2,
       2,     0,     1,     0,     3,     0,     1,     1,     3,     1,
       4,     5,     5,     0,     2,     0,     0,     7,     0,    10,
       1,     3,     1,     1,     0,     2,     0,     3,     1,     3,
       0,     6,     1,     0,     0,     5,     0,     4,     1,     1,
       1,     3,     1,     3,     0,     0,     5,     1,     3,     1,
       1,     0,     3,     1,     3,     0,     4,     1,     0,     1,
       2,     1,     3,     4,     3,     3,     3,     4,     4,     3,
       0,     0,     6,     0,     1,     0,     1,     1,     2,     1,
       1,     0,     1,     1,     2,     1,     0,     3,     0,     1,
       1,     2,     1,     2,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     0,     6,     1,     1,     3,     4,
       4,     2,     2,     2,     3,     3,     4,     4,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     1,     1,     1,
       1,     1,     1,     3,     1,     1,     2,     2,     7,     8,
       8,     8,     8,     2,     0,     1,     4,     0,     1,     2,
       0,     4,     3,     3,     3,     1,     2,     1,     1,     3,
       2,     3,     2,     2,     1,     3,     3,     2,     3,     1,
       2,     2,     2,     1,     2,     1,     1,     1,     2,     3,
       2,     3,     2,     2,     3,     3,     3,     0,     6,     0,
       6,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     1,     2,     1,     2,     3,
       2,     1,     1,     1,     1,     1,     1,     1,     2,     0,
       1,     1,     5,     0,     3,     0,     2,     3,     0,     1,
       2,     1,     1,     1,     1,     3,     3,     3,     3,     0,
       1,     0,     1,     0,     1,     2,     1,     1,     2,     2,
       3,     1,     3,     2,     1,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     1,     2,     1,
       1,     1,     1,     1,     0,     2,     1,     1,     1,     1,
       1,     0,     2,     1,     1,     0,     1,     1,     2,     2,
       1,     2,     2,     0,     1,     1,     1,     3,     1,     3,
       0,     1,     0,     4,     1,     1,     1,     0,     1,     2,
       1,     1,     2,     1,     3,     3,     1,     1,     0,     2,
       0,     1,     5,     0,     3,     3,     1,     0,     2,     2,
       2,     0,     3,     3,     6,     6,     1,     1,     2,     2,
       2,     1,     2,     2,     1,     1,     0,     1,     1,     1,
       1,     0,     1,     1,     1,     1,     2,     2,     1,     1,
       1,     1,     0,     1,     2,     0,     1,     0,     1,     0,
       1,     1,     2,     1,     2,     1,     2,     2,     2,     3,
       2,     1,     1,     1,     1,     3,     1,     1,     1,     4,
       2,     1,     4,     0,     1,     0,     2,     1,     3,     0,
       6,     0,     5,     7,     0,     5,     0,     5,     0,     5,
       0,     4,     0,    10,     3,     4,     3,     3,     7,     4,
       3,     5,     0,     3,     1,     4,     0,     3,     0,     2,
       0,     1,     0,     2,     2,     2,     2,     1,     1,     1,
       3,     4,     0,     6,     4,     0,     5,     0,     6,     4,
       3,     1,     7,     3,     1,     1,     0,     5,     0,     3,
       2,     0,     5,     0,     0,     6,     1,     3,     1,     1,
       3,     2,     3,     2,     4,     0,     6,     0,     0,     8,
       4,     4,     3,     3,     2,     2,     6,     5,     3,     5,
       1,     1,     1,     1,     1,     0,     1,     1,     2,     2,
       3,     3,     3,     3,     0,     1,     0,     1,     0,     1,
       1,     0,     2,     1,     0,     1,     1,     1,     3,     0,
       1,     1,     3,     3,     6,     2,     2,     0,     5,     0,
       1,     1,     0,     6,     0,     1,     1,     2,     1,     1,
       1,     0,     5,     2,     0,     5,     0,     1,     1,     2,
       1,     1,     1,     1,     1,     2,     0,     5,     0,     1,
       1,     0,     4,     4,     3,     5,     1,     3,     3,     0,
       6,     1,     1,     1,     3,     2,     3,     1,     1,     0,
       6,     1,     1,     1,     3,     3,     4,     0,     6,     0,
       2,     0,     4,     0,     2,     1,     2,     4,     2,     3,
       2,     3,     0,     3,     0,     0,     6,     2,     1,     1,
       2,     2,     8,     4,     0,     1,     2,     1,     1,     1,
       1,     0,     2,     4,     3,     1,     1,     3,     4,     0,
       0,     0,     2,     2,     1,     1,     0,     2,     3,     3,
       3,     2,     3,     4,     3,     4,     3,     4,     1,     3,
       4,     3,     3,     6,     1,     5,     6,     5,     7,     6,
       8,     5,     6,     4,     4,     5,     3,     4,     1,     3,
       3,     3,     3,     3,     3,     5,     5,     3,     3,     3,
       3,     3,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     1,     1,     1,     1,
       3,     2,     2,     2,     2,     3,     3,     5,     6,     4,
       4,     7,     2,     6,     5,     6,     6,     4,     4,     5,
       4,     6,     2,     4,     4,     4,    10,     6,     8,     6,
       4,     4,     6,     4,     4,     4,     6,     4,     7,     7,
       7,     6,     6,     6,     6,     3,     4,     6,     8,     2,
       2,     8,     8,     6,     6,     1,     6,     6,     8,     8,
       6,     8,     6,     2,     8,     8,     2,     2,     2,     4,
       4,     4,     4,     3,     8,     6,     8,     4,     6,     4,
       4,     4,     6,     8,     4,     3,     6,     4,     6,     5,
       8,     7,    10,     1,     6,     4,     4,     4,     4,     4,
       6,     4,     0,     5,     6,     2,     3,     0,     4,     0,
       3,     0,     1,     1,     3,     4,     4,     5,     4,     4,
       4,     5,     4,     0,     0,     7,     4,     5,     4,     5,
       4,     4,     4,     4,     4,     5,     0,     8,     0,     3,
       3,     1,     4,     0,     1,     0,     2,     0,     0,     4,
       4,     2,     0,     3,     2,     3,     2,     1,     2,     1,
       2,     1,     2,     2,     2,     0,     1,     1,     3,     1,
       3,     1,     3,     0,     1,     0,     2,     4,     5,     1,
       1,     1,     1,     4,     1,     3,     3,     3,     0,     6,
       0,     6,     0,     8,     4,     0,     8,     0,    10,     6,
       0,     8,     0,    10,     6,     1,     2,     2,     0,     1,
       5,     0,     5,     3,     5,     2,     0,     0,     7,     1,
       0,     0,     6,     0,     3,     0,     0,     5,     0,     1,
       0,     1,     0,     2,     3,     3,     1,     1,     0,     7,
       0,     7,     1,     2,     0,     0,     2,     0,     2,     0,
       1,     1,     1,     1,     3,     1,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     1,     1,     0,     2,     0,     1,     0,
       0,     3,     0,     0,     3,     2,     0,     0,     4,     4,
       2,     0,     1,     1,     3,     3,     1,     2,     0,     1,
       0,     4,     4,     2,     0,     1,     1,     0,     1,     0,
       1,     2,     1,     3,     3,     1,     1,     1,     1,     1,
       0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     0,     6,     0,     1,
       3,     1,     0,     2,     3,     1,     2,     1,     0,     3,
       0,     0,     7,     2,     1,     0,     3,     0,     7,     0,
       0,     8,     4,     6,     4,     4,     4,     0,     6,     4,
       4,     4,     5,     4,     1,     3,     1,     2,     1,     3,
       1,     0,     2,     0,     1,     0,     1,     1,     2,     3,
       1,     1,     0,     0,     8,     0,     0,     6,     0,     1,
       1,     1,     1,     1,     2,     1,     1,     1,     3,     4,
       0,     3,     3,     1,     2,     2,     0,     3,     0,     5,
       3,     1,     3,     1,     3,     1,     1,     0,     1,     0,
       4,     0,     1,     3,     1,     1,     1,     0,     0,     6,
       0,     0,    11,     3,     1,     3,     3,     1,     3,     0,
       1,     0,     4,     0,     7,     0,     5,     0,     6,     1,
       3,     2,     4,     0,     2,     0,     2,     1,     1,     1,
       0,     4,     0,     1,     0,     1,     1,     3,     1,     1,
       2,     2,     2,     1,     1,     1,     1,     0,     3,     0,
       3,     2,     4,     4,     3,     4,     4,     1,     3,     3,
       6,     2,     2,     0,     6,     0,     6,     5,     2,     1,
       5,     5,     2,     2,     1,     4,     3,     2,     3,     2,
       2,     1,     3,     4,     3,     3,     2,     2,     3,     3,
       2,     2,     2,     2,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     1,     1,     1,     1,     1,     0,     1,
       0,     2,     0,     1,     1,     1,     0,     2,     0,     2,
       0,     2,     2,     0,     4,     0,     4,     1,     1,     1,
       1,     1,     1,     1,     0,     1,     1,     3,     0,     1,
       1,     0,     4,     0,     0,     5,     1,     0,     3,     0,
       3,     3,     1,     2,     2,     2,     2,     2,     2,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     1,     0,     3,     3,     1,     0,     3,
       1,     2,     1,     0,     1,     0,     3,     3,     3,     3,
       2,     2,     2,     2,     3,     0,     1,     1,     2,     0,
       0,     0,     0,    22,     1,     1,     0,     1,     0,     1,
       1,     0,     1,     1,     0,     2,     2,     1,     3,     4,
       3,     3,     0,     2,     2,     1,     3,     3,     0,     4,
       0,     3,     1,     1,     0,     3,     2,     3,     1,     1,
       2,     0,     2,     3,     1,     5,     1,     1,     2,     2,
       1,     1,     1,     1,     1,     2,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     2,     1,     1,     1,
       1,     1,     2,     2,     2,     1,     1,     3,     5,     1,
       1,     1,     1,     1,     3,     4,     5,     1,     5,     3,
       2,     1,     3,     2,     2,     4,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     3,     0,
       6,     1,     3,     0,     3,     0,     3,     0,     3,     0,
       3,     2,     0,     2,     0,     2,     0,     4,     0,     3,
       1,     1,     1,     1,     0,     1,     1,     1,     0,     2,
       2,     2,     3,     0,     4,     4,     6,     2,     3,     3,
       3,     5,     1,     3,     3,     1,     1,     3,     3,     1,
       3,     2,     2,     2,     2,     2,     1,     1,     4,     4,
       1,     1,     1,     1,     1,     2,     3,     3,     0,     3,
       1,     1,     1,     3,     3,     1,     1,     2,     2,     2,
       1,     1,     4,     3,     0,     7,     1,     2,     1,     1,
       1,     1,     1,     1,     0,     5,     1,     1,     1,     1,
       1,     0,     4,     6,     6,     6,     7,     5,     0,     4,
       8,     8,     8,     6,     0,     1,     1,     2,     0,     1,
       1,     3,     0,     3,     0,     3,     0,     3,     0,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     1,     3,     2,     2,     2,     2,     2,
       2,     2,     2,     1,     1,     2,     0,     1,     3,     1,
       2,     2,     2,     1,     3,     3,     1,     1,     3,     1,
       3,     4,     5,     4,     6,     1,     0,     3,     3,     1,
       1,     0,     2,     2,     2,     2,     0,     2,     0,     3,
       2,     1,     2,     2,     2,     2,     2,     0,     3,     0,
       1,     0,     3,     2,     0,     1,     2,     0,     1,     4,
       4,     5,     2,     3,     0,     1,     0,     4,     0,     1,
       1,     0,     1,     0,     2,     2,     1,     0,     1,     1,
       2,     3,     2,     0,     6,     3,     0,     0,     0,     1,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     3,     1,     2,
       1,     2,     3,     3,     3,     0,     3,     3,     0,     7,
       0,     3,     1,     3,     0,     3,     0,     3,     4,     1,
       3,     0,     3,     0,     3,     4,     4,     0,     0,     0,
      16,     8,     7,     0,     0,     0,     0,     0,    15,     0,
       0,     0,     0,    12,     4,     4,     3,     4,     3,     2,
       1,     3,     5,     1,     1,     0,     1,     1,     0,     2,
       0,     0,     3,     0,     2,     5,     3
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,  2536,   978,  2467,     0,     0,     0,     0,     0,  2469,
      85,    58,  1601,  1722,  1723,  1505,  1533,     2,     0,   978,
     135,     0,    70,  1542,     0,  1785,     0,     0,   978,   391,
       0,  1775,     0,     0,   978,  1545,  1764,   135,  2469,     0,
    1024,  2267,  1639,     0,  1622,     0,     0,  1590,     0,     0,
       0,     0,     3,     8,    18,     0,    37,    23,    27,    17,
      13,    35,    10,    50,    15,    41,    11,    12,    14,    33,
      40,    34,    36,    47,  1015,    21,    22,    28,    42,    54,
      19,    51,    49,    20,  1724,    24,    43,    38,    30,    55,
      31,    48,    32,    53,    26,    44,    25,     9,    16,    45,
      46,    39,    56,    29,    52,     0,   850,     0,     0,   927,
       0,     0,     0,     0,   135,     0,   830,  2534,  2535,  2536,
     980,   979,     0,  2469,  1889,   963,   989,  1952,  1953,  1954,
    1955,  1956,  1957,  1958,  1960,  1959,  1903,  1961,  1963,  1962,
    1964,  1965,  1904,  1905,  1966,  1967,  1968,  1970,  1969,  1971,
    1906,  1907,  1972,  1973,  1974,  1975,  1976,  1908,  1909,  1977,
    1980,  1979,  1978,  1910,  1981,  1982,  1983,  1986,  1985,  1984,
    1911,  1987,  1912,  1988,  1989,  1990,  1991,  1992,  1993,  1994,
    1996,  1995,  1913,  1997,  1998,  1999,  2000,  2001,  2003,  2002,
    2004,  2005,  2006,  1914,  2007,  2008,  2009,  2010,  2011,  2012,
    2013,  2014,  2015,  1915,  2016,  2017,  2018,  2038,  1916,  2019,
    2022,  2021,  2020,  2023,  2024,  2025,  2027,  2026,  2028,  2029,
    1917,  2030,  2031,  2032,  2033,  2034,  2036,  2035,  2040,  2041,
    2042,  1918,  1919,  2037,  2039,  2246,  2043,  2045,  2044,  2046,
    2048,  2047,  1920,  2049,  1921,  1922,  2050,  2051,  1887,  2052,
    1888,  2054,  2056,  2057,  2053,  2058,  2063,  1923,  2055,  2059,
    2060,  2061,  2062,  2064,  1924,  2065,  2066,  2067,  2068,  2069,
    2070,  2071,  2072,  2073,  2074,  2096,  2085,  2087,  2078,  2080,
    2081,  2083,  2079,  2086,  2084,  2090,  2089,  2091,  2092,  2093,
    2094,  2095,  2088,  2076,  2082,  2077,  2097,  2098,  2075,  2099,
    2100,  2101,  2102,  2103,  2104,  2105,  2106,  2107,  2108,  2109,
    2111,  2110,  2112,  2113,  2114,  2115,  2116,  2117,  2119,  2118,
    2120,  2121,  2122,  2124,  2123,  2126,  2127,  1925,  2125,  2128,
    2129,  2130,  2131,  2132,  2133,  1926,  1927,  1928,  2134,  2135,
    1929,  2136,  2138,  2137,  2139,  2140,  2141,  2142,  2143,  2144,
    2145,  1930,  1931,  2146,  2147,  2148,  2149,  2150,  2151,  2152,
    2153,  2154,  2155,  2156,  2157,  2158,  2159,  2161,  2160,  2162,
    2163,  2164,  2165,  2166,  2167,  2168,  1932,  2169,  1933,  2170,
    2171,  1934,  2172,  1935,  2173,  2174,  2175,  2176,  1936,  2177,
    2178,  2179,  2181,  2182,  2180,  2183,  1937,  2184,  2185,  2186,
    1938,  2188,  2187,  2189,  1939,  2191,  2192,  1940,  2190,  1942,
    2193,  2194,  1941,  1943,  2195,  2196,  2197,  2198,  2199,  2201,
    2200,  2202,  2203,  2204,  1944,  2208,  2205,  2206,  2207,  2209,
    1945,  2210,  2211,  2212,  2213,  2214,  2216,  2215,  2217,  2218,
    2219,  2220,  2223,  2225,  2221,  2224,  2222,  2226,  2227,  2228,
    2229,  2230,  2233,  2234,  2235,  2236,  2237,  2238,  2239,  2240,
    2242,  2241,  2231,  2232,  1946,  2243,  2244,  2245,  2247,  2248,
    2250,  2249,  1947,  1948,  2251,  2252,  1951,  2253,  2254,  2255,
    2258,  2256,  2257,  2260,  2259,  2261,  2263,  2262,  1949,  2264,
    1950,  2265,  2266,   154,  1892,   137,  1893,  1902,  2341,  2340,
     947,   964,  2470,  2471,   779,   486,   780,     0,     0,   781,
       0,   485,   778,   135,  2536,    90,     0,   482,   483,     0,
     772,   774,   775,   773,     0,     0,  1615,     0,  1531,  1531,
    1531,     0,     0,  1531,  1531,     0,  1534,  1531,   135,  1531,
       0,    63,  1731,  2378,     0,     0,     0,  1886,     0,  1548,
       0,  1786,  1787,     0,  1794,     0,  1795,  1789,     0,  2341,
    2335,  2338,     0,     0,     0,     0,     0,   135,   981,     0,
    1599,     0,  2371,  2471,  2482,  1016,  1022,  1034,  2269,     0,
    1702,   939,  1623,  1620,     0,  2350,  2351,  2349,  1599,  1788,
    2593,     0,     0,     0,  2589,     0,  2594,     0,  1024,     0,
       0,     1,     5,     0,     0,  2033,  1919,  2138,  1715,  1713,
    1881,     0,   821,   851,     0,   826,     0,   824,  1898,  1897,
    1896,     0,   837,   836,   834,     0,   355,     0,     0,     0,
    2545,   828,   961,  2468,     0,   156,     0,     0,     0,     0,
    2474,     0,     0,     0,     0,    89,     0,     0,     0,    86,
    1049,  1049,  2536,  2538,  2540,   486,   484,     0,   776,   777,
       0,     0,  1619,  1618,  1617,     0,  1615,  1953,  1903,  1965,
       0,  1854,     0,     0,     0,  1303,     0,  1908,     0,  1981,
    1983,  1913,     0,     0,  1056,  1056,   645,     0,     0,     0,
    2005,  2006,  1860,     0,     0,     0,  1851,  1861,  1919,  2045,
    2046,     0,  1853,  2051,     0,     0,     0,     0,  2069,  1858,
       0,     0,  2106,  2108,     0,     0,  2112,  2113,  2114,  2115,
    1837,  1111,     0,   645,  1850,  1857,  2131,  1843,  2139,  2144,
    2145,     0,  2154,     0,     0,  2176,     0,  2182,  2180,  2186,
       0,     0,  2213,     0,     0,   645,  1836,  2233,  2234,  2235,
    2236,     0,  1852,  1946,  1859,     0,  2253,  1056,   645,   645,
       0,     0,     0,  2261,  2263,  2266,     0,     0,     0,  2506,
    1110,     0,  1268,     0,  1185,  1297,  1068,  1074,  1088,     0,
    1103,  1121,  1122,  1124,  1223,  1123,  1129,  1128,  1506,  1847,
    1127,  1126,  1848,  1849,  1120,  1871,  1892,  1870,     0,     0,
       0,     0,     0,     0,     0,     0,  1535,     0,     0,  1517,
    1531,    65,     0,     0,  1883,  1412,  2353,  2354,     0,    71,
    1550,  1551,  1549,   926,     0,  1784,     0,  1798,     0,     0,
       0,   976,   401,   392,     0,     0,  1697,     0,  1696,     0,
    1776,  2483,     0,     0,   952,  1553,  1600,     0,  1552,  1772,
    1770,     0,  1768,  1765,  1767,     0,  2477,  2474,  2484,  2519,
    2514,  2513,  2516,  2517,  1040,  2518,  1039,  2515,  2512,  1049,
    1035,  1037,  1038,     0,   689,     0,     0,  2291,  2292,  2119,
    2139,  2293,  2231,     0,     0,  2312,  2268,  2277,  2273,     0,
       0,   689,  1710,  1710,     0,     0,  1710,     0,  1447,  1700,
    1703,     0,  2295,  1671,   770,   769,  1710,   768,  2296,  1696,
       0,  1647,  1659,     0,  1624,  1664,     0,  2297,     0,  1699,
       0,  1710,  1710,  1710,  1447,  1710,     0,  1640,     0,     0,
       0,     0,     0,     0,   938,   940,   941,     0,  2606,   926,
    1842,  1841,  1890,  2590,  1840,  2598,  2600,  2586,  2588,  2595,
    1018,     0,  2488,     6,    57,     0,     0,  1728,  2543,  2544,
    2542,   705,     0,  1056,  1899,  2537,   138,   835,     0,   356,
     138,     0,     0,     0,     0,     0,   357,   358,   290,   839,
       0,   819,   832,     0,     0,   831,  2545,     0,     0,   991,
     993,   992,  1009,   158,   155,   136,   949,  1524,  1526,   966,
    2473,     0,     0,  2475,  2479,  1109,  1108,     0,    83,    88,
       0,     0,     0,  2445,    87,  2439,  2541,  1049,  1049,  1049,
    2533,     0,  2521,  2528,  2529,  2532,  2531,  2530,  2527,     0,
    2520,  2523,  2524,  2526,  2525,  2545,  2539,     0,   782,   782,
     782,     0,  1602,  1605,  1609,  1613,  1616,     0,     0,  1417,
    1142,  1417,  1417,  1417,  1304,     0,     0,     0,     0,     0,
       0,     0,     0,  1417,     0,  1179,  1152,     0,  1180,     0,
       0,     0,  1862,     0,     0,     0,  2506,     0,     0,     0,
       0,  1273,     0,     0,     0,  2506,     0,     0,     0,     0,
       0,  1299,  1301,  1870,  1417,     0,     0,  1417,     0,     0,
       0,     0,     0,  1061,   685,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1417,  1417,
       0,     0,  1417,  1193,  1864,     0,     0,     0,  1863,     0,
       0,     0,  1856,  1855,  1838,     0,  1196,  1198,  1197,     0,
    1417,  1417,     0,     0,     0,  1132,  1131,  1133,     0,     0,
       0,     0,     0,     0,  1107,  1106,  1105,  1104,     0,     0,
       0,  1112,     0,  1113,  1114,     0,  1115,  1116,  1117,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1134,     0,
       0,     0,  1839,  1232,     0,  1532,  1512,  1519,  1514,     0,
    1535,  1515,  1523,   370,   369,  1540,  1541,  1521,  1536,  1537,
       0,  1520,  2437,  1516,     0,  1507,     0,    64,     0,  1761,
    1754,  1759,     0,     0,     0,  1750,  1758,  1752,  1751,     0,
       0,  1760,     0,  1753,  1757,  1756,  1755,  1732,  1736,  1742,
    1733,  2388,  2403,  2404,  2400,  2405,  2423,  2406,  2410,     0,
    2402,  2394,     0,  2409,     0,  2398,  2407,     0,  2392,     0,
    2408,  2413,  2424,  2396,  2401,  2379,     0,  2386,  2390,  1413,
    1414,     0,  2352,     0,  1882,     0,     0,   999,  1799,  1800,
    1796,  2336,  2337,  1412,  2339,  2342,     0,   402,     0,     0,
     413,     0,     0,    60,    61,     0,     0,     0,   983,     0,
     982,   986,     0,     0,     0,  1556,  1546,  1555,  1338,  1771,
    1773,     0,  2388,     0,  2372,     0,  2478,     0,  2480,  2497,
    1023,  2485,  1046,  1025,  1045,     0,  1036,     0,  2271,     0,
     688,     0,   691,   693,  1575,  1576,   692,   701,     0,   690,
       0,     0,     0,  2298,     0,   697,   699,   698,  2307,   696,
       0,     0,  2282,  2303,  1706,     0,     0,  1680,  1670,     0,
     486,     0,     0,     0,     0,     0,     0,  1641,     0,     0,
     529,     0,  1663,  1448,  1704,  1705,  1710,     0,     0,  1710,
       0,  1684,  1676,  1700,     0,  1710,  1636,     0,     0,  1628,
    1633,  1629,     0,  1635,  1634,  1637,  1625,  1626,  1706,  1652,
    1677,  1700,  1683,  1682,  1681,  1662,  1669,     0,  1651,  1658,
       0,  1667,  1700,  1700,  1710,  1710,   945,   946,     0,     0,
    1621,  1341,     0,     0,  2587,  2601,  2585,  2596,  2597,  2584,
    1019,  2489,  1017,  2490,     0,     7,     4,  1727,  1717,  1718,
    1719,  1720,  1721,  1716,  1714,  1729,  1730,   706,   705,   477,
     480,   479,     0,     0,  1901,     0,   827,     0,   344,   825,
       0,     0,   322,   301,   322,   359,     0,     0,   705,   842,
       0,     0,   829,   962,     0,     0,   390,  1009,   995,  1011,
       0,   159,   161,   951,   950,     0,   948,   974,   973,   971,
       0,   972,   970,   965,   967,   968,  2472,  2476,   487,   705,
     332,     0,   293,     0,     0,     0,     0,     0,   486,     0,
       0,  2522,    72,   783,     0,     0,     0,  1607,  1528,  1338,
    1530,  1881,     0,     0,     0,  1611,     0,     0,  1418,  1417,
       0,  1282,     0,     0,     0,     0,  1305,     0,     0,     0,
       0,     0,     0,     0,  1253,     0,  1282,  1057,     0,   646,
    1203,     0,     0,     0,     0,     0,     0,  1388,  1389,  1390,
    1391,  1399,  1392,  1393,  1394,  1401,  1406,  1395,  1396,  1402,
    1403,  1404,  1397,  1405,  1400,  1398,  1407,     0,  1387,     0,
       0,  1411,  1408,  1410,  1409,     0,  1274,  1266,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1417,
       0,     0,     0,  1417,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1215,     0,     0,     0,     0,     0,  1417,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1175,     0,
    1873,  1872,     0,     0,     0,   738,     0,  1136,     0,  1135,
    1350,     0,  2491,  2507,     0,  2298,  1269,  1271,     0,  1059,
    1058,  1060,  1071,  1064,  1069,  1062,  1066,     0,  1118,  1960,
    1072,     0,     0,  1100,  2506,  1426,  1101,  1086,  1091,  1092,
       0,  1089,  1090,     0,  1094,     0,  1093,  1097,  1098,  1099,
    1102,     0,     0,     0,     0,  1125,  1130,  1298,  1049,  1874,
       0,  1509,  1522,  1698,  1538,  1577,     0,   928,     0,     0,
      66,    68,  1747,  1744,  1743,  1745,  1749,  1748,  1746,     0,
    1762,  2389,  2387,  2421,  2420,  2425,     0,  2422,  2418,  2411,
    2446,  2415,     0,  2446,  2417,  2416,  2446,  2412,  2419,  2446,
    2384,     0,  1416,  2041,  2123,     0,  1419,  2356,  1543,  2605,
       0,  1797,     0,     0,     0,   977,     0,  1049,   400,   399,
     398,   397,     0,   415,   395,   403,    62,     0,     0,  1779,
    1483,  1484,  1480,  1478,  1479,  1778,  1481,  1482,     0,     0,
    1777,     0,     0,     0,     0,   954,  1554,     0,     0,  1527,
    1339,  1774,  1769,  1766,  2387,     0,  2384,  2481,  2499,  2498,
    2486,  1049,  1438,  1050,  1050,  1870,     0,     0,     0,  2314,
       0,  2309,  2308,     0,     0,     0,  2327,  2310,     0,     0,
    2276,  2315,  2316,  2319,     0,     0,     0,     0,     0,  2313,
    2231,  2278,  2279,  2284,  2274,     0,     0,  1708,  1711,  1712,
       0,     0,  1692,  1686,  1685,  1674,  1687,  1675,  1695,  1694,
    1693,  1649,  1648,  1458,  1459,  1457,  1451,  1452,  1456,  1455,
    1644,  1701,  1691,  1689,  1672,  1710,  1690,  1688,  1630,  1631,
    1632,     0,  1447,     0,  1708,  1678,  1679,  1710,  1700,     0,
    1710,  1710,  1666,  1668,   943,   942,  1359,  1358,     0,  1312,
       0,  1314,  1311,  1310,  1309,     0,  1358,  2591,  2599,  2603,
       0,  1447,  2496,  2494,   478,  1577,  1577,     0,  1900,     0,
       0,     0,     0,     0,     0,     0,   139,   148,     0,     0,
     299,   300,  1577,   298,   345,   346,   349,   350,   351,     0,
       0,     0,     0,     0,     0,     0,     0,    92,   352,  1577,
    1577,   295,   323,   324,   327,   328,   329,   330,   331,   291,
       0,   296,     0,   840,   924,  1577,   924,     0,  1577,  1577,
     924,  1577,     0,     0,  1577,  1577,     0,     0,  1577,     0,
       0,   924,     0,  1577,     0,   911,     0,     0,  1577,  1577,
    1577,  1577,  1577,   924,     0,     0,  1577,   390,  1577,     0,
       0,   934,     0,     0,  1577,  1577,  1577,  1577,     0,     0,
    1577,     0,  1577,   858,   910,   490,   516,   517,   820,   857,
     859,   871,   386,     0,   889,   913,   914,   912,     0,   844,
     846,  2546,  2547,  2548,   998,   990,   997,   994,  1009,  1007,
     996,   765,   764,     0,  1010,   157,     0,  1525,   975,   969,
      84,   705,  1577,  1577,  1577,  1577,   297,   333,   334,   337,
     338,   339,   340,   343,   341,   342,     0,     0,   309,     0,
       0,  2440,     0,  2579,     0,     0,     0,   137,   488,     0,
       0,   784,     0,     0,     0,     0,     0,  1603,     0,  1884,
    1610,  1341,  1614,  1613,     0,  1199,     0,  1246,     0,  1248,
    1249,  1250,     0,     0,     0,     0,     0,  1200,     0,  1150,
    1201,  1202,     0,     0,     0,     0,  1252,     0,   647,     0,
       0,  1153,  1154,  1147,  1139,     0,     0,  1225,     0,     0,
    1155,     0,     0,     0,     0,     0,  1226,  1300,     0,  1302,
    1874,     0,  1258,  1207,  1160,     0,  1256,     0,  1161,  1227,
    1228,  1229,  1209,  1210,     0,  1231,     0,  1211,     0,     0,
    1214,     0,     0,  1163,  1262,  1260,     0,     0,     0,     0,
    1264,  1165,     0,     0,     0,  1164,     0,     0,     0,     0,
       0,     0,     0,  1167,     0,  1148,  1261,  1263,  1217,     0,
       0,     0,     0,     0,  1176,     0,  2500,  1349,  2508,  1350,
       0,     0,  2502,  2492,  2497,  2505,  1140,     0,     0,  1875,
    1065,  1070,  1063,  1067,  2506,     0,     0,     0,     0,  1084,
    1083,     0,     0,     0,  2506,  1426,  1087,     0,     0,  1242,
    1243,  1295,     0,  1513,  1510,  1539,  1578,     0,  2438,   930,
     929,  1518,   928,    69,     0,  1741,  1763,  1734,  2414,     0,
    2395,     0,  2399,  2393,  2397,     0,     0,  2385,     0,  2391,
    2366,  2360,  2367,  2369,  2363,  2368,  2370,  2361,  2362,  2357,
    2364,  1420,  1449,     0,  1000,  1002,  1003,  1001,  1009,     0,
       0,  2345,  2346,  2344,  2343,   405,     0,  1469,  1470,  1468,
    1471,   414,  1472,     0,   426,     0,     0,     0,  1783,  1782,
    1781,  1780,     0,   984,   987,   988,   959,   958,   960,   953,
     955,   956,   470,  1560,     0,     0,     0,  1566,  1547,  1557,
       0,     0,     0,     0,     0,     0,     0,  1044,  1341,  1498,
    1041,  1029,  1449,  1439,  1028,  1051,  1047,     0,  2270,  2272,
    2333,  2334,  2331,  2332,  2330,  2302,   704,   703,   702,   700,
       0,     0,     0,     0,  2321,  2322,     0,     0,  2299,  2300,
    2301,     0,  2305,  2281,  2282,  2283,     0,  2304,  1707,     0,
    1653,     0,  1673,     0,     0,  1646,     0,  1665,  1627,  1655,
    1645,  1419,  1700,  1642,  1643,     0,  1358,  1341,     0,     0,
    1335,  1360,     0,  1360,  1341,  1341,     0,  1341,  1338,  1355,
       0,     0,  2602,  1440,  2495,     0,     0,   823,   142,   145,
     143,     0,   144,     0,     0,   354,   353,     0,  1698,   347,
      96,    95,    97,    98,  1466,  1467,  1463,  1464,  1462,  1465,
     100,    99,    94,   838,     0,     0,     0,  1698,   325,   302,
     303,   306,   307,   308,     0,   925,   813,   978,   893,     0,
     568,   813,   761,   766,   766,   891,     0,     0,   978,     0,
       0,     0,     0,     0,   978,     0,     0,     0,  1577,     0,
     904,   853,     0,     0,     0,     0,     0,   905,     0,     0,
     854,  1577,     0,     0,     0,     0,     0,     0,   978,     0,
       0,   388,     0,   978,   390,   937,   936,   935,     0,   978,
     978,     0,     0,     0,     0,   522,   523,   521,     0,     0,
     514,   491,   705,   855,   387,   856,   567,     0,   931,   564,
     570,  1877,     0,     0,     0,   106,  2550,     0,  1379,   160,
       0,     0,     0,     0,  1698,   335,     0,     0,  1577,   292,
     310,   311,   314,   315,   316,   317,   318,   321,   319,   320,
       0,  2441,  2443,     0,     0,   286,   285,     0,   101,  2573,
       0,     0,   567,    73,   386,   489,   492,   806,   808,   807,
     798,   797,    74,    77,    80,  1529,  1613,  1341,  1419,  1882,
    1419,     0,  1612,     0,     0,  1247,  1283,     0,  1306,     0,
    1144,   659,   659,   643,  1291,   639,   659,  1287,   643,  1289,
       0,     0,     0,     0,     0,  1254,  1251,     0,     0,     0,
       0,     0,  1277,     0,     0,     0,  1149,     0,  1237,  1259,
    1257,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1265,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   727,   733,   736,
     737,   739,   731,     0,  1219,  1137,  1049,  2509,  2511,  1020,
       0,  2501,  2503,   815,  1270,     0,  1081,  1077,     0,  1075,
    1425,  1096,  1095,     0,     0,     0,  1085,  1050,  1233,  1049,
       0,  1296,  1876,   915,   368,   528,  1508,    67,  1737,  2450,
       0,  2449,     0,  2433,  2436,  1881,     0,     0,     0,     0,
       0,  2355,  1450,  1587,     0,  1009,  1013,  1891,  1790,  2347,
    2348,     0,   406,   407,   409,  1050,   423,   401,     0,   393,
     396,     0,   405,     0,   957,  1034,     0,  1579,  1564,  1571,
    1565,     0,     0,     0,  1563,  1866,  1865,  1872,  2484,     0,
    1385,     0,     0,     0,     0,     0,  2487,  1419,  1419,  1492,
       0,     0,  1026,  1031,  1027,  1030,     0,  1048,  1055,  1054,
    1867,  1874,  2311,     0,     0,     0,     0,  2326,  2320,  2317,
    2318,     0,  2280,  2286,  2285,  2288,  2290,  1476,  1477,  1475,
    1473,  1474,  1709,  1447,  1661,  1660,  1454,  1453,  1638,  1447,
    1657,  1710,     0,     0,  2491,  1353,     0,  1337,  1336,  1361,
       0,  1341,  1360,  1360,     0,  1317,  1316,  1591,  1594,     0,
    1315,  1412,  1343,  1034,  2592,  2604,     0,   527,   526,   147,
     146,   152,   153,   360,   371,   372,   348,    93,   361,   362,
     326,     0,   304,   841,   569,   814,   876,     0,     0,     0,
     563,   813,   766,   782,   767,   813,   813,   920,   921,     0,
       0,   501,   498,   895,   510,   874,   865,   875,   886,   888,
       0,   500,   524,     0,     0,   512,     0,   860,   902,   903,
     928,   495,     0,     0,   543,   544,   542,   518,   525,   922,
     923,   496,   497,   897,     0,  1434,  1436,  1444,   503,   502,
       0,   499,     0,   873,   908,   881,     0,   535,   533,   530,
     532,   531,   534,   536,   537,   538,   539,   540,   541,   513,
     505,   504,   507,   506,   509,   508,   511,   870,     0,   924,
     924,   890,     0,   551,   552,   554,   555,  1880,     0,   933,
     892,     0,   556,   565,   557,     0,     0,     0,   116,     0,
       0,   843,     0,   109,   107,   118,     0,     0,     0,  1382,
       0,  1383,  1380,  1381,   367,   366,   365,   364,   336,     0,
       0,     0,  1698,   312,  2442,     0,     0,  2580,   289,   287,
     288,     0,     0,   162,   549,   550,   548,   547,     0,   375,
       0,   373,     0,   385,     0,  1801,   705,   493,     0,     0,
       0,     0,  1419,  1438,  1885,  1606,     0,  1177,  1307,     0,
       0,   660,  1284,   713,     0,  1293,     0,  1294,   641,   640,
    1286,  1288,  1292,  1290,  1143,  1151,  1224,  1146,  1145,     0,
       0,     0,  1183,  1205,     0,  1184,     0,  1275,     0,     0,
    1157,     0,  1159,     0,     0,  1239,  1208,  1230,  1186,  1212,
       0,  1162,  1138,     0,  1187,     0,  1192,  1190,     0,  1166,
       0,     0,  1173,     0,  1171,     0,  1172,     0,  1174,  1216,
    1218,     0,     0,   738,   724,   725,   726,     0,   728,   730,
     732,     0,     0,  1351,  2510,  1021,     0,     0,  1272,  1073,
       0,  1082,  1079,     0,  1076,  1051,  1244,  1234,  1511,   917,
     916,  1739,     0,  1735,  2447,     0,  2458,     0,     0,     0,
       0,     0,     0,  1421,     0,  1544,  1004,  1009,  1013,     0,
    1005,  1801,   410,     0,     0,     0,   430,     0,   428,   404,
       0,   985,  1049,  1561,  1573,     0,  1581,     0,     0,  1558,
    1568,     0,     0,     0,  1567,   390,     0,     0,  2377,     0,
       0,     0,  1449,  1427,     0,     0,  1504,     0,  1499,  1042,
       0,  1053,  1052,     0,  2329,  2328,  2324,  2323,  2325,  2306,
       0,     0,  1654,  1656,  1650,   944,  2497,  1412,  1345,  1341,
    1313,  1341,  1324,     0,     0,  1341,  1320,  1318,  1322,     0,
    1419,     0,  1377,  1049,  1869,  1441,  1444,   305,   878,     0,
     813,   762,   782,   763,     0,   782,   782,     0,     0,   864,
       0,   966,     0,   869,   701,   519,   901,   900,     0,   520,
       0,   862,     0,  1445,  1446,  1437,   389,   861,   883,   867,
    1762,   894,   567,   932,   743,   635,   584,   575,   659,   578,
     577,   621,   643,   589,   639,   637,   607,   639,   639,   614,
     613,   631,   617,   597,   713,   713,   596,   634,   713,   618,
     616,   620,     0,   622,   639,   627,   615,   619,   636,   612,
     609,   633,   659,   643,   643,   593,   632,   713,     0,   625,
     659,   663,   595,   713,   720,     0,     0,   659,   661,  1879,
     117,   105,     0,     0,   845,   847,     0,     0,   848,  2552,
       0,  2554,     0,  1012,     0,     0,   294,   363,   313,  2444,
       0,   173,  1049,     0,     0,   163,   165,   166,     0,     0,
       0,   488,  1803,  1802,   374,   473,   494,     0,     0,     0,
    1613,  1608,  1460,     0,  1308,     0,     0,     0,     0,   707,
     718,   716,   710,     0,   714,   715,  1285,     0,     0,  1255,
       0,     0,     0,  1278,     0,     0,     0,     0,     0,     0,
       0,  1141,     0,  1235,     0,     0,     0,     0,     0,     0,
    1170,  1168,  1169,   722,  1221,     0,   735,   729,   727,   734,
       0,  1449,  2491,   816,  1078,     0,  1245,   919,   918,     0,
       0,  2448,     0,  2383,  2435,  2434,  2451,  2451,  2451,  1586,
    1585,     0,  1584,  1588,  1006,  1014,     0,   408,   411,     0,
     403,     0,   427,     0,   394,   471,     0,     0,     0,  1582,
    1570,  2488,  1559,  1562,  1874,  1340,  1386,     0,  2374,  2375,
    2373,  1033,     0,  1422,  1503,  1500,     0,  1493,  1495,  1497,
       0,  1868,  2287,  2289,  1346,  1344,  1354,     0,  1309,  1341,
    1341,     0,  1309,     0,     0,     0,  1593,  1438,  1595,  1342,
    1374,  1356,     0,  1443,     0,     0,   877,     0,     0,     0,
       0,     0,     0,   907,     0,   931,   866,   887,   909,     0,
     663,   978,  1435,   882,   884,   954,     0,   553,     0,   747,
     583,   576,   594,   592,   648,   638,     0,   648,   648,   603,
     621,   598,     0,   713,   611,   602,   623,   626,   628,   630,
     648,     0,   713,   591,   590,   600,   587,   648,   671,     0,
       0,     0,     0,   667,     0,   741,     0,     0,   571,   664,
     666,     0,   674,     0,   624,   713,   580,   721,   720,   582,
     713,   720,   648,     0,   662,   648,     0,   103,   108,   119,
     120,   833,  2551,     0,  2549,     0,  1008,  1384,     0,     0,
     176,   174,   175,     0,   169,   171,   166,  2567,     0,  2574,
       0,     0,  2572,   376,   378,   386,   474,     0,     0,  1444,
     811,     0,     0,     0,  1604,  1178,   657,   655,   658,   656,
     709,   708,   712,     0,   711,   720,   644,     0,  1181,  1182,
    1206,     0,  1276,  1267,  1204,     0,  1158,  1236,     0,     0,
    1213,  1188,  1191,  1189,  1194,  1195,     0,  1220,     0,  1041,
    1041,   545,  2504,  1080,  1740,  1738,     0,     0,  2456,  2456,
    2456,  2365,     0,     0,     0,  1049,   416,     0,   433,   432,
     429,  1449,  1572,  1574,  1580,  1569,  2376,     0,  1423,  1438,
     694,  1496,     0,  1043,     0,  1325,     0,  1329,  1334,  1330,
       0,  1321,  1319,     0,  1460,  1378,     0,  1449,  1444,   880,
       0,   566,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   906,  1844,   896,   390,   898,   863,     0,   868,
     515,     0,   746,     0,   751,   652,   653,   654,   604,   649,
     651,     0,   606,   574,   599,   629,   605,     0,   601,   588,
     677,   678,   680,   679,   676,   686,   669,   687,     0,     0,
     681,   682,   683,   665,   673,   675,   668,   579,   581,   585,
     586,   572,     0,   573,  1878,   110,   849,   225,  2553,  2561,
       0,  2563,  2556,    91,  2571,  2581,   173,     0,     0,   114,
       0,   164,   701,   167,  2488,  1801,     0,   381,   785,     0,
     810,     0,   787,   789,  1461,   719,   717,     0,  1279,  1444,
       0,  1238,  1240,   723,     0,  1352,   546,  2459,     0,     0,
    2455,  2453,     0,  2454,  2452,  2426,     0,  2381,  2382,  2380,
    1583,     0,     0,     0,   424,     0,     0,   458,   472,  1431,
    1444,     0,  1449,     0,  1501,  1494,  1347,     0,     0,     0,
       0,     0,  1592,  1366,  1367,     0,     0,  1372,  1376,  1357,
    1442,   879,     0,     0,   785,     0,     0,  1846,  1845,   872,
     931,     0,   744,     0,   748,   749,   750,     0,   742,   650,
       0,   817,     0,   670,   672,     0,   112,   251,     0,   237,
     223,     0,     0,     0,   227,   121,   124,   122,     0,   123,
     129,     0,   130,   131,   132,   133,   134,   125,   249,   250,
     128,   126,   127,     0,  1894,     0,  1895,  1024,     0,     0,
    2559,     0,  2555,  2484,   140,   170,     0,     0,   106,   115,
    2575,   684,   379,   377,     0,  2484,     0,  1577,    75,   786,
     802,   801,   791,  1444,     0,     0,    78,   788,   804,   795,
      81,   790,   803,   793,   642,     0,  1281,  1156,  1222,  2432,
    2431,  2430,  2427,     0,     0,     0,     0,     0,     0,  2457,
    2461,     0,  1338,  1050,     0,   417,     0,   420,   422,   436,
       0,  1577,     0,     0,  1577,  1577,  1577,  1577,   451,   459,
     461,     0,  1432,  1433,     0,  1428,  1430,  1424,  1485,   695,
    1804,  2491,  1326,     0,  1331,     0,  1323,  1362,  1362,  1373,
       0,   785,   558,   787,   789,   899,     0,   745,     0,     0,
     713,     0,   713,   111,     0,   104,     0,     0,   236,   239,
       0,     0,   242,   232,   231,   233,     0,   226,   225,   225,
     279,   230,   276,   275,   268,  2562,     0,  2488,     0,     0,
       0,  2557,  2582,   172,  1049,   118,     0,   383,   382,   800,
       0,   915,   792,   809,   812,     0,   915,   796,   915,   794,
    1444,  2428,  2462,  2465,  2463,  2464,  2466,  2460,  1589,  1597,
       0,  1791,     0,   425,   418,     0,     0,   434,     0,  1577,
    1577,     0,     0,     0,     0,     0,   431,   460,  1577,  1444,
       0,  1032,     0,  1812,  1348,     0,     0,     0,  1370,  1368,
     562,   561,   559,   560,     0,   757,     0,   756,     0,   753,
     752,   608,   818,   610,   113,   252,   263,   266,   258,   238,
       0,     0,     0,   228,   225,     0,   212,   210,   211,   217,
     218,   219,   220,   221,   222,   213,   216,   214,   215,   225,
       0,   181,     0,     0,  2560,  2558,     0,  2564,     0,   150,
     149,   141,     0,   225,  2568,     0,  2576,  2488,   799,    76,
     805,    79,    82,  1280,     0,     0,   694,   412,   424,   421,
     444,   437,   440,     0,   469,     0,     0,   465,   466,   464,
     462,   455,     0,   453,     0,  1429,  1486,     0,     0,     0,
       0,  1805,  1807,     0,  1502,  1328,  1333,     0,  1363,     0,
       0,     0,   885,   759,   760,   758,     0,     0,     0,     0,
     225,   259,     0,   234,     0,   243,     0,     0,   179,   282,
     280,   177,   270,   270,  2565,  2566,   151,  2583,     0,   120,
     140,   384,  1596,  1598,  1792,   419,   444,     0,   442,     0,
     438,   435,   439,   467,   468,     0,   452,     0,   463,     0,
       0,     0,     0,     0,  1806,     0,     0,  1813,  1815,  1365,
    1364,  1379,     0,     0,     0,   260,   266,   256,   264,   225,
       0,     0,   224,     0,   278,   180,     0,     0,     0,   225,
       0,   269,   271,   273,     0,   102,  2577,  1818,   441,     0,
     449,   445,   447,   450,   458,   457,   454,  1488,  1810,  1811,
       0,  1808,     0,     0,  1814,     0,     0,   755,   754,     0,
     257,     0,     0,   255,   235,   240,   225,   283,   225,   191,
     190,     0,   183,   205,   277,     0,   182,  2569,   225,     0,
    1804,   443,     0,     0,   456,  1491,     0,  1489,  1809,  1817,
    1816,  1371,  1369,   261,     0,   225,     0,   225,     0,   225,
       0,     0,     0,     0,     0,   178,   225,  2578,     0,  1812,
     448,   446,  1487,     0,     0,   253,   225,   241,   246,     0,
       0,   186,   206,   207,     0,   188,  2570,     0,  1820,  1490,
     225,   225,   242,   245,   284,   281,     0,   208,   184,   198,
     185,   196,   195,     0,  1819,     0,  1824,   225,   225,   247,
     204,   202,   225,   192,   200,   194,     0,   201,     0,   199,
       0,   189,     0,     0,  1831,     0,   187,   203,   209,   197,
    1822,  1823,  1821,  1826,     0,     0,  1828,  1829,     0,  1793,
     193,  1830,  1825,     0,  1832,  1834,     0,  1827,     0,  1049,
    1833,     0,  1050,  1835
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    51,   603,  1436,    52,    53,    54,    55,    56,  1293,
      57,   811,  1217,  1710,  1711,    58,   548,    59,  2068,  2978,
    4001,  2979,  4006,  2980,  4008,  1499,   514,   515,  1936,  1937,
    1020,  2962,  2931,  3715,  2935,  3826,  3965,  3868,  2019,  3278,
    3716,  3717,  3835,   543,  2066,  1456,  3992,  1916,  4101,  1917,
      60,   635,   994,  1480,  1481,  3294,  3295,  3551,  3296,  3543,
    3544,  3545,  3546,  4229,  4074,  4171,  4230,  4302,  4336,  4343,
    4271,  4352,  4353,  4354,  4341,  4360,  4355,  4272,  4338,  4358,
    4075,  4076,  3972,  4077,  3838,  4078,  3976,  4079,  3841,  4080,
    4081,  4082,  4083,  4221,  4084,  3971,  4264,  4071,  4072,  4223,
    4318,  4333,  4085,  3848,  3966,  4158,  3849,  3967,  4216,  4067,
    4217,  4259,  4314,  4068,  4159,  4262,  4162,  4086,  4092,  4231,
    4087,  4093,  4088,  3853,  3983,  4091,  3981,  4090,  4227,  4226,
    4298,  2547,  2961,   622,   623,   645,  2058,   624,  1009,   967,
    1458,  1949,  1950,  2429,  2430,  2529,  2530,  2531,  1941,  1942,
    1943,  2046,  2047,  2048,  1923,  1924,  1925,  1462,  1920,  1921,
     625,   968,   978,  1944,  1945,  1946,  2535,  2050,  2051,  2052,
    2053,  1205,  1206,  2813,  2553,  2971,  3734,  3304,  3875,  4107,
    2972,  2973,  2504,  2880,  2029,    61,   563,   833,  1290,  2285,
    1291,  2287,  2701,  2702,  2703,  1758,  1759,  3616,  1763,  2284,
    3774,  4118,  3916,  3917,  2705,  3915,  2709,  3107,  3108,  3391,
    3618,  3777,  4123,  4026,  4191,  4121,  4187,  4122,  4189,  4283,
    4241,  4242,  4036,  4132,  4133,  4195,  4244,  3928,  3929,  3930,
    2307,  2715,  3621,  3557,  2040,  1448,  1449,   516,   517,   518,
     642,  2554,  2004,  2555,  2556,  2908,  2006,  2007,  2674,  1369,
    2899,  2867,  3599,  2968,  2912,  2913,  2914,  2915,  2916,  2922,
    2830,  2439,  2440,  2509,  2925,  3732,  3476,  3491,  3262,  3263,
    3264,  3265,  3266,  3267,  3268,  2997,  2998,  2995,  1068,  3678,
    3679,  3680,  2991,  2992,  3525,  3508,  3509,  3510,  3733,   774,
    3696,  3323,  1336,  1337,  3784,  1347,  1348,  2337,  1811,  2338,
    1452,  3324,  3325,  3326,  3519,  3052,  3596,  3058,  3059,  3060,
    2637,  2638,  2639,  2640,  2641,  2183,  3511,  2924,  3469,  3671,
    3674,  3818,  4059,  2441,  2831,  2442,  2835,   926,   519,  3512,
     521,   522,   523,  2443,  2444,  1513,  1514,  3878,  3886,  3890,
    3879,  3891,  3887,  3880,  3881,  3882,  3893,  3889,  2560,  3558,
    3559,  2824,  3068,  3820,    62,  1468,   961,   970,   966,   986,
     630,  1469,   979,  2020,  2515,  3531,   612,  2008,  3461,  3191,
    3465,  2009,  2846,  2010,  3178,  3446,  2011,  3208,  3463,  3668,
    2847,  2848,  2012,  2013,  2014,  3190,  3200,  3810,  3078,  3079,
    3080,  2445,   115,  2231,  2920,  2488,    63,   934,   935,   936,
      64,   637,  1486,    65,  1303,  2299,  2300,  2301,    66,   987,
      67,    68,   638,  1493,  1494,  1495,    69,  1286,   122,    70,
     843,  1298,  1300,  1301,    71,   634,   988,   989,   990,   991,
    2025,    72,  1750,  2264,  2265,  2266,  2267,  1477,  2517,  1478,
    1479,  2034,  3100,    73,    74,   600,  2191,   575,   858,   576,
     577,  1802,  2320,  3600,   869,   870,   871,  2742,  1323,  1324,
    1325,  2325,  2747,  1065,   775,   776,   777,   778,  1159,  1160,
    3513,   779,  1169,  1671,   780,   781,   782,   783,   784,   785,
    1698,  3024,  3025,  3343,  2218,  2219,  2220,   786,  2105,  3009,
    2119,   787,  1152,  1656,  1587,  3335,  3017,  3581,  3748,  1530,
    2088,  2590,  2670,  2185,  1090,  1091,  1055,  2095,  1536,  1889,
    1890,  1891,  1892,  1893,  3434,  3433,  3435,  3787,  3636,  3789,
    3640,  2385,  1789,  1790,  1894,  1895,  2783,  3634,  3941,  2186,
    2187,  2188,  3361,  2784,  3159,  2802,  2803,  3647,  2376,  1896,
    2790,  4048,  3796,  3797,  4151,  4150,  3798,  3645,  3646,  3439,
    3440,  2940,  2941,  2942,  2729,  1577,  1578,  1585,  1271,  1272,
    1531,  2262,  2690,  3629,  3781,  2209,  3413,  3779,  3935,  2017,
    2875,  2876,  2322,  2323,  2806,  3175,  3205,  1372,  3601,  2692,
    1856,  1857,  3564,  4342,  2642,  2772,  2814,  2282,  1777,  4041,
    4199,  4286,  4287,  3136,  3137,  3417,  3418,  2324,  2739,  3138,
    3630,  3940,    75,   527,    76,  1708,  2224,  2673,  1214,  2236,
     997,  1305,  1517,  1518,   799,   540,  1207,  1208,  1209,    77,
     549,  2263,    78,   570,  1787,   823,   847,  1306,  1307,  2308,
    2716,  2723,  2309,  2728,  3401,  2718,  3113,  3114,  2226,  2227,
    2719,  3116,  3398,  3381,  3382,  3095,  3613,    79,   588,  3170,
    2797,  2798,  4018,  4019,   848,    80,   526,  1042,  2568,  1523,
    2076,  1043,  1044,  2079,   665,   666,    81,   937,   583,  1395,
    1396,  1397,  1872,    82,   580,   927,  2773,  2779,  1851,   839,
    1210,  1376,   930,  1377,  1837,  2360,  1357,    83,   957,   956,
    1443,    84,   608,  1444,    85,   812,  1237,  1720,  2678,  3083,
    3369,  1238,  1239,  2237,    86,   571,   853,   854,  1310,  1792,
      87,   565,   840,  1780,  1769,    88,   553,    89,    90,   827,
    3101,  4116,  4237,   557,  1752,  1280,  3305,  4043,  4141,  4142,
    4144,  4207,  4208,  4280,  4346,  4372,  4364,  4375,  4376,  4379,
    4384,  4385,   789,   943,   790,  3662,   791,   792,   793,  2724,
    2725,  3176,   794,  2726,   795,  2825,   998,  1520,   546,   494,
     619,   944,  2698,   797,  3855,   964,  1013,   496,   497,    91,
     579,   873,  1327,   886,  1352,  1342,  1351,  1831,  2354,  1834,
    2355,  2356,  3150,  2764,  3151,  2765,   931,  1827,  1328,  2766,
    1835,  1329,  1820,  1821,  1822,  1823,  2758,  1817,  2335,    92,
     560,   830,   500,  1284,  1285,  2273,    93,   587,    94,  1273,
    1746,  1747,  2259,  2689,  2260,    95,   855,  1314,    96,   813,
    1265,  2248,  1266,  1722,  1267,  1268,  1736,  1730,  1739,  1733,
    3903,  3764,  3765,  2686,  1213,  1014,  1015,  2240,  2680,  2681,
    3608,  3767,  3373,  3909,  3910,    97,   123,   503,   640,  1004,
    1317,    98,    99,   100,   101,  1320,  1431,  2316,  1432,  2192,
    1433,  1434,  1903,  1800,  1652,  1653,  3066,  1149,  1150,  2195,
    2646,  2647,   872,   649,  1030,  1022,   116,   117,   118,   652,
     653,   119,   984,   985,  2516,  2937,  3280,  3534,  3535,  3721,
    3863,  3859,  3860,  3857,  3862,  1024,  3728,  4178,  4306,  1025,
    1026,  2963,  3730,  3996,  4180,  4278,  1027,  2544,  3291,  3864,
    4103,   102,   945,   597,  1429,  1424,  1426,  1899,  2392,   103,
     104
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -3759
static const int yypact[] =
{
    2662,  2425,   835, -3759,  -107,   736, 46374,   555,   555,   461,
    2093, -3759, -3759, -3759, -3759, -3759,  2985, -3759, 46374,   835,
   -3759, 23670, -3759, -3759,   789,   170,   103,   369,   835, -3759,
   46374, -3759,   743,  -164,   835, -3759, -3759, -3759,   461, 46374,
   -3759,   774, -3759,   887,   927,  1098,   375, -3759, 46374,  2328,
    -167,  1505,  1368, -3759, -3759,  1138, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, 24302, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759,  1393, 46374,  1418, 46374, -3759,
    1397, 46374, 38814, 46374, -3759,  1069,  1515, -3759, -3759,  1580,
   -3759, -3759,   555,   461, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759,  1111, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759,  1756, -3759,  1594, -3759,  1623, 38814, -3759,
   46374, -3759, -3759, -3759,  1060, -3759,  1328, -3759,  1340,  1690,
   -3759, -3759,  1854,  1344,  1742,  1769,  1300, 11454,  1788,  1788,
    1788, 46374,  1813,  1788,  1788, 46374, -3759,  1788, -3759,  1788,
     555, -3759, -3759, -3759, 46374,  1671,   176,   -84, 38814,  1538,
   46374, -3759, -3759, 11454, -3759,  1821, -3759, -3759,  1889,  1897,
   -3759, -3759,   555,  2043,  1913,  1753, 46374, -3759, -3759,   555,
    1067,  1165, -3759,   171, -3759, -3759, -3759,  2478, -3759, 26198,
    6054,  -129, -3759, -3759, 46374, -3759, -3759, -3759,  1852, -3759,
   -3759,   144,   144,   144, -3759,   144, -3759,   144, -3759,  -167,
    1491, -3759, -3759,  1488, 46374,   782,  2011,  1453, -3759, -3759,
    1531,   727, -3759,  1584, 35664, -3759, 46374, -3759, -3759, -3759,
   -3759,  1829, -3759, -3759, -3759,  2173, -3759, 35664, 23670, 46374,
    1682, -3759, -3759, -3759, 23670,  1575, 46374, 23670, 23670,   988,
      14,  1579, 46374, 46374,  2036, -3759,  2221, 35664,  1787, -3759,
     445,  1471,  1580,  2255, -3759,  1594, -3759, 46374, -3759, -3759,
   46374, 46374, -3759, -3759, -3759, 40704,  1300,  1608,  1627,  1638,
   16011, -3759,  1642,  1691,  1704, 11454,  1708,  1717,  1722,  1736,
    1741,  1747,  1749,  1759,  1765,  1765,  1767,  1775,  1778,  1792,
    -191,  1799, -3759,  1801,  1814,  1844, -3759, -3759,  1850,  1858,
    1879,  1893, -3759,  1896,  1902,  1905, 12105,  1914,  1921, -3759,
   20502,  1923,  1935,  1942,  1947,  1949,  1957,  1967,  1972,  1977,
   -3759, -3759, 11454,  1767, -3759, -3759,  1985, -3759,  1994,  1998,
    2007,  2026,  2044,  2054,  2057,  2069,  2075,  2090,  2099,  2101,
    2103,  2105,  2107,  2111,  2116,  1767, -3759,  1115,  2118,  2124,
    1331,  2131, -3759,  2138, -3759,   207,  2143,  1765,  1767,  1767,
    2149,  2159,  2169,  2172,  2174,  2177, 16011, 16011, 16011, 11454,
   -3759, 46374, -3759, 46374, -3759,  1789,  3270, -3759,  2244, 16011,
     202, -3759, -3759, -3759, -3759, -3759, -3759, -3759,  1629,  1763,
   -3759, -3759, -3759, -3759, -3759, -3759,  2180,  1648,  2230, 46374,
   46374, 46374,  1960, 46374, 46374, 38814,   981, 46374, 35664, -3759,
    1788,  1798,  3132,  4628, -3759,   126, -3759, -3759, 46374, -3759,
   -3759, -3759, -3759,  2426,  2304,  1789,  2783,   236,  2808,  2811,
   23670, -3759,  1656, -3759,  -176,  2577, -3759,  2829, -3759,  2584,
   -3759, -3759, 35664, 23670, -3759, -3759, -3759, 21134, -3759, -3759,
   -3759,  2816, -3759,  2224, -3759,  5137,  2402,    14,  2299, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,  2257,
    2478, -3759, -3759, 41334,   137,  2422,  2252,   367,   489, 33144,
    1102,   505,   943, 26831, 33774,  2261, -3759, -3759, -3759,   931,
    2752, -3759,   -55,   -55,  2274,  1848,   -55, 36294,  2654,   189,
   -3759,   133, -3759,  2733, -3759, -3759,   -55, -3759, -3759,  2401,
    2384, -3759, -3759,   411,  2202, -3759,  2766, -3759,    66, -3759,
    2411,   -55,   -55,   -55,  2654,   -55,   189, -3759,  2658,  2784,
     513,   795,   630,  2855, -3759,  2296, -3759, 23670, -3759,  2426,
   -3759, -3759, -3759,  2298, -3759,  2588,  2419, -3759, -3759,    76,
   -3759,  2312,    -4,  2810, -3759, 38814,  2129, 36924, -3759, -3759,
   -3759,  2843,  2858,  1765,  2315, -3759, -3759, -3759,  2967, -3759,
   -3759,  2327,  2867,  2867,  2867,  2975, -3759, -3759, -3759,  2331,
    2589, -3759, -3759,  2509,  2366, -3759,  1682, 23670,  2748,  2343,
   -3759, -3759,  2606, 11454, -3759, -3759,   251, -3759, -3759,  1555,
   -3759,  2941,  2562, -3759, -3759, -3759, -3759,  2830, -3759, -3759,
    2967,  2891,  2867,  2780,  2355, -3759, -3759, -3759, -3759, -3759,
   -3759,   232, -3759, -3759, -3759, -3759, -3759, -3759, -3759,  1898,
   -3759, -3759, -3759, -3759, -3759,  1682, -3759, 23670, -3759, -3759,
   -3759, 23670, -3759,  2356, -3759,  2354, -3759, 11454, 11454,   304,
    2940,  3002,  3002,  3002,  1789,  2393, 11454, 11454, 11454, 11454,
   11454, 11454, 11454,   391,  2369, -3759, -3759,   -85, -3759,  2371,
   11454, 11454, -3759, 11454, 11454, 24934, -3759,  3117, 11454, 11454,
     438,  2881, 11454, 11454, 11454, 11454,  2438, 11454, 11454, 24934,
    3013,  2374, -3759,  2370,  1554, 11454, 11454,  1676, 11454, 11454,
   11454, 11454, 11454, -3759, -3759, 11454, 11454, 11454, 11454, 16011,
   11454, 11454, 11454, 11454, 11454, 11454,  2379, 11454,  3002,  3002,
   11454, 11454,  1802, -3759, -3759, 11454,  1938,  1938, -3759, 11454,
    8199, 11454, -3759, -3759, -3759,  2380, -3759, -3759, -3759, 24934,
    3002,  3002, 11454, 11454, 11454,  2940,  2940,  2940,   120,  2382,
    -132, 11454, 27464,  2376, -3759, -3759, -3759, -3759, 11454, 11454,
   11454, -3759, 16011, -3759, -3759,  1484, -3759, -3759, -3759, 12756,
   16011, 16011,  2385, 16011, 16011, 16011, 16011, 16011,  2767, 16011,
   16011, 16662, 17313, 16011, 16011, 16011, 16011,  1189,  2940, 38814,
   16011, 11454, -3759, -3759, 46374, -3759, -3759, -3759,  2381, 23670,
     981, -3759, -3759, -3759, -3759, -3759, -3759,  2389,   981, -3759,
    2882, -3759, -3759,  2398, 23670, -3759,  2388, -3759,  2772, -3759,
   -3759, -3759,  2775,  2777,  2781, -3759, -3759, -3759, -3759,  3014,
    2785, -3759,  2787, -3759, -3759, -3759, -3759, -3759,  2413, -3759,
   -3759,  2664,  2614,  1192, -3759, -3759, -3759, -3759, -3759,  2702,
   -3759, -3759,  2534, -3759,  2711, -3759, -3759,   158, -3759,   160,
   -3759, -3759, -3759, -3759, -3759, -3759,  2712,  2437, -3759, -3759,
   -3759, 46374, -3759, 47004, -3759, 21134,  -107, -3759, -3759, -3759,
    2814, -3759, -3759,   145,  2441, -3759, 23670, -3759,    60,    60,
    2700,   180, 38814, -3759, -3759,   168,   890,   178,  2444,  2529,
    2447, -3759,  2533, 23670, 23670, -3759, -3759, -3759,  2714, -3759,
    3090,  1165,  2664,  2736, -3759,  2739, -3759, 46374, -3759,  1808,
   -3759, -3759, -3759,  2461, -3759, 11454, -3759,    52, -3759,   931,
   -3759, 46374, -3759, -3759, -3759, -3759, -3759,  3040, 11454, -3759,
   35664,  1174,   995,  1254,   931, -3759, -3759, -3759, -3759, -3759,
   46374, 41964,  2464, -3759,  2875,  -107, 11454, -3759, -3759,  2480,
    1594, 46374, 46374, 46374, 23670, 46374, 23670, -3759,   935,   935,
   -3759, 34404, -3759, -3759, -3759, -3759,   -55, 46374, 46374,   -55,
   35664, -3759, -3759,   189, 46374,   -55, -3759,  2886,  2585, -3759,
   -3759, -3759,  2953, -3759, -3759,  2944,  2487, -3759,  2875, -3759,
    1470,   189, -3759, -3759, -3759, -3759, -3759, 23670, -3759, -3759,
     189, -3759,   189,   189,   -55,   -55, -3759, -3759,  2644,  -129,
   -3759,   974,   144,  2746, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759,  1196, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,    99, -3759,
   -3759, -3759,  2176,  3006, -3759, 38814,  1997,   650,  1151,  1997,
    1202,  -107,  1234, -3759,  1234, -3759, 35664,  2969,  3346,  2778,
     219, 23670, -3759,  2497, 42594, 23670, -3759, -3759, -3759,   172,
    2506,  2503,  1789, -3759, -3759, 23670, -3759, -3759, -3759, -3759,
    2558, -3759, -3759, -3759, -3759,  2082, -3759, -3759, -3759,   152,
    2307,  2530,  2556,   101, 35664,  2966, 46374, 46374,  1594, 46374,
   46374, -3759, -3759,   649,  2795,  2796,  2798,  2519, -3759,  2714,
   -3759,  1278, 46374,  2976, 29994, -3759,   343,   302, -3759,  3002,
    2523, -3759,  2525,  2527,  2528, 11454,    25,   446,   800,  1382,
    1460,   854,   383,   249, -3759,  2531,  2536, -3759,  2541, -3759,
   -3759,   429,   452,  1023,  1043,  2542,  2544, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759,  2977, -3759,   471,
    1469, -3759, -3759, -3759, -3759,  2545, -3759, -3759,  1048,   478,
     482,   281,  2552,   492,  1528,  1545,  2550, 24934, 46374,  3002,
    2555,  1050,  1056,  3002,  2557,   524,  1106,  1603,  1614,  1622,
    1150,  1154,   530,  1645,  2583,  1183,   714,   765,  1188,   859,
     865, -3759,  1203,  2559,  2560,   872,   142,  3002,  2561,   298,
    2549,  2551,  1224,  9501, 10152, 10803,   966,   924, -3759,  2563,
   -3759,  2370,  2564,  2565,   314,   293,  1240, -3759, 11454, -3759,
   -3759,  -127,  1249,  2618,   112,  1254, -3759,  2734, 46374,  2311,
     193, -3759, -3759, -3759, -3759, -3759, -3759,   876, -3759,  2568,
   -3759,  2571,  1226,  2575, 11454,   245,  2575,  2310,  1670,  1670,
   16011,  2988,  2671, 12105,  1379, 12105,  1379,  2575,  2575,  2575,
   -3759, 16011,  2591, 16011, 16011, -3759,  2940,  1789,  2582,  -242,
   46374, -3759,  2389,  1103, -3759,   931, 35664,   100, 23670, 38814,
    2593, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,  4187,
   23670, -3759, -3759, -3759, -3759, -3759,  2687, -3759, -3759, -3759,
    2596, -3759, 35664,  2596, -3759, -3759,  2596, -3759, -3759,  2596,
     842,  5119, -3759,   641,  1171,  2522,  2621, -3759, -3759, -3759,
   23670, -3759,  3015,     8, 23670,  2497,  2598, -3759, -3759, -3759,
   -3759, -3759,  2220,  2713, -3759,  3236, -3759, 11454,  -107, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, 11454,  -107,
   -3759, 35664, 35664, 23670, 23670,   792, -3759,  1768,  2603, -3759,
   -3759, -3759, -3759, -3759,  2602, 35664,   982, -3759, -3759, -3759,
   -3759, -3759,   115,  1789, -3759,  2597,  4120, 41334,  8850, -3759,
   37554, -3759,  1789,   931,  2607,  2608, -3759, -3759,  2991,   659,
   -3759,  2609,  2612, -3759,  2615,  2620,  2622, 41334, 11454, -3759,
     995, -3759, -3759, -3759, -3759,  8850,  -107,  3069, -3759,  1789,
    2625, 46374, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759,  -112, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759,   -55, -3759, -3759, -3759, -3759,
   -3759,  2860,  2654,  2202,  3069, -3759, -3759,   -55,   189, 23670,
     -55,   -55, -3759, -3759,  3093, -3759, -3759, -3759, 46374,  2837,
    2802, -3759,  2638, -3759, -3759, 23670, -3759,  2643, -3759,  3107,
    3252,  2654, -3759, -3759, -3759,   931,   931,  2954, -3759,  -107,
    2791,  2792,  2793,  2794,  2806,  2828, -3759, -3759,  -107,  -107,
   -3759, -3759,   931, -3759,  1721, -3759, -3759, -3759, -3759,  -107,
    -107,  -107,  -107,  2420,  -107,  -107,  1685, -3759, -3759,   931,
     931, -3759,   991, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
    1105, -3759,  2915, -3759,  2782,   931,  3248,  2935,   931,   931,
    3248,   931,  2942,  2943,   931,   931,  2765,  3203,   931,  3086,
    2797,  2408,  3087,   931,  2951, -3759,  2799,  3211,   931,   931,
     931,   931,   931,  3248,  2957,  3303,   931, -3759,   931,  2961,
    2963,   220,  2968,  2970,   931,   931,   931,   931,   923, 46374,
     931,  2973,   931, -3759, -3759,  5260, -3759, -3759, -3759, -3759,
   -3759, -3759,   -99, 21766, -3759, -3759, -3759, -3759,   159, -3759,
    2917, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759,  2717, -3759, -3759, 11454, -3759, -3759, -3759,
   -3759,   234,   931,   931,   931,   931, -3759,  1878, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, 38814,  3088,  2021,   961,
   38814, -3759, 46374, -3759,  1922, 46374,  2718,  -121,  4375,  1041,
    1041, -3759, 23670, 23670, 23670, 46374,  2763, -3759, 29994, -3759,
   -3759,   974, -3759,  2715, 13407, -3759,  2721, -3759, 11454, -3759,
   -3759, -3759,   540, 11454, 11454,  3218,  2024, -3759, 38184, -3759,
   -3759, -3759, 11454, 38184,  2024, 11454, -3759,  2726, -3759,  3147,
    3150, -3759, -3759, -3759, -3759, 11454, 11454, -3759, 11454, 11454,
   -3759, 11454, 11454, 11454, 11454, 11454, -3759, -3759, 16011, -3759,
    2737,  2743, -3759, -3759, -3759,  2749, -3759, 11454, -3759, -3759,
   -3759, -3759, -3759, -3759, 11454, -3759, 11454, -3759, 11454, 11454,
   -3759, 11454, 11454, -3759, -3759, -3759, 14058, 11454, 11454,  2754,
   -3759, -3759, 11454, 11454, 11454, -3759, 11454,  1534, 11454,  1581,
   11454,  1900, 11454, -3759, 11454, -3759, -3759, -3759, -3759, 11454,
    1719,  2220,  2420,  2756, -3759,  1750, -3759, -3759,  2152, -3759,
    -127,  2758, -3759, -3759,  1808, -3759, -3759, 38814, 11454, -3759,
   -3759, -3759, -3759, -3759, -3759, 16011,   320,  2759, 16011, -3759,
    2310,  2438,  2438,  1876, 11454,   245,  2310, 11454,  2769,  2745,
   -3759, 11454, 46374, -3759, -3759, -3759, -3759, 38814, -3759, -3759,
   -3759, -3759,   100, -3759,  2388, -3759,  2497, -3759, -3759, 46374,
   -3759,  2834, -3759, -3759, -3759, 22398, 22398, -3759, 22398, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759,  2654,  1768, -3759,  2747, -3759, -3759,  2606,  2859,
    2790,  3140, -3759, -3759, -3759, 46374, 16011, -3759, -3759, -3759,
   -3759, -3759, -3759,  3368,  2774,  2776,  3260,  2779,  1789, -3759,
    1789, -3759,  2861, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759,    59, -3759, -3759,  2786,  2786, 19228, -3759, -3759, -3759,
   46374,  3224,  3238, 22398, 22398, 22398,   619, -3759,   305, -3759,
    1509,  3195,  2654, -3759,  3243, 39444, -3759, 30624, -3759, -3759,
   -3759, 16011,  1801, -3759,  1789, -3759, -3759, -3759, -3759, -3759,
    1174,  2883,  2884,  1976, -3759, -3759,  3191,  3021, -3759, -3759,
   -3759,   931,  1789, -3759,  2464,  2800, 28097, -3759, -3759,  1324,
   -3759,   295, -3759, 34404, 34404, -3759,  3085, -3759, -3759, -3759,
   -3759,  2621,   189, -3759, -3759,  2979, -3759,   674,  3199,  3200,
   -3759,  3074,  1215,  3074,   674,   674, 24934,   974,  2714, -3759,
    2420,  3133, -3759, -3759, -3759, 37554, 35034, -3759, -3759, -3759,
   -3759,  3353, -3759,  3355,  1317, -3759, -3759,   104,  1172, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759,  1202,   104,   104,   124, -3759,   108,
   -3759, -3759, -3759, -3759,  3293, -3759, 25566,   835, -3759,  1044,
   -3759, 25566, -3759,   172,   172, -3759, 43224, 25566,   835,  1324,
    2420, 25566,  2420, 43854,   835,  -107,  -107,  2350,   931,  2420,
   -3759, -3759,  3214, 46374,  3220, 25566, 25566, -3759, 38814, 46374,
   -3759,   931,   969,  2420, 44484,  1324,  1324, 25566,   835, 24934,
    2004, -3759,  -107,   835, -3759, -3759, -3759, -3759, 23670,   835,
     835,  2809,  2457,  2504,  2566, -3759, -3759, -3759,  2420, 43854,
   -3759, -3759,  5602, -3759, -3759, -3759, 18596, 46374,   318,  1022,
   -3759,  2821,   797,  1292,  2911,  1904,  2838,  2839, 45114,  1789,
    -107,  2220,   104,   104,  1117, -3759,  3110,  3275,   931, -3759,
    1820, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
    2933, -3759,  3468,  3041,  2847, -3759, -3759,   288, -3759, -3759,
    1302, 23670, 17964, -3759,  3108, -3759,  4354, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759,  2845,   974,  2621,  1383,
    2621,  2862, -3759, 12105,  1246, -3759,  1789, 11454,  1789,  1523,
   -3759,  2863,  2863,  2864, -3759,  2865,  2863,  3261,  2864,  3265,
    2869,  2871,  1256,  2873,  2874,  1629, -3759, 11454, 11454,  1258,
     336,  1274,  -116,   956,   962,   355, -3759,  1286,  2974, -3759,
   -3759,  1290,  1298,  1306,  1315,   990,  1369,  1828, 12105,  1381,
     676,   371, -3759,  1405,   996,  1025,  1436, 11454,  1473, 11454,
    1479, 11454,  1519,  1562,  1571,  2866,  2866,   224, -3759,  2876,
   -3759, -3759, -3759,  2877, -3759, -3759,  2257,  2152, -3759, -3759,
    2880, -3759, -3759,  2852,  1789,  2885, -3759, -3759, 11454, -3759,
     202, -3759, -3759, 16011,   376,  2887, -3759,  1789, -3759, -3759,
    2898,  1629, -3759,  1085, -3759, -3759, -3759, -3759,    32, -3759,
    1837, -3759, 35664,  2868, -3759,  2894,  2949,  2958,  2965,  2903,
   11454, -3759, -3759,  3182, 23670, -3759,  3328, -3759, -3759, -3759,
   -3759,  2906,  2909, -3759, -3759, -3759,  2310,  3286,  3169, -3759,
   -3759,  2220, 46374, 35664, -3759,  2478, 24934, -3759,  2913, -3759,
    2913,  1390,  2912,  1855, -3759, -3759, -3759,  2910,  2299,  1860,
   -3759,  3189, 35664,  3373,  3375,  3376, -3759,  2621,  2621,   149,
    2972,  3329, -3759, -3759, -3759, -3759, 45744, -3759, -3759, -3759,
   -3759,  1386, -3759,  2923,  2929,   138,  3158, -3759, -3759, -3759,
   -3759,  8850, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759,  2654, -3759, -3759, -3759, -3759, -3759,  2654,
   -3759,   -55, 11454,  -217,  1249, -3759,  1312, -3759, -3759, -3759,
    3330,   674,  3074,  3074,  3332,  3222,   -46,  2931, -3759,   931,
   -3759,  4005, -3759,  2478, -3759, -3759, 11454, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759,  1105, -3759, -3759, -3759, -3759, -3759,  2945,  3334,  3338,
   -3759, 25566,   172, -3759, -3759, 25566, 25566, -3759, -3759,    86,
   43854, -3759, -3759, -3759, -3759, -3759, -3759,  2946, -3759, -3759,
    2220, -3759, -3759, 35034,  -107, -3759, 25566,  2946, -3759, -3759,
     494, -3759,  2971,  -107, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, 43854,  2950, -3759,  1459, -3759, -3759,
    2043, -3759, 43854, -3759, -3759, -3759, 43854, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,  2956,  2789,
    1926, -3759,  2986,  2952, -3759, -3759, -3759, -3759, 46374, -3759,
   -3759, 23670, -3759, -3759, -3759,  5213, 46374,  3201, -3759, 11454,
   11454,  3235, 46374,  3240, -3759,  3533, 46374,  3601, 43854, -3759,
    2987, -3759,  2993, -3759, -3759, -3759, -3759, -3759, -3759,  2978,
   46374,   104,  2120, -3759, -3759,  -107,  1302, -3759, -3759, -3759,
   -3759,  3253,  3274, 46374, -3759, -3759, -3759, -3759,  3148, -3759,
   23670, -3759,  3172, -3759,  3000,   873,  5515, -3759,  3005,  3007,
    3009, 29994,  2621,  3279, -3759, -3759,  2438, -3759,  1789, 11454,
     843, -3759, -3759,  1095,  3290, -3759,  1209, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,  3010,
    2438,  2438, -3759, -3759, 11454, -3759,  3613,  3186, 11454, 11454,
   -3759, 11454, -3759,   994,  3016,  3037, -3759, -3759, -3759, -3759,
   11454, -3759, -3759,  2438, -3759, 11454, -3759, -3759, 11454, -3759,
   11454, 11454, -3759,  1612, -3759,  1625, -3759,  1631, -3759, -3759,
   -3759,  2220,  3017,  3398, -3759, -3759, -3759,  2220,  3210, -3759,
   -3759,  2220,  2420,  2461, -3759, -3759,  -132, 46374, -3759, -3759,
    1874, -3759, -3759, 11454, -3759, 39444, -3759, -3759, -3759,  3390,
    3658, -3759,  3250, -3759, -3759, 46374,  1122,  3030, 31254, 35664,
   35664, 35664, 14709,  1789,  3527, -3759, -3759, -3759,  3328,  3413,
   -3759,    70, -3759, 46374,  3027,   181, -3759,  1880, -3759, -3759,
    3034, -3759,  2257,  3029, -3759,   931, 14709,  2786,  3172, -3759,
   -3759,  1390, 24934, 30624, -3759, -3759, 46374,  3490,  2355, 35664,
   35664, 35664,  2654,  3478,  2859,  2859, -3759, 28730, -3759, -3759,
    3202, -3759, -3759, 31884, -3759, -3759, -3759, -3759, -3759, -3759,
   28097, 41334, -3759, -3759, -3759,  1789,  1808,  3228, -3759,   974,
   -3759,   674, -3759,  3435,  3436,   674, -3759, -3759, -3759, 24934,
    2621, 14709, -3759,  2257,  1789,  3042,  1459, -3759,  -104, 11454,
   25566, -3759, -3759, -3759,  3045, -3759, -3759,  3569,  3570, -3759,
   25566,  2082, 46374, -3759,  3040, -3759, -3759, -3759,  3149, -3759,
    5213, -3759, 24934, -3759, -3759, -3759, -3759, -3759, 46374, -3759,
   23670, -3759, 18596, -3759,  3048, -3759,  2863,  2863,  2863, -3759,
   -3759, -3759,  2864, -3759,  2865,  3295, -3759,  2865,  2865, -3759,
   -3759, -3759, -3759, -3759,  1095,   363, -3759, -3759,  1095, -3759,
   -3759, -3759,    91,  -197,  2865, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759,  2863,  2864,  2864, -3759, -3759,  1095,  2863, -3759,
    2863,  2466, -3759,   290,    98,  2863,  2863,  2863,  3052,  3046,
   -3759,  1789,  2438,  3618, -3759, -3759,  3212,  -107,  3560, -3759,
    1888, -3759,  3056, -3759, 45114,  1202, -3759, -3759, -3759, -3759,
    3209,   834, -3759,  3239,  3058,  3059, -3759, -3759,  -107,  3062,
    3063,  5260, -3759, -3759, -3759,  3692, -3759, 46374, 46374, 46374,
    2715, -3759,  3445,  -229,  1789,  3066,  3067,  3068,  3070,  3683,
     198, -3759,  3686, 38184, -3759, -3759, -3759,  3075,  1899, -3759,
    3077,  3078,  1633, -3759,   144,  3080,  1696,  1030,  1911,  3396,
    3473, -3759,  3316, -3759,  1706,  1119,  1734,  1739,  1779,  1783,
   -3759, -3759, -3759, -3759, -3759,  3094, -3759, -3759,   462, -3759,
    3089,   183,  1249, -3759, -3759,  1936, -3759, -3759, -3759,  3561,
    3464, -3759,  3539, -3759, -3759, -3759,  -117,  -117,  -117,  1801,
    1789,  1950, -3759, -3759, -3759, -3759,  3504, -3759, -3759,  3098,
    3236, 46374, -3759,  3169, -3759,  2461, 24934, 14709,  3099,  3097,
   -3759,    -4, -3759, -3759,  3095, -3759, -3759, 35664,  2355,  2355,
    2355, -3759,  3701,  3538, -3759, -3759, 38814,  3102, -3759, -3759,
    3421, -3759, -3759, -3759, -3759, -3759,  2638,  2073,  3151,   674,
     674,  2761,  3152, 11454, 11454,  3112, -3759,  3279, -3759, -3759,
     827,  2461, 11454, -3759,  2220,  3169, -3759,  1810,  3113,  3114,
   46374,  3115,  3116, -3759,  2599,   318, -3759, -3759, -3759, 23670,
    2466,   835, -3759, -3759,  2946,    59,  3119, -3759, 46374,  3455,
   -3759, -3759, -3759, -3759,  1142, -3759,  3121,  1142,  1142, -3759,
    2422, -3759,  3156,  1095, -3759, -3759,  3157, -3759, -3759, -3759,
    1142,  3126,  1095, -3759, -3759, -3759, -3759,  1142, -3759, 38814,
     260,  -107,  3890, -3759,  3176, -3759,  3631,  1595, -3759,  2466,
   -3759,  3520,  3521,  3416, -3759,  1095, -3759, -3759,  3745, -3759,
    1095,  3745,  1142,  3417, -3759,  1142, 46374, -3759, -3759, -3759,
   -3759, -3759, -3759, 46374, -3759,   877, -3759, -3759,  1959,  -107,
   -3759, -3759, -3759,  3134,  3139, -3759, -3759, -3759,  1292, -3759,
   46374,  5213, -3759, -3759, -3759,  3108, -3759,  1134,  1962,  1459,
    3136,  1964,  1974, 34404, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, 38184, -3759,  3745, -3759,  3418, -3759, -3759,
   -3759, 11454, -3759, -3759, -3759, 11454, -3759, -3759,  3456,  3619,
   -3759, -3759, -3759, -3759, -3759, -3759,  3142, -3759,  2420,  1509,
    1509, -3759, -3759, -3759, -3759, -3759,  3419,   131,  3167,  3167,
    3167, -3759, 14709,  3540,  3246, -3759, -3759,  3153,  3187, -3759,
   -3759,   183, -3759, -3759, -3759, -3759,  2355, 11454, -3759,  3279,
    2350, -3759, 28730, -3759,  -132, -3759,  3192, -3759, -3759, -3759,
    3193,  1789,  1789, 46374,  3445, -3759,   893,   183,  1459, -3759,
    1978, -3759, 46374, 46374,  1999, 46374, 46374,  3245,  3247,  3249,
    1760,  1760, -3759, -3759, -3759, -3759, -3759, -3759,  3562, -3759,
   -3759,  2017, -3759,   745,  3439, -3759, -3759, -3759, -3759,  1142,
   -3759,   144, -3759, -3759, -3759, -3759, -3759,   144, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,  3446,  3204,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759,  3161, -3759, -3759,  3288, -3759, 52674, -3759, -3759,
    1161,  3188, -3759, -3759, -3759, -3759,  1591, 46374, 23670,  3235,
    3357, -3759,  3040, -3759,    -4,   873,  3172, -3759,   206, 46374,
   -3759,  3449,    94,   221, -3759, -3759, -3759,  3168,  3166,  1459,
    1822, -3759, -3759, -3759,  3170, -3759, -3759, -3759,  3263,  3267,
   -3759, -3759,  3269, -3759, -3759,   118,  1532, -3759, -3759, -3759,
   -3759,  3221, 23670, 16011,  3289, 46374,   885,  1834, -3759,  1475,
    1459, 11454,  2654, 35034, -3759, -3759, -3759, 11454,  3178, 11454,
    3179,  2020, -3759, -3759, -3759,   172,   172, -3759,   893, -3759,
   -3759, -3759,  2023,  2031,   206,  2047,  2050, -3759, -3759, -3759,
     318,  3181, -3759, 46374, -3759, -3759, -3759,   335, -3759, -3759,
    2060, -3759,  2066, -3759, -3759, 11454,  3675,  3208, 46374,   942,
   -3759, 53934, 53934, 46374, -3759, -3759, -3759, -3759,  4120, -3759,
   -3759,   696, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759,  3800, -3759,  3180, -3759, -3759,  1161,  3184,
   -3759,  1494, -3759,  2299, -3759, -3759,  5213,  3644,  1904, -3759,
   -3759, -3759, -3759, -3759,  3190,  2299,  -107,   931, -3759,   206,
   -3759, -3759, -3759,  1459,  3194,  3447, -3759,    94, -3759, -3759,
   -3759,   221, -3759, -3759, -3759, 11454, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759,   421,  3462,  2420,  2420,  2420,  2420,  1532,
   -3759, 24934,  2714, -3759,  2220, -3759,  2084, -3759, -3759, -3759,
    3283,   931,  3705,  3706,   931,   931,   931,   931,  3196,  1834,
   -3759,  3687, -3759, -3759, 11454, -3759, -3759,  1789,  3437, -3759,
    3772,  1249,  1789, 46374,  1789, 46374, -3759,  3657,  3657, -3759,
    3420,   206, -3759,    94,   221, -3759,  3169, -3759,   937,   937,
    1095,   144,  1095,  1789, 11454, -3759, 11454,  3226, -3759, -3759,
    3659, 46374, -3759, -3759, -3759, -3759, 11454, -3759, 52674, 52674,
   -3759, -3759, -3759, -3759,  3823, -3759,  3207,    -4,  3793,  3482,
    3795, -3759,  3251, -3759, -3759,  3533,  5213, -3759, -3759, -3759,
    2420,  1085, -3759, -3759, -3759,  1156,  1085, -3759,  1085, -3759,
    1459, -3759, -3759, -3759, -3759, -3759, -3759, -3759,  3213, -3759,
     931, -3759,  3215, -3759, -3759, 46374,  3217, -3759,  -107,   931,
     931,   890,   890,  2220, 38814,  3323, -3759, -3759,   931,  1459,
    3846, -3759,   882,  3591, -3759,  2087,  2096,  1232, -3759, -3759,
   -3759, -3759, -3759, -3759,  2121, -3759,  3864, -3759,   155,  3501,
    3502, -3759, -3759, -3759,  1789,  1789, -3759,   212, -3759, -3759,
    3632,  3720, 11454,  1789, 49524,  3225, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, 53304,
   11454, -3759,   696,  3800, -3759, -3759,  3499, -3759,  3507, -3759,
   -3759, -3759,  3746, 52674, -3759,  3741, -3759,    -4, -3759, -3759,
   -3759, -3759, -3759, -3759, 24934, 14709,  2350, -3759,  3289, -3759,
    3237, -3759, -3759,   -38, -3759,  -107,  -107, -3759, -3759, -3759,
   -3759, -3759,  2125, -3759, 38814, -3759, -3759,  3838,  3839,  3735,
    3841,   882, -3759,  1481, -3759, -3759, -3759,  3842, -3759,  3843,
    3254,  3255, -3759, -3759, -3759, -3759,  3294,  3764,  3272, 11454,
   52674, -3759,  3743, -3759,  3673,  1789,  3614,  3256, -3759,  3244,
    1789,  3776, 53934, 53934, -3759, -3759, -3759, -3759,  3755, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759,  2140, -3759, 15360,
   -3759, -3759, -3759, -3759, -3759, 38814, -3759,  3323, -3759,  3257,
     144,   144,  3859,   144, -3759,  3860,  3861,  1481, -3759, -3759,
   -3759, 45114, 45114,   937,   937, -3759,   217, -3759,  1789, 50154,
    3857, 46374, -3759,  3354, -3759, -3759, 11454,  3770, 40074, 50784,
    3262, -3759, -3759, -3759,  3450, -3759,  3251,  3451, -3759,  3237,
   -3759,  3268, -3759,  2310,  1834, -3759, -3759,  3553, -3759, -3759,
     144, -3759,   144,   144, -3759,  3273,  2153, -3759, -3759, 11454,
   -3759,  3765,  3365, -3759,  3287, -3759, 52674,  1789, 52674, -3759,
   -3759,  3714,  3292,  1772, -3759,  3271, -3759, -3759, 52674,  3713,
    3772, -3759, 15360,  3296, -3759, -3759,  3299,  3300, -3759, -3759,
   -3759, -3759, -3759,  1789,  3895, 52674, 46374, 47634,  3799, 51414,
    3763, 46374,  5213,  3768,  3771, -3759, 52674, -3759,  3915,  3591,
   -3759, -3759, -3759,  3553,  3406, -3759, 48264, -3759,  2660,  3523,
    3340, -3759, -3759,  3845,  2216, -3759, -3759,   144,  3750, -3759,
   52674, 52674, -3759, -3759, -3759, -3759, 32514, -3759, -3759,  3366,
   -3759, -3759, -3759,   619, -3759,  3625,  3343, 48894, 52044, -3759,
   -3759, -3759, 29362, -3759, -3759, -3759,  3802, -3759, 11454, -3759,
    1763, -3759,   823, 19860,  3510, 32514, -3759, -3759,  1789, -3759,
   -3759, -3759, -3759, -3759, 38814,  2195, -3759, -3759, 24934, -3759,
   -3759, -3759, -3759, 23036,  3347, -3759,   931, -3759, 24934, -3759,
   -3759, 14709, -3759, -3759
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3759, -3759, -3759, -3759, -3759, -1761, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759,  1761, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,   713,  1576,
    3356, -3759,   457, -3759,   140, -3759, -3759, -3759, -2817,    11,
    -170, -3759, -3759,   327,    31,  3043,  -168, -2937, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759,   464,   467, -3759,
   -3759,   292, -3759, -3759, -2048, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759,  -345,  -303, -3759, -3759, -3759, -3759, -3759, -3759,
    -807,   307, -3759,   309, -3759,   310, -3759,   312, -3759,   316,
     319,   321,   322, -3759,   333, -3759, -3759,  -310, -3759, -3759,
   -3759, -3759,   342, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
    -181, -3759, -3759,   -30, -3759, -3759,  -172,   344, -3759,  -113,
     347, -3759,   348, -3759,   -27, -3759,   -25, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
    3060, -3759, -3759, -3759, -2169, -3759, -3759, -2017,  2605, -3759,
   -1620, -3759, -3759, -1858, -3759, -3759, -1653,  -579, -3759, -3759,
    -114,   744, -3759, -1308, -1828, -1812, -3759, -3759, -3759, -1961,
   -1950, -1243, -1195, -2083, -3759, -3759, -3759,   337, -3759, -3759,
   -2481,  2059,  2610, -3759, -1936, -3759, -3759,  1193, -3759, -3759,
    1367,   686,  1365, -3759,   977,  2801, -1206, -3759, -3759, -3759,
   -3759, -3759, -3759,    56,   311,   -36, -3759, -3248,   690, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3758, -3759, -3759,
   -3759,  -196, -3759, -3759,  -110, -3759, -3759,  -159, -3759,   162,
   -2244, -3759, -3759, -3759, -3759,  2590, -1301, -3759,  3574, -3759,
    -542,   787,  2088, -2038, -1398, -3759,  -884,  -865, -2414, -3759,
   -3759, -3759, -3213,  1139,  1542, -3759,   884,  2085, -1859, -3759,
    1588, -3759, -3759,   909, -3759, -2664, -3759, -3759, -3759,   867,
   -3759,   870, -3759, -3759, -3759,  -882,   832, -2409,  1730,  -584,
   -3759,   427, -2444, -2368, -3759,   647, -3759,   600, -2890, -3219,
   -3759,  -573, -2040, -2337,    -5, -3759, -3759,   611, -3018,  1718,
   -3759, -3759, -3759, -3067, -1616,  1476, -3759, -3759,  1057, -3759,
   -2655,  1053, -3759, -3759, -3759,  1063, -3759,   167, -3759, -3759,
   -3759, -3759, -2472, -3759, -3759, -1448, -2207, -3759, -3759,    12,
   -3759,  3595,  3597,  4110,  4111, -1001, -2580, -3493,   169,   173,
   -3759, -3759, -3759,  2611, -1978,   244,   235,   238,  2061,  -814,
     390, -2324, -3759,   443, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759,  2122,  -454, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -2348, -2345, -3759, -3759,  1630, -3759, -3759, -3759, -1439, -1420,
   -1418, -1862,   632, -2101, -3204, -3759, -3759, -3759, -3759,  2719,
   -3759, -3759, -3759, -3759, -3759,   671,  1836, -3759, -3759, -3759,
   -3759, -3759, -3759,   948,  2645, -3759, -3759, -3759,   -11, -3759,
   -3759, -3759, -3759,  2358, -3759, -3759, -3759, -3759,  2667, -3759,
   -3759, -3759, -3759, -3759, -3759,  1449, -3759,  1877, -3759, -1425,
   -3759, -3759,  1046,  -945,  1830,  3548,  1958, -3759, -3759,  -585,
   -3759, -3759, -3759, -1550, -1160, -3759,  3280,  -745, -2435,  2348,
    -649, -1777,  1076,  -408,  4081, -3759, -1102, -1095, -3759, -3759,
    -638, -3759, -3759, -3759,  -540, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759,  1483, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,  1512,
   -3759,  2049, -3759,  -497, -3759,  3065, -3759, -3759, -3759, -2259,
   -1734,  1770,   997, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -1491, -3759, -2319, -3759, -3759, -3759, -3759, -3759,
    1969, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -1519, -3759,
   -1424,   211, -3759,   364, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759,   -50,   879,   -47, -3368, -1043,  1735, -3759, -3759, -1247,
    3103, -2267, -3759, -3759, -3759,  1952, -3759, -3759, -3759, -3759,
   -3759,   971, -2863,  2740, -3759, -3759, -3053,  -878, -2206,  -858,
   -3759, -2292,   527, -1880, -1713,  -327, -1270, -1275, -3759, -3759,
   -3759, -3759,  -145, -3759, -3759, -3759,   543,  1857, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,  -545,
    -776, -3759, -3759,  2104,  2516, -3759,  2980, -3759, -1031,  3229,
   -3759, -3759,  3230, -3759, -3759, -3759, -3759,  2916,  2888,  1918,
   -3759, -3759, -2131, -3759, -3759,  1882, -3759,   788,  -870, -1795,
    1071, -3759, -3759,  1074, -3107, -3759, -3759,  3242, -3759, -3759,
   -3759,  1027, -3759,    80,  3611,  3258, -3759, -3759, -3759, -3759,
   -3759, -3759,  2679, -1013,  3536, -3759, -3759, -3759, -3759, -3759,
   -3759,  2330, -3759, -3759, -3759, -3759, -3759, -3759,  2835,  3627,
    -576, -1258, -3759,  -582,  2815,  2334,  -690, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759,  2490,  1002, -3759, -3759, -3759,  2908, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759,  1116,   -60, -3759,    82,
     -83, -3759,    17, -3759, -3759, -3759, -3759, -3759,  -158, -3759,
   -3759,  -161, -3759,  -932, -1337,   729, -1695,  -782, -3759,  1107,
    2907, -3260,  -598, -1098, -1104, -1912,    78, -3759, -3759,  2872,
      51,  -784,  -238,    -6, -2603,   -94,  -570, -3759, -2124, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,  1881,
   -3759, -3759, -3759,  1083, -3759,  3655, -3759,  2581, -1304,  3660,
   -3759,  -559,  2412,  1894,  1901, -3759, -3759,  1903, -1732, -3759,
   -3759, -3759,   148, -3759,  2501, -3759, -3759, -3759, -3759, -3759,
   -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759,  2448,  3401,  2947, -3759,  2517, -3759, -3759, -3759, -3759,
   -3759,   357, -3759,   370, -3759, -2446,  2757,   551, -3759,  1179,
    -476,  -699, -3759, -3759,   356, -3759, -3759,  1399,  3693,  3410,
   -3759, -3759, -3759, -3759, -3759, -2660,  -842, -3759, -3282, -2723,
   -1623, -3759, -3759, -2120, -2913, -3759, -3759, -1007, -3759, -3759,
   -3759, -3759, -1723, -3759, -3759, -3759,    38,  3756,  3757, -3759,
   -3759,  -180, -3759,   825, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759,   414,   734, -3759, -3759,  3623, -3759, -3759, -3759, -3759,
    3624, -3759, -3759, -3759, -3759, -3759,  3626, -3759, -3759, -3759,
   -3759, -3759,  1616, -3759, -3759, -3759, -3759, -3759, -3759, -3759,
   -3759
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2546
static const yytype_int16 yytable[] =
{
     495,  1021,  1029,  1007,   929,  1192,   884,   925,   542,  1338,
    1341,  1438,   541,   950,  1614,   547,  1321,   562,   621,  1353,
     889,  1776,   520,   569,   564,  1445,  1775,  2326,  2077,  2193,
     788,  2033,  1525,   574,  1858,  1640,  1753,   493,  1515,  1516,
    1373,  1639,   589,  1592,   965,  2328,  1405,  1832,  2015,  2281,
    2016,  2481,  2030,  2420,  2861,   125,  2691,   980,  2591,  2808,
    1662,  3158,  2722,  2593,  3438,  2795,  1373,  1670,  3124,  1556,
    2005,  2776,  2777,  2975,  2652,  1672,  1673,  1450,   610,  1676,
    1677,  1678,  1679,  1761,  1681,  1682,  1684,  1686,  1687,  1688,
    1689,  1690,   996,   999,  2447,  2438,  1451,  2536,  2451,   545,
     613,  2510,   495,  2357,  2780,   495,   620,   626,  2537,  2466,
    2395,  2396,  1092,  1037,  3274,  2857,  2744,  2833,  2786,  3625,
    3312,  2477,  2432,  3443,  2862,  1865,  2796,  2407,  1154,  1155,
    1050,  2676,  3517,  1939,  1756,  3902,  1154,  1155,  2433,   615,
    1187,  2999,   617,  1877,  2425,  2426,  1269,  1904,  2059,  1939,
    1926,  2229,  3486,  3362,  1880,  1881,   501,   631,  1154,  1155,
    2446,  1420,   609,  2449,  2450,  1269,  2452,  3479,  3484,  2455,
    2456,  3485,  3876,  2459,  2093,   561,  3458,  1704,  2468,  3002,
     940,   568,  3648,  2472,  2473,  2474,  2475,  2476,   639,  2525,
    3495,  2480,  2049,  2482,   586,  3758,  3516,  3650,  1767,  2491,
    2492,  2493,  2494,  1358,  1378,  2498,  1367,  2500,  1778,  1154,
    1155,  3063,  1355,   554,  2993,  1927,  1381,  3146,  3000,  1947,
    3571,  1947,  3081,  1447,  1734,  1770,  1145,  1146,  1147,  3187,
    2533,  1402,  1403,  1404,  2296,  1406,  3086,  2836,  1212,  1188,
    2485,  2512,  1806,  1132,   816,  3054,  2534,  2520,  2521,  2522,
    2523,  3664,  2321,  3184,  -822,  2363,   551,  2054,   891,   875,
    2822,  3261,  3016,  1928, -2493,  1154,  1155,  1948,  1737,  1948,
     632,  2409,  1299, -2429,  1189,  3791,  1447,  1066,  1548,  4154,
    4190, -1415,  1399,  3695,  3876,  1270,  3128,  3444, -1881,  1771,
    3623,  1987,   932,  2270,  3134,  3302, -1908,  1154,  1155,  3876,
    2382,  2983,  2643,  2985,  1270,  2055,   598,  -475,  2318,  1154,
    1155,  3952,  3319,  2180,  1154,  1155,  1528,  1189,  1154,  1155,
    1278,  3749,  2428,  3167,  3320,   248,  2918,   250,  1427,  3607,
    1154,  1155,   555,  2550,   654,  2157,  1154,  1155,  3321,  1990,
    1922,  1650,  2818,  2819,  1407,  2021,  2189,  2570,  3877,  1136,
     891,   875,  1154,  1155,  3055,  2319,  1922,   941,  1447,  1154,
    1155,  4160,  4188,  1072,   572,  4192,  4160,  3780,  1505,  1506,
    1507,  1154,  1155,  1002, -2493,  3156,  2318,  2389,   124,  2486,
     498,  3759,  1374,   499,  3691,  3319,  1772,  1154,  1155,  -476,
    1764,  3389,  1154,  1155,  1463,  1464,   646,  3320,  1508,  1154,
    1155,  2031,  3356,  1528,   558,  2221,  3358,  3692,  3778,  2208,
     585,  3321,  2124,  2222,   644,  3488,  3684,  2958,  3489,  3565,
    1133,   806,  1940,   891,  3480,  3688,  1483,  2032,  1509,  2271,
   -1415,  3157,  1375,  1502,  3799,  1765,  3390,   567,  1940,  2946,
    2947,   627,  1473,  1529,  3693,  1154,  1155,   124,  3707,  2737,
    1003,  1371,  3872,  3709,   819,  1017,  1073,  2774,  4051,  1808,
    3877,  2022,  1154,  1155,  3958,  2648,  2096,  1773,  1154,  1155,
    3132,  3133,  3162,  1036,  1828,  3877,  2297,  1555,  1292,  3823,
     599,  4281,  1384,  3054,  1203,  3758,  3760,  1154,  1155,  1156,
    1897,  1092,  1157,  1900,  1154,  1155,   933,  1156,  1154,  1155,
    1157,  2919,   620,  2329,   626,  3770,  3740,  3182,  1154,  1155,
    2804,  3185,  3186,  2953,  3303,  1651,  3194,  4155,  2977,  1156,
    2190,  1279,  1157,  2465,  2959,   802, -2048,  1667,  1428,   626,
    1544,  3135,  1504,  1191,   636,  2839,  3460,  2364,   814,  2843,
    1154,  1155,   620,  3445,   824,  2229,  1154,  1155,  2883,  1581,
    2502,  2230,  1582,  2859,  2860,  1454,  1154,  1155,  2181,  3168,
     841,  1539,  1540,  1549,  1450,  2873, -1415,  3188,  1356,  2536,
    2842,   818,  2844,   885,  3644,  4045,  1902,  4046,   938,  2855,
    2537,  1190,  1580,  1451,  2738,  2210,   552,  1410,  1319,  1400,
    3119,  1594,  3055,  2868,  2510,  3800,  2213,   817,   954,  2216,
    2879,  2432,  3449,  1607,  1608,  1609,  3955,  2005,   620,  4186,
     969,  1613,  2901,  2903,  2905,  1450,  1926,  2433,  2906, -1908,
    2371,   620,   610,   495,  1190,  3183,  1156,  2513,   610,  1157,
     995,   610,   610,  1675,  1451,  4010,  1008,   969,  2272,  3602,
    2510,   620,  2431,  3376,  3377,  3378,  3761,  2094, -2071,  1735,
    1696,  1038,  3177,   919,  1039,  1040,  1379,  3082,  1156,  1045,
     982,  1157,  2298,  2854, -2189,  3762,  2948,  2207,  1484,  1707,
    1156,  3759,  2225,  1157,  4039,  1156,  2863,  3395,  1157,  1156,
    3056,  1927,  1157,  3408,  3409,  3410,  1860,  1774,   810,  1863,
    1035,  1156,  1154,  1155,  1157,  1867,  3896,  1156,   942,  1947,
    1157,  1807,  2533,  3487,  1093,  4095,   981,  1757,  4054,  2037,
     831,  1202,   992,  1156,  3871,  3311,  1157,   844,  2534,  3885,
    1156,  3786,  3147,  1157,  1882,  1883,  2060,  3936,  3300,  1928,
    1154,  1155,  1156,  2951,  1768,  1157,   556,   856,  3441,  2049,
    1904,  1755,  1204, -2429,  1779,  2990,  1158,  1948,  1156,  1485,
    2532,  1157,  -822,  1156,  1158,  2816,  1157,  2821,  1785,  3197,
    1156,  1134,  3763,  1157,  2196,  1151,  3782,  1153,  1647,  1648,
    1813, -2429,  3470,  3471,  2745, -1415,  1158,  1738,  1886, -1415,
    2999,  1154,  1155,  2999,  2999,  1339,  2487,  2069,  3572,  1344,
    1349,  2158, -1908,  1196,   495,  1198, -2358,   969,   495,   620,
    2999,   495,   620,  1370,  2054,  -475,  1156,  2820,  2945,  1157,
    1864,  2070,  1274,  3473,  3496,  2538,  1154,  1155,  1841,  3515,
    3518,  3520,  3521,  1156,   610,  4181,  1157,  1158,  1879,  1156,
    4003,  1197,  1157,  2982,  4066,  1201,   620,   610,  1211,  4215,
     647,   610,  3428,  2696,  3493,  3494,  3432,  3457,  1156, -2048,
    3472,  1157,  2055,  1018,  2103,  1156,  3448,  2785,  1157,  1156,
    3464,  1437,  1157,  2539,  3057,   808,  3035,   885,  3287,  1156,
    1154,  1155,  1157,   620,  2722,  1154,  1155,   620,   620,  1906,
    3322,  1154,  1155,  1158,  3492,  1294,  2960,  -476,  1154,  1155,
    3075,   620,  3497,  4061,   842,  4063,  1952,  2801,  2104,  3522,
    1485,  1156,  3427,  3437,  1157,  3514,  3431,  1156,  1283, -2358,
    1157, -1725,  3869,   559,  2775,  1158,   499,  1156,  3056,   498,
    1157,  1302,   499,  1411,  3064,  1308,  3411,  1158,  3104,  1647,
    2123,   610,  1158,  3959,  1385,  3288,  1158,  2990,  3306,  3814,
    1154,  1155,  2182,  2340,  3196,  2230,  2161,  2162,  1158,   620,
    2085,  1446,  1887,  3322,  1158,  3762,  1888,  4113,   983,  2794,
    1240,  3626,  2178,  2179,  3315,   126,  2065,  2296,  2657,  2658,
    1158, -2071,  1154,  1155,  3481,  3259,  3993,  1158,  1154,  1155,
    3978,   610,  1154,  1155,  3013,  3014,  4135, -2189,  4055,  1158,
    3402,  2536,  2084,  2432,  2367,  2834,  2834,  1583,  3109,  2129,
    1584,  1416,  2537,  3020,  3021,  1158,  1154,  1155,  4183,  2433,
    1158,  1770,  1154,  1155,  1373, -1375,  1939,  1158, -1725,  3037,
    3038,  1019, -2048,  2394,  3072,  3073,  1858,  1858,  -380,  3149,
    2344,   610,  2102,  2608,  4137,  1521,  3424,  3339,  2245,  1154,
    1155,  1154,  1155,  1373,  1000,  4138,  1154,  1155,  2466,  2217,
    2438,   958, -1375,  1156,  2200,  4100,  1157,  1412,  1657,  1154,
    1155,  2495, -2545,  1158,  1154,  1155,  1154,  1155,  3540,  1093,
    2572,   105,  1154,  1155,  3735,  1771,  1918,  3541,  2109,  2710,
    1158,  3793,  2015,  1093,  2016,  2827,  1158,  2557,  1413,   502,
    1334,  1156,    40,  4370,  1157,  1695,  1955,  2577,  3302,   498,
    1926,  2110,   499,  2656,  2005,  1158,  4106,  2827,  2276,   120,
    3637,  3638,  1158,   504,  2781,  1512,  1158,  3319,  3794,  1519,
    2116,  2431,  1154,  1155,  2533,  3316,  1158,  2121,  3919,  3320,
    1939,  2122,  1776,  1641,  3815,  3969,  2228,  3193, -1698,  3979,
    2534,  2125,  1156,  3321, -2071,  1157,   620,  1886, -1698,  3920,
    1776,  1776,  2864,  2215,  2927,   891,   875,  1450,  1158,  2172,
   -2189,  2193,  2241,  2232,  1158,  1927,  1154,  1155,  2661,  2662,
    1154,  1155,  1772,  2137,  1158,  2365,  1451,  1156,  2313,  2144,
    1157,  2706,  3360,   620,  1947,   550,   107,  2370,  1699,  3405,
    2373,  2374, -2275,   610,   845,  2042,   121,  2655,  1766,  1154,
    1155,  2928,  1640,  3991,  1154,  1155,  3317,  2665,   610,  2297,
     566,  2292,  2293,  1928,  1848,  3998,  2049,  3542,  4044,  1154,
    1155,  1691,  2532,  1922,   849,  2312, -1725,  2865,  3973,  3974,
    2069,  1156,  1948,  2828,  1157,  3816,  1156,  1919,  2201,  1157,
    1154,  1155,  1156,  2205,  1818,  1157,  2496,  1776,  1776,  1156,
    2246,  2558,  1157,  1773,  2070, -1725,  1154,  1155,  4139,  1939,
    1417,  1334,  1154,  1155, -2358,  1742,    50,  1745,  2351,   610,
    3098,  3744,  1154,  1155,  1154,  1155,  1849,  1701,  2510,   959,
     610,  2054,  1640,  3575,  4392,  4371,   620,  2538,  2799,  2345,
    1154,  1155,  1340,   578, -2358,  3970,  4056,   610,   610,  4100,
    2510,  1156,  1154,  1155,  1157,  1940,  1154,  1155, -1698,  1929,
    1158,  1797,   960,  3737,  1154,  1155,  2929,  3303,  1414,  1805,
    3980,  1887,  1154,  1155,  3036,  1809, -2359,  1749,  2866,  2055,
    3315,  1154,  1155,  1156,   620,  2539,  1157,  1922,  3353,  1156,
    3340,  1203,  1157,  1156,  1829,   885,  1157,  1001,  1158,  1922,
    3719,  1203,   846,  1308,  2540,   495,   495,   495,   610,   495,
     610,  1908,  1980,  2148, -2275,  1859,  1171,  1156,  3163,  3164,
    1157,  1861,   495,  1156,   620,  1640,  1157,   248,   495,   250,
   -1725,  2877,  1308,  1922,  2834,  1154,  1155,  1010,  4057,  2247,
    2314, -1698,  1842,  1843,  1844,  2298,  1846,  1154,  1155,  1158,
    1156,   610,  1156,  1157,  1922,  1157,  1838,  1156,  1415,  1862,
    1157,  2378,  4323,  1335,  2149,  1866,  1819,  1930,  4058,  1940,
    1156,  1154,  1155,  1157,  2964,  1156,  3318,  1156,  1157, -1725,
    1157, -1375,  1692,  1156,  1158,  4140,  1157,   573,  4147, -2359,
     648,  1485,  1845,  2811,  1847,  2767,  3939,  1886,  2097,   620,
    2829,  2921,  1154,  1155,  2202,  1275,  1693,  1824,  1850,  2930,
     620,   581,  2465,  1203,  1371,   610,  1922,  2791,  2026,   610,
    2203,  2043,   850,  1774,   582,  1023,  1031,  1203,  2792,   610,
    3203,  2761,  -168,  1156,  4148,  1878,  1157,  4060,  1158,  1154,
    1155,  3316,  3874,  1158,   584,  1154,  1155,  3795,   620,  1158,
     495,   495,  2101,  2067,   495,   601,  1158,  2559,  2151,  2768,
     919,  1203,  1938,  2431,  2152,  2541,  1045, -2493,  2083,  1171,
     919,  2156,   633,   602,  3720,   662,  -380,  1156,  1825,  2247,
    1157,  1156,  1203,  3745,  1157,  1154,  1155,  2063,  2064,  1154,
    1155,   604,  1814,  2965,  2044,  2379,  3988,  1200,  1940,  2023,
    1154,  1155,   611,  2028,  3172,  3112,  2984,  3989,  1158,  2812,
    1156,  3071,  1174,  1157,  2380,  1156,  1528,  1815,  1157,  4232,
    4232,  1421,  3328,  2174,  1900,  2381,  3938,   614,  1154,  1155,
    1156,   851, -1726,  1157,  1335,   663,  1931,  1154,  1155,  3204,
    1158,  1093,  2130,  3856,  1203,  1932,  1158,  1154,  1155,  1204,
    1158,  1156,  1933,   616,  1157,  3018,  2769,  2302,  2595,  1204,
    4149,  3019,  1640,  1487,  2173,  2233,   628,  1156,  3115,  1694,
    1157,  1887,  2602,  1156,  1158,  1888,  1157, -2493,  1154,  1155,
    1158,  3675,   919,  1156,  3719,  1156,  1157,   512,  1157,  3030,
    2427,  1154,  1155,  3173,  2532,  3040,   919,  1154,  1155,  1154,
    1155,  1156,  2199,  1724,  1157,  2617,   852,  1158,  2382,  1158,
    3368,  3367,  1663,  1156,  1158,   820,  1157,  1156,  2660,  1124,
    1157,  2111,  2696,  2793,  3041,  1156,  1776,  1158,  1157,  3585,
     919,   629,  1158,  1156,  1158,  3322,  1157,  2770,  1528, -1726,
    1158,  2112,  1156,  1599,  2223,  1157,  2120,  1934,  2133,  2740,
     620,   919,   610,   620,  2134,  2045,   107,  3856,  3856,  2538,
    1176,  1177,  1154,  1155,   610,  1174,  2339,   664,  3754,  3700,
    4198,  1204,  1154,  1155,  2671,  2966,   620,  2627,  1816,  3809,
    1488,  3649,  1826,  3701,  1489,  1204,  3904,  1725,  3676,  2193,
    1158,  4257,  4258,  1726,   610,  1490,  1156,  3372,   610,  1157,
    1154,  1155,   821,  2635,  2138,  1154,  1155,  2539,  1156,  3663,
    2124,  1157,  1125,   919,  3888,  3892,   636,  3591,  3990,  1204,
    2383,  1504,   835,   639,  2629,   620,   620,   610,   610,  3677,
    2636,  3736,  1156,   884,  1158,  1157,  2741,   836,  1158,   620,
    1204,  1050,  3318,  1727, -2359,  1154,  1155,   889,  2142,  1154,
    1155,   885,  2143,  1935,   620,  1154,  1155,  3663,  3858,  1728,
    1171,  1472,   837,  1156,  1528,  1603,  1157,  1158,   641,  2289,
    1798,   885,  1158,   822, -2359,  3540,  1154,  1155,  2268,   643,
    2291,  2147,  1283,  2967,  3541,  2362,  2150,  1158,  1154,  1155,
    1005,  1006,  2384,  3905,  3906,  1939,  1664,  3423,  3907,  3908,
    1156,  2153,  1204,  1157,  3856,  3856,  1156,  4303,  1158,  1157,
    1511,  1302,  2295,  2302,  1179,  1180,  1181,  1182,  1183,  1184,
    1185,  1186,  2165,   610,  1158,   655,  4304,  1491, -1698,  1018,
    1158,   692,  2377, -1613,  2853,  1128,  1321,  2358,  2184,   610,
    1158,   511,  1158,  2663,  2987,  3152,  1156, -1726,  2042,  1157,
    1156,  3153,  3708,  1157,  3006,  3710,  3012,  2771,  1158,  3888,
    3425,  1156,  3921,  3892,  1157,  1373,  1154,  1155,  3702,   657,
    1158,  1373,  3015,   504,  1158,  1287, -1726, -1613,  1288,  3171,
    2545,  4089,  1158,  2078,  3022,  1005,  1006,   512,  3026,  1156,
    1158,  1627,  1157,  3313,  3922,   697,  3027,  1799,  1156,  1158,
    3856,  1157,  2546,  1922,  3028,  1360,  2042,  2372,  1156,  3746,
    2398,  1157,  2526,  3029,  3160,  3856,  2542,  3330,  3331,  2405,
    2406,   660,  1492,  2388,  3542,  3888,  3892, -1698,  1129,  3856,
    2410,  2411,  2412,  2413,   983,  2421,  2422,  2098, -1613,  1156,
    3345, -1698,  1157,  2497,  1875,  1876,  2528,  4205,   661,  2304,
    2305,  2435,  1156,  1158,  1339,  1157,  1174,  2511,  1156,  1339,
    1156,  1157,   798,  1157,  1361,  1158,  1171,  3031,  1640,   803,
    2217,  1183,  1184,  1185,  1186,  4013,  4014,  4015,  4016,  3034,
    2099,  1191, -1613,  2221,  4206, -1698,  3856,  3118,  2571,  1158,
    2933,  3143,   709,   815,  1362,  2907,  1939,  1019,  3856,  3856,
     620, -1726,  1922,  3039,   620,  2934,  2543,  1561,  2581,   495,
     838,   826,  1665,  3923,  1508,  1640,   610,   610,   610,  2566,
    1158,  2799,  2569,  1156,  1289,  1909,  1157,  3977,  1666,   828,
    2989,  1203,  4000,  1156,  3042,  2582,  1157,   829, -2545,  1910,
     832,  3154,   620,  2631,  1510,  3856,  2548,   620,  1640,  2042,
   -1726,  3932,  3933,  2653,  2877,  3856,   834,  1158,  2100,  1191,
    1922,  1156,  4219,  1158,  1157,  2462,  1156,  2117,  1191,  1157,
    4108,  3044,  2841,   725,  3934,  2414,  4028,  3046,  2878,  4031,
    4032,  4033,  4034,  2675,  1940,  2583,  4022,   846,  2584,   952,
    1487,   953,  3856,  3111,  3856,  1939,  2585,  3924,  2871,  2872,
    2562,  2563,  2564,  1158,  3856,  2031,  1156,  1158,  1565,  1157,
    1156,  3070,   504,  1157,   859,  3925,  1156,  3048,  1158,  1157,
     955,  3856,  2378,  3856,  2043,  3856,  2126,  1191, -1698,   972,
    1203,  2032,  3856,   962,  3451,  3452,   818,  1156,  3926,  2415,
    1157,   620,  3856,  2127,  1597,   983,  1158,  2528,  2042,  1156,
     505,  4023,  1157,   971,  1485,  1158,  3856,  3856,   946,   947,
    3049,   948,  1174,   949,  1386,  1158,  2672,  2416,  4297,  3050,
    4299,   620,   993,  3856,  3856,  1011,  1858,  1012,  3856,  3527,
     973,  1016,  2043,  2679,  4125,  4126,   891,   875,  1203,  2685,
    2685,  2302,  2685,  4134,  1387,  3397,  1158,  4316,  1905,  2303,
     919,  2139,  1191,  1922,  1911,  1047,  1363,  1488,    12,  1158,
    3350,  1489,  2140,  1191,  1566,  1158,   105,  1158,  1569,  2704,
    2141,  1191,  1490,  3351,  1048,  1570,  1170,  1156,  1191,  3352,
    1157,  3580,  4347,  4348,  2242,  1049,  2417,  2243,   506,  1051,
    2244,   860,  1640,  2145,  1191,  1388,  2528,  2984,  3115,  1389,
    2727,  2339,  1339,  1194,  2730,  2044,  2379,  2685,  2685,  2685,
    1181,  1182,  1183,  1184,  1185,  1186,   974,   942,  2193,  2749,
    4129,  2751,  -771,  2684,  2684,  2380,  2684,  1154,  1155,  1199,
    1158,  1912,  2464,  2423,  2424,  1940,  2381,  2414,  1052,  1204,
    1158,  1770,  3474,   754,  3584,  3477,  3478,  3947,  3948,   919,
     885,  1053,  1922,  1571,  3590,  1056,  1913,  1859,  1859,   590,
    1176,  1177,  3490,   919,  1057,    23,   861,  2418,  1158,  1058,
    2408,   507,  2586,  1158,  2675,  2043,  2748,  2304,  2305,  3927,
    1641,  1203,  3592,  1059,  1171,  2042,  3189,  3593,  1060,   620,
     620,  2684,  2684,  2684,  1061,  1364,  1062,  2755,  2645,  1191,
    1195,  2415,  3582,  1216,  1491,  1771,  1063,   919,   591,  1573,
     891,   875,  1064,  1158,  1067,  2306,  1914,  1158,  2756,  2382,
    3201,  4021,  1069,  1158,  1365,  1070,  2826,  3594,  3207,  2416,
    2511,  3595,  3209,  2277,  1940,  2511,   105,  2840,  1204,  1071,
    2838,  2511,  3635,  2850,  1158,  2511,  1074,  2849,  1075,  1390,
    1171,  2832,  2757,  1104,  1154,  1155,  1158,  2849,  3651,  2511,
    2511,  1076,   620,  2849, -1698,  1366,  2045,  2874,  2870,  2952,
    3897,  2511,  2882,  1641,  2043,  1123,  3032,  1191,  2885,  2886,
    1203,   592,   610,  2435,  3282,  3084,  3085,  1172,  1137,  1138,
     859,  1077,  3498,  2849,  3561,  3562,  1204,  1078,  2417,  1492,
    2511,  2917,  2278,  3121,  3122,  1079,  2851,  2852,  3125,  3126,
    1915,  1173,  2943,  2587,  1179,  1180,  1181,  1182,  1183,  1184,
    1185,  1186,  3364,  1191,  3338,  1391,  1080,  2524,  3392,  3393,
     975,  2383,   106,  2881,  1158,   504,  3532,  3533,  3499,  1922,
    1081,  2414,  3500,  1082,  3501,   610,  2511,  3568,  3577,  1083,
     919,   107,  1084,  1557,  1558,  1559,  1560,  1561,  1574,  3586,
    1191,  1087,  4109,  1532,  1533,  1534,  2884,  4111,  1088,  4112,
    1094,  2944,   508,    35,  1576,  1545,  3365,   884,  2414,  2418,
    1174,  2900,  1095,  2279,  3603,  1191,  2588,  2419,  1392,  1096,
    3502,   889,   509,   976,  1097,   977,  1098,  2462,  3611,  3612,
    1005,  1006,    40,  2384,  1099,  2415,  1600,  3723,  2424,  1604,
    3738,  3739,  3742,  3739,  1100,  4393,  2687,   860,  2688,  1101,
    2589,   108,  3743,  3739,  1102,  2414,  3801,  3393,  2902,  2969,
    1623,  1624,  1105,  2416,  1628,   671,  3654,  2031,   510,  1204,
    -481,  1106,  2415,  3547,   511,  1107,  1174,  3804,  3739,   919,
     109,   109,  1642,  1643,  1108,  1562,  1563,  1564,  1565,   862,
     863,  2043,   865,  2032,   867,  3812,  3813,  1203,  3946,  3126,
    2416,  3950,  3739,  1109,  1175,     1,   620,     2,  2706,  3951,
    3739,  2250,   868,  2733,  2734,  2735,   512,  2414,   610,  2415,
    2904,  1110,   861,     3,   513,  3953,  3739,     4,  3954,  3739,
    1393,  1111,  2417,   110,  1112,  2251,  2704,   620,  3960,  3961,
    1641,     5,     6,  3657,  3962,  3961,  1113,  2416,  4339,  2252,
     692,  -740,  1114,  1171,     7,     8,   620,    47,  1176,  1177,
    2253,   593,  4024,  4025,  2044,  4145,  3126,  1115,  1204,  2417,
    3142,  1178,     9,  1394,  4146,  3126,  1116,  3573,  1117,  3821,
    1118,  2415,  1119,   594,  1120,  3821,  1776,  1776,  1121,  1339,
      10,  4127,  4128,  1122,  1566,  1126,  1567,  1568,  1569,  4152,
    3393,  1127,  3097,  4196,  4197,  1570,    50,   696,  1130,  2416,
    2254,  2255,    11,  2418,   697,  1131,  2417,   595,  4238,  4239,
    1135,    12,    13,    14,  1176,  1177,  1139,  3141,  2463,  2419,
    1276,  4292,  3284,  2280,    15,    16,  1140,  1640,  2256,  4331,
    4332,  1171,   702,  4020,  2464,  1156,  1141,    17,  1157,  1142,
    2418,  1143,  1005,  1006,  1144,  2511,  2146,  1193,  3503,  2511,
    2511,    18,  1277,   111,  2849,  3504,   919,  1281,  3802,  3803,
    1282,  3805,  3806,  4382,  4383,  -567,   596,   620,  2417,    19,
    2511,  -567,  -567,  1571,  3755,  3756,  1295,  2435,  -567,  1296,
    2378,  1630,  1631,  1297,  2435,  1309,    20,  2418,  2849,  1316,
    2436,    21,  3505,  1311,    22,  2257,  2849,  2436,  3807,  3808,
    2849,   709,  1179,  1180,  1181,  1182,  1183,  1184,  1185,  1186,
    2887,  1319,  2888,  3682,  3683,  2045,  3414,  3415,    23,  1322,
      24,  3609,  3610,  1330,   112,  3195,  3686,  1331,  1572,  1573,
    3768,  3769,  3213,  3689,  3199,   610,  1350,  1354,    25,  1174,
    3269,  1359,  1371,  1380,  1382,  1204,   495,  2258,  1383,  2418,
    3279,  1398,  2849,  2889,  1401,    26,  2378,  1408,  3711,    27,
    1409,  3713,  1418,  3506,  3286,  1419,   720,  1422,  1179,  1180,
    1181,  1182,  1183,  1184,  1185,  1186,  2890,  3297,  1423,  1425,
    1430,   724,   725,  3275,   610,  1435,  3773,  1447,  1453,  1455,
     113,  -567,  -926,  1457,  1460,  3310,  1461,   506,  -567,  1465,
    1466,  1470,  1467,  1471,   506,   862,   863,   864,   865,   866,
     867,  1474,  1475,  2891,  2379,  3507,  1476,  1496,  1497,  3214,
    1498,  1501,  1503,  2419,  1504,  1522,  3289,  1174,   868,  1524,
    1640,  2031,  1189,  2380,  1528,  1535,  4020,  1547,  2031,  1550,
    1586,  1321,  1596,  1597,  2381,  1598,   114,  1621,  1638,  4062,
    1649,  1658,  1674,  1321,  1680,    28,  1700,  2032,  1703,  1705,
    2419,  2086,  1709,  3419,  2032,   800,   801,  1706,  3299,   804,
     805,  1712,    29,   807,  1713,   809,  1714,  3783,  1574,   512,
    1715,  3363,  1719,  1716,  1717,    30,  1718,  1176,  1177,  2749,
    2379,  1721,  1158,  1575,  1576,  1723,    31,  1729,  1731,  2679,
    1732,  1740,  1274,   620,   620,   620,  1741,  2419,  1751,  2380,
    1754,  1762,   528,  1781,  4243,  1782,  1783,  2704,    32,  1784,
    2381,    33,  1791,    34,  1788,  1795,    35,  2382,  1796,    36,
    1801,  2131,  1810,  1833,  1171,  2135,  2727,  3404,  1836,    37,
    3406,    38,  1840,   620,   620,   620,  2748,  1869,  1171,    39,
    3639,   620,  1868,  1870,  1871,    40,  1873,  2672,  1884,  2159,
    1898,  1907,  1953,    41,   885,   885,  1485,  2018,    42,  2419,
    4115,   529,  2036,   746,  2035,  1176,  1177,  2038,  3658,  2056,
    2057,  3659,  2062,  1641,  2072,  2073,  1218,  2074,  2075,  2081,
    2115,  2087,  2437,  2089,  2511,  2090,  2091,   752,  2107,  2106,
      43,   530,   754,  2382,  2511,   755,  2849,  4243,  -567,  2108,
    2113,  1219,  2114,  2124,  2118,  -567,  1641,  2128,  2163,  1220,
    2164,  3931,  2849,  2132,   610,  2136,  2511,  2154,  2155,  2160,
    2194,  2175,  2176,  2177,   531, -1119,  2198,  3023,  2204,  2383,
    1186,  1179,  1180,  1181,  1182,  1183,  1184,  1185,  1186,  1339,
   -1241,  2238,  1557,  1558,  1559,  1560,  1561,  2892,  2214,  3660,
    3661,    44,  2234,  2239,  2261,  2275,  2269,  2286,  1269,  2283,
    2310,  2311,  2327,    45,  2341,  2342,  2343,    46,  2346,  1640,
      47,  2347,  2359,   532,  1221,  4377,    48,  4167,  4248,  4249,
    2348,  4251,  3985,  2361,  1640,  2349,  2366,  2350,  2943,  1640,
    4386,   509,  4167,  2386,  1640,  4377,  2375,  2387,   509,  1222,
    4386,  2384,  2390,  1223,    49,  2383,  4177,  2391,  2397,  2393,
    2404,  3560,  3560,  3560,  2399,  2400,  2401,  2402,  2434,    50,
    1174,  1181,  1182,  1183,  1184,  1185,  1186,   620,  4288,  2403,
    4289,  4290,  3631,  2435,  1174,  2448,  1215, -1415,  3529,  1909,
    1224,  2457,  2453,  2454,  1562,  1563,  1564,  1565,  2458,  2460,
    2467,  2469,  2461,  1910,  2470,  4104,  2471,  2478,  1225,  3552,
    2479,  2483,  1954,  3931,  4102,  2484,  2514,  1955,  2489,  1956,
    2490,  1957,  1226,  2499,  2518,  2549,  2527,  2384,  2567,  2575,
    2571,  2580,  1958,  1959,  2596,  -567,  2893,  2894,  2895,  2896,
    2897,  2898,  -567, -1415,  4099,  3619,  2597,  1270,   -59,  2598,
    1641,  2609,  2222,   533,  2669,  4344,  2694,  2610,  4361,   796,
    2682,   620,  2622,  1960,  2644,  2339,  2651,  2659,  1961,  1962,
     620,  1227,  4167,  2697,  2700,  2707,  1963,  2668, -1415,  2711,
    2699,  2708,  4275,  1757,  1964,   796,  2712,  2713,  2731,  1161,
    1162,  2732,  1965,  2717, -1415,  2319,  2318,  2753,  2754, -1415,
    1818,  1966,  1819,  1566,  3560,  1567,  1568,  1569,  2778,  2763,
    3667,  2787,  2788,   610,  1570,  2789,  1967,  2782,  1176,  1177,
    2805, -1415,  3672,  2809,   534,  2810,  2823,  1163, -1415,  2856,
    1447,  4307,  1176,  1177,  1968,  2858,  2926,  2932,  1164,  1339,
   -1415,  2950,  1969,  1970,  2949,  2936,  2938,  2954,  2955,  1971,
    4167, -1415,  4167,   620,  2957,  2956, -1415,  1972,  1987,  4326,
    2981,  -852,  3001,  1973,  2082, -1415,  3003,  3067,  1911,  4167,
    2990,  2994,  2996,  3051,  1974,  3089,  4389,  3004,  1165,  3005,
    3714,  3007,  3008,  3087,  3090,  3061,  3062,  3718,  3065,  1166,
     535,  3091,  1571,  3069,  1975,  3074,   536,  3665,  3419,  1228,
    4167,  4167,   796,  3783,  3297,  4366,  3077,   796,  1229,  3088,
    3092,  3094,  3694,  3099,  3102,  1287,  1167,  1859,  3103,  3106,
    3120,   537,  3117,  1230,  3127,  3123,  3129,   620,  3130,  3131,
    3139,  3144,  3140,  1976, -1415,  1977,  4369,  3145,   796,  3148,
    3169,  1231,  3161,  1978,  3165,  1912,   538,  1572,  1573,  3180,
    3724,  3166,  3179,  3181,   796,  3192,  3198, -1415,  4102,  3202,
    1979,  3212,   539,  3210,  3273,  3270, -1415,  1005,  1006,  3276,
    1913,  3277,  1179,  1180,  1181,  1182,  1183,  1184,  1185,  1186,
    1168,  3281,  3292,  1980,  1232,  3285,   620,  1180,  1181,  1182,
    1183,  1184,  1185,  1186,  3211,  3283, -1415,  2730,   796,   796,
     796,   796,  3284,  3293,  3298,  2302,  3560,  3560,  3301,  3560,
    3560,   796,  3307,  3327,  3308,  1233,  3309,  1900,  3329,  1981,
    3333,  3334,  3342,  2181,  3341,  3354,  3056,  1980,  3931,  1955,
    1914,  3370,  3374,  3383,  3385,  3388,   498,  1982,  3396,   499,
    1234,  1983,  3394,  3407,  3412,  3420, -1415,  3429,  3430,  1339,
    1235,  3442,  3450,  3453,  3454,  3468,  3459,  3475,  4356,  3523,
    2512,  3526,  3530,  3528,  3536,  3539,  3549,  3548,  3550, -1415,
    3553,  3554,  3556,  3563,  3566,  3567,  3568,  3570,  3569,  1984,
    3574,  3866,   610,  3576,  1985,  3578,  3579,  4356,  3583,  3587,
    3588,  1986,  3589,  3560,  1236,  3604,  1987,  1574,  3598,  1988,
    4391,  3605,  3597,  3606,  3614,  3615,  3612,  3624,  3627,  3628,
    3143,  3632,  1575,  1576,  3633,  3699, -1327, -1332, -1415,  3643,
    3652,  3653,  3655,  3656,  1915,  3673,   610,  3670,  3681,  3918,
    1989,  3514,  3685,  3687,  3698,  3704,  3705,   620,  3706,  3517,
    3712,  3747,  3725,  3741,  1990,  1991,  1992,  1993,  3726,  3751,
    3753,  3752,  3766,  3772,  3757,  3771,  3776,  3788,  3790,  1072,
    3775,  1124,  3811,  1128,   723,  3825,  3867,  3957,  3817,  1994,
    3577,  3870,  3884,  3861,  3824,  3895,  3894,  3899,  3898,  3911,
   -1415,  3900,  3968,  3901,  3914,  3943,  3945,  3975,  3956,  3964,
    -254,  3982,  3987, -1415,  3994,  4005,  3984,  4012,  3997,  4027,
    4029,  4030,  4004,  4035,  4038,  4040,  4042,  4047,  4066,  2921,
    3912, -1415,  4069, -1415,  -272,  4094,  4096,  4097,  4098,  4131,
    4136,  4143,  4114,  4117,  4120,   796,  1995,  1996,  1997,  4153,
    4156,  4157,  4163,  4164,  4174,  1998, -1415, -1415,  4168,  4176,
   -1415, -1415,  4175,  4179,  4186,  4200,  4201,  4202,  4203,  4209,
    4210,  1999,  4213,  4214,  4215,  2000,  4220,  4222,  4224,  4228,
   -2252,  4211,  4212,  4234,  4247,  1641,  4250,  4252,  4253,  4225,
    4263,  4266,  4268,  4279,  4277,  4276,  4285,  4282,  4294,   796,
     796,  4291,  4295,  4300,  4305,  2001,   671,  3999,   796,   796,
     796,   796,   796,   796,   796,  4308,  4296,  2730,  2002,  2730,
    4130,  4301,   796,   796,  4311,   796,   796,  4312,  4315,  4313,
     796,   796,  4319,  4321,   796,   796,   796,   796,  4324,   796,
     796,  4325,  4327,  4330,  4335,  4070,  4334,   796,   796,  4337,
     796,   796,   796,   796,   796,  4345,  4359,   796,   796,   796,
     796,   796,   796,   796,   796,   796,   796,   796,  4362,   796,
    4363,  4378,   796,   796,  4367,  2677,  4388,   796,  3538,  -852,
    2817,   796,   796,   796,  3657,  3729,  4105,  1028,  3995,  4235,
    3727,   692,  4236,  1459,   796,   796,   796,  3731,  3865,  3918,
    4380,  4340,  4349,   796,  3836,  1269,  3837,  3839,   620,  3840,
     796,   796,   796,  3842,   796,  4260,  3843,  4161,  3844,  3845,
    2675,   796,   796,   796,  4261,   796,   796,   796,   796,   796,
    3846,   796,   796,   796,   796,   796,   796,   796,   796,  3847,
    4233,  3850,   796,   796,  3851,  3852,  4173,  4172,   696,  1951,
    1500,  2503,  3873,  3206,  3105,   697,  3617,  3110,  2003,  4124,
    3387,  4119,  4185,  3620,  3913,  4284,  4310,  4246,  3555,  2041,
    1760,  4037,   656,  2501,  2974,  3290,  3467,  2923,  2508,  3455,
    3524,  4245,  3482,   702, -1415,  3483,  3819,  3666,  1641,  3703,
    3690,  4184,  3053,  2807,  3359,  3357,  3355,  4050,   659,   658,
     524,   525,  4052,  4002,  2071,  4007,  4009,  4053,   620,  3883,
    3822,  2561,  2911,     1,  2505,     2,  3669,  2714,  1885,  3456,
    2039,  2294,  2027,  3096,  3384,  2695,  2736,   951,  2650,  2317,
    1326,  3366,  3076,  2594,  1595,     4,  3426,  2800,  2649,  4049,
   -1415,  4255,  3949,  3537,  1270,  4256,  1546,  2666,  4329,     5,
       6,  3792,   709,  3462,  1901,  3785,  4193,  4194,  2743,  2565,
    1702,  2693,     7,     8,  3622,  1439,  1440,  2720,  3400,   620,
    3399,  1748,  1786, -1415,  4182, -1415,  3436,   796,  1441,   939,
       9,  2080,  1046,  2368,  1852,  2943,  2943,   928,  2369,  2235,
     796, -1415,  3466,  1874,  1442,  4265, -1415,  3386,    10,  1793,
    4309,  1218,  4273,  4204,  4254,  4387,  4328,  4390,   796,  3403,
   -1415,  3697,  1804,  3422,   887,  2762,  2197,   720, -1415,   888,
      11,  2760,  2353,  2752,  2315, -1415,  1219,  2759,   723,    12,
      13,    14,   724,   725,  1220,  2274,  1315, -1415,  2249,  1794,
    4011,  2061,    15,    16,  3371,  4017,   857,  1318, -1415,  3722,
     650,   651,  3986, -1415,  1032,  1033,     0,  1034,     0,     0,
    4381,     0, -1415,     0,     0,     0,     0,     0,     0,    18,
    4317,     0,     0,     0,     0,  4322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    19,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1221,
       0,     0,     0,     0,    20,     0,     0,     0,     0,    21,
    4357,     0,    22,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1222,     0,     0,     0,  1223,     0,
       0, -1415,     0,     0,     0,     0,    23,  1641,    24,  4357,
       0,     0,     0,     0,     0,     0,     0,     0,   620,     0,
       0,     0,  1641,     0, -1415,     0,    25,  1641,     0,     0,
    1958,  1959,  1641, -1415,     0,  1224,     0,     0,     0,     0,
       0,     0,     0,    26,     0,     0,     0,    27,     0,     0,
       0,  1958,  1959,  1225,     0,     0,     0,   796,     0,     0,
       0,     0,     0, -1415,  -705,  -705,  1961,  1226,     0,     0,
       0,     0,     0,     0,     0,     0,  -705,     0,     0,     0,
       0,     0,  1964,     0,     0,  -705,  -705,  1961,     0,     0,
    1965,     0,     0,     0,   746,     0,     0,  -705,     0,  3658,
       0,     0,  3659,  1964,     0,     0,     0,     0,     0,     0,
       0,  1965,     0, -1415,  1967,     0,  1227,     0,   752,     0,
       0,     0,     0,   754,     0,     0,   755,     0,  1447,     0,
       0,     0,  1968,     0,     0,  1967, -1415,     0,     0,     0,
       0,     0,     0,    28,     0,     0,     0,     0,     0,  1447,
       0,     0,     0,  1968,     0,   796,   796,   796,     0,     0,
      29,  1973,     0,     0,     0,     0,     0,     0,     0,     0,
     796,     0,     0,    30,     0,     0,     0,     0,     0,     0,
    3660,  3661,  1973,     0,    31, -1415,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   796,     0,     0,     0,
       0,     0,   796,     0,     0,   796,    32,   796,     0,    33,
       0,    34,     0,   796,    35,   796,   796,    36,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    37,     0,    38,
       0,     0,     0,  1977,     0,     0,     0,    39,     0,     0,
       0,  1978,     0,    40,  1228,     0,     0, -1415,     0,     0,
       0,    41,     0,  1229,  1977,     0,    42,     0,  1979, -1415,
   -1415,     0,  1978,     0,     0,     0,     0,     0,  1230,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1415,  1979,
   -1415,     0,     0,     0,   825,     0,  1231,     0,    43,   796,
    1241,  1242,  2551,     0,     0,     0,     0,     0,     0,     0,
     796,     0,     0, -1415, -1415,     0,     0, -1415, -1415,     0,
       0,     0,     0,     0,     0,     0,     0,  1981,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1232,
     796,     0,     0,     0,     0,  1982,     0,     0,  1981,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    44,
     796,     0,     0,     0,     0,     0,  1982,   796,     0,     0,
    1233,    45,     0,     0,     0,    46,     0,     0,    47,     0,
       0,     0,     0,     0,    48,     0,  1243,     0,     0,     0,
       0,     0,     0,     0,     0,  1234,     0,     0,     0,  1986,
       0,     0,     0,     0,     0,  1235,     0,  1988,     0,     0,
       0,     0,    49,     0,     0,     0,  1054,  1244,     0,     0,
    1986,     0,     0,     0,     0,     0,     0,    50,  1988,     0,
       0,  1245,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1086,     0,  1236,
       0,     0,     0,     0,  1246,     0,     0,  1247,     0,     0,
       0,     0,     0,  1103,     0,     0,     0,     0,     0,     0,
    1248,     0,     0,     0,     0,     0,     0,  1994,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1249,     0,     0,     0,     0,     0,  1994,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1148,     0,     0,     0,     0,     0,     0,  1250,     0,     0,
       0,     0,     0,     0,  1251,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1995,  1996,  1997,     0,     0,     0,
       0,     0,     0,  1998,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1995,  1996,  1997,     0,  1999,
       0,     0,     0,  2000,  1998,  1252,     0,     0,   796,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1999,     0,     0,     0,  2000,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2002,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   796,     0,     0,     0,
     796,     0,     0,     0,     0,   796,   796,  2002,     0,     0,
       0,     0,     0,     0,   796,     0,     0,   796,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   796,   796,     0,
     796,   796,     0,   796,   796,   796,   796,   796,     0,     0,
     796,     0,     0,  2976,     0,     0,     0,     0,     0,   796,
       0,     0,     0,     0,     0,     0,   796,     0,   796,     0,
     796,   796,  2552,   796,   796,     0,     0,     0,   796,   796,
     796,     0,     0,     0,   796,   796,   796,  1253,   796,     0,
     796,  1254,   796,     0,   796,     0,   796,     0,     0,     0,
       0,   796,     0,     0,     0,     0,     0,  1255,     0,     0,
       0,     0,     0,     0,     0,  1256,     0,     0,     0,     0,
     796,     0,     0,  1257,  1482,     0,     0,   796,     0,     0,
     796,     0,     0,     0,     0,     0,   796,     0,     0,   796,
       0,     0,     0,   796,     0,     0,     0,     0,     0,     0,
       0,  1258,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1259,  1260,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1526,  1527,
       0,     0,  1242,     0,     0,     0,     0,  1537,  1538,     0,
       0,  1541,  1542,  1543,     0,     0,     0,     0,   796,  1312,
    1242,  1551,  1552,     0,  1553,  1554,     0,     0,     0,  1579,
       0,     0,     0,  1588,  1589,  1590,  1591,  1261,  1593,     0,
       0,     0,     0,     0,     0,     0,  1601,  1602,     0,  1605,
    1606,     0,     0,     0,     0,     0,  1610,  1611,  1612,     0,
       0,  1615,  1616,  1617,  1618,  1619,  1620,     0,  1622,     0,
       0,  1625,  1626,   796,  1262,     0,  1629,     0,     0,     0,
    1632,  1636,  1637,     0,     0,     0,     0,  1243,     0,     0,
       0,     0,     0,  1644,  1645,  1646,  1263,     0,  1264,     0,
       0,     0,  1654,     0,     0,  1243,     0,     0,     0,  1659,
    1660,  1661,     0,     0,     0,     0,  3215,  3216,  1244,     0,
       0,     0,  3217,     0,  3218,     0,  3219,  3220,     0,     0,
       0,     0,  1245,     0,     0,     0,  1244,     0,     0,     0,
       0,     0,  1697,     0,  3221,     0,     0,     0,     0,  2815,
    1245,     0,     0,     0,     0,  1246,  1958,  1959,  1247,     0,
       0,     0,     0,     0,     0,     0,     0,  2815,  2815,     0,
       0,  1248,     0,  1246,     0,     0,  1247,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1248,
    -705,  -705,  1961,  1249,  3222,     0,     0,  3223,     0,     0,
       0,     0,  -705,     0,     0,  3224,     0,     0,  1964,     0,
       0,  1249,     0,     0,     0,     0,  1965,     0,  1250,     0,
       0,     0,     0,     0,  3225,  1251,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1250,     0,     0,     0,
    1967,  3226,     0,  1251,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1447,     0,     0,     0,  1968,     0,
       0,     0,     0,     0,  2815,  2815,  1252,  3227,     0,  3228,
       0,     0,     0,     0,     0,     0,  1803,     0,     0,     0,
       0,     0,  3229,  3230,  1252,     0,     0,  1973,     0,  1812,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1839,     0,     0,
       0,     0,     0,     0,     0,   796,     0,     0,     0,   796,
       0,     0,     0,     0,  3231,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   796,
     796,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3232,     0,     0,     0,     0,  1977,
     796,     0,     0,  3233,  3234,     0,  3235,  1978,     0,   796,
       0,   796,     0,   796,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1979,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1253,     0,
     796,     0,  3236,  3237,  3238,   796,     0,     0,     0,     0,
       0,  1958,  1959,     0,     0,     0,  1253,     0,  1255,     0,
    1313,  3239,  3240,  3241,     0,     0,  1256,     0,  3242,     0,
       0,  3243,   796,     0,  1257,     0,  1255,     0,     0,     0,
       0,     0,     0,  1981,  1256,     0,     0,  1961,  3244,  3245,
       0,     0,  1257,     0,     0,     0,     0,     0,     0,     0,
       0,  1982,  1258,  1964,     0,     0,     0,     0,     0,     0,
       0,  1965,     0,     0,     0,  1259,  1260,     0,  2909,     0,
    1258,  3246,  3247,  1955,     0,  1956,  2092,     0,     0,     0,
       0,     0,     0,  1259,  1260,  1967,     0,     0,  1958,  1959,
       0,     0,     0,   796,     0,     0,  3248,     0,     0,  1447,
       0,     0,     0,  1968,     0,  1986,     0,     0,     0,     0,
       0,     0,     0,  1988,   796,     0,     0,     0,  1261,  1960,
       0,     0,     0,     0,  1961,     0,     0,     0,     0,     0,
       0,     0,  1973,     0,     0,     0,  1261,     0,   796,     0,
    1964,     0,     0,     0,     0,     0,     0,     0,  1965,     0,
    3249,     0,     0,     0,  3250,  1262,     0,  1966,     0,     0,
       0,     0,     0,     0,     0,     0,  3251,     0,     0,     0,
       0,     0,  1967,  1262,  2167,  2169,  2171,  1263,     0,  1264,
       0,     0,     0,  1994,     0,     0,  1447,     0,     0,     0,
    1968,     0,     0,     0,     0,  1263,     0,  1264,  1969,     0,
       0,     0,     0,     0,  1977,  2910,     0,     0,     0,     0,
       0,     0,  1978,  1972,     0,  2206,     0,     0,     0,  1973,
       0,     0,     0,     0,  2211,     0,  2212,     0,  3252,  1979,
       0,     0,  3253,     0,     0,  3254,  3255,  3256,  3257,     0,
    1995,  1996,  1997,     0,     0,     0,     0,     0,     0,  1998,
    1975,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   796,   796,     0,     0,  1999,     0,     0,     0,  2000,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2815,  3258,  3259,     0,     0,  1981,     0,
       0,  1977,     0,     0,     0,     0,     0,     0,     0,  1978,
       0,     0,     0,     0,     0,     0,  1982,     0,  2288,  3260,
       0,     0,  2002,     0,     0,     0,  1979,     0,     0,  2290,
       0,   796,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1980,
       0,     0,     0,     0,     0,     0,   796,     0,     0,  2334,
     796,   796,     0,   796,     0,     0,     0,     0,     0,     0,
    1986,     0,   796,     0,     0,     0,     0,   796,  1988,  2352,
     796,     0,   796,   796,     0,  1981,  2334,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1982,     0,     0,     0,  1983,     0,     0,
       0,     0,     0,     0,     0,   796,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   796,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1994,     0,
    1985,     0,     0,     0,     0,     0,     0,  1986,   796,     0,
       0,     0,     0,     0,     0,  1988,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1995,  1996,  1997,     0,     0,
       0,  1991,     0,   796,  1998,     0,     0,     0,     0,     0,
       0,   796,     0,     0,     0,     0,     0,     0,     0,     0,
    1999,     0,     0,     0,  2000,  1994,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   836,   890,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2002,     0,     0,
       0,     0,     0,     0,   891,   875,     0,  2519,     0,     0,
       0,   892,  1995,  1996,  1997,     0,     0,   893,     0,     0,
       0,  1998,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1999,     0,     0,
     894,  2000,   895,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   896,     0,     0,  2574,     0,     0,     0,  2576,
       0,     0,     0,     0,  2578,  2579,     0,     0,     0,     0,
       0,     0,     0,  2592,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2002,     0,  2599,  2600,     0,  2601,
       0,     0,  2603,  2604,  2605,  2606,  2607,     0,     0,     0,
   -1698,   897,     0,     0,     0,     0,   898,     0,  2611,   899,
       0,     0,     0,     0,     0,  2612,     0,  2613,     0,  2614,
    2615,     0,  2616,     0,     0,     0,     0,  2619,  2620,  2621,
       0,     0,     0,  2623,  2624,  2625,     0,  2626,   900,  2628,
     901,  2630,     0,  2632,     0,  2633,     0,   902,     0,   903,
    2634,     0,     0,     0,     0,     0,     0,     0,     0,   796,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2654,
       0,     0,   904,   905,   906,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2664,     0,     0,  2667,     0,
       0,     0,     0,     0,     0,   796,   796,   907,     0,     0,
       0,     0,     0,     0,   796,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   908,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   909,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   910,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   911,     0,   796,     0,     0,     0,   796,     0,     0,
       0,   912,   913,     0,     0,   914,   915,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   796,     0,   916,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   796,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   917,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   918,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -2294,     0,     0,
       0,     0,     0,   919,     0,     0,     0,     0,     0,  3854,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   920,   921,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   922,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   796,     0,     0,     0,     0,
       0,     0,     0,   796,  2986,     0,   923,     0,  2988,   796,
       0,   796,     0,     0,     0,     0,     0, -2294,     0,     0,
       0,     0,     0,   924,     0,     0,     0,     0,  3010,  3011,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   796,     0,  3033,
       0,     0,     0,  3854,  3854,     0,     0,     0,  3043,     0,
    3045,     0,  3047,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   796,     0,     0,
       0,  3093,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   796,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   796,     0,   796,     0,
       0,     0,  2334,     0,     0,     0,     0,     0,   796,     0,
    3854,  3854,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3155,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4110,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3174,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   796,     0,  3854,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3854,   796,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3854,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   796,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3271,  3272,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   796,  3854,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3854,  3854,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   796,     0,     0,     0,     0,     0,     0,     0,     0,
    3314,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3854,     0,     0,     0,  3332,     0,     0,   796,  3336,
    3337,  3854,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3344,     0,     0,     0,     0,  3346,     0,     0,  3347,
       0,  3348,  3349,     0,     0,     0,     0,     0,     0,     0,
       0,   796,     0,     0,     0,     0,     0,     0,  3854,     0,
    3854,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3854,     0,     0,     0,   796,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3854,     0,  3854,
       0,  3854,     0,  3380,     0,     0,     0,     0,  3854,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3854,     0,
       0,     0,     0,     0,     0,     0,     0,  3380,     0,     0,
       0,     0,  3854,  3854,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3854,
    3854,     0,     0,     0,  3854,     0,     0,     0,     0,     0,
     796,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3380,     0,     0,     0,     0,     0,     0,     0,
    3447,     0,     0,   796,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3380,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3641,  3642,     0,     0,     0,     0,
       0,     0,     0,  3174,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3174,     0,     0,     0,  3750,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3380,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3174,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3937,     0,     0,     0,     0,     0,  3942,     0,
    3944,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3963,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3174,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3174,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4064,     0,  4065,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4073,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4165,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4170,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3380,     0,     0,     0,
       0,     0,     0,     0,   127,     0,   667,   129,   130,   131,
     132,     0,     0,   133,     0,     0,     0,   134,   135,     0,
       0,   668,     0,   137,   138,   139,   140,   669,   142,     0,
     143,     0,     0,   670,   144,   671,   672,   673,   145,   674,
    4218,   146,   147,   148,  1633,   149,     0,   150,   151,     0,
       0,   152,   675,   676,   153,   154,     0,   155,   156,   677,
     678,   158,     0,   159,   160,   161,   162,   163,     0,   679,
     165,     0,   680,   167,     0,   168,   169,   170,   171,   172,
     173,   174,   175,   176,     0,   177,   178,     0,   179,   180,
     181,   681,   183,     0,   682,   683,   184,     0,     0,   185,
     684,   186,   685,     0,   187,   686,   687,  4267,   188,   189,
     190,   688,   689,   690,     0,     0,     0,     0,   691,   193,
     692,     0,     0,   693,   194,   195,     0,   196,     0,     0,
       0,   197,     0,   198,   199,   200,   201,   202,     0,     0,
    4293,   203,     0,     0,   204,   205,   206,     0,     0,     0,
     207,     0,   208,   209,     0,   210,   211,   212,     0,     0,
     213,   214,     0,   215,   216,   217,   218,   219,   220,   694,
       0,   221,   222,   223,   224,   225,   695,   696,   226,   227,
       0,   228,   229,   230,   697,     0,   231,     0,     0,     0,
     698,   233,     0,   234,     0,   235,     0,   236,   699,   238,
     700,     0,   240,     0,   241,     0,   701,     0,   242,   243,
       0,   244,   702,     0,   245,   246,     0,     0,     0,   703,
     248,   249,   250,   704,     0,   251,   252,   253,     0,   254,
       0,   255,     0,     0,     0,   705,   256,   257,   706,  4368,
       0,   258,     0,     0,     0,   259,   260,     0,   261,   262,
       0,     0,     0,   263,     0,     0,   264,   265,     0,  1634,
     266,     0,   707,   267,   268,     0,     0,     0,     0,     0,
     708,   270,  3380,   271,     0,   272,     0,   273,   274,     0,
       0,   709,     0,     0,     0,     0,   275,     0,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,     0,   293,   294,   295,   710,
     296,   297,   298,   299,   711,   300,   301,     0,     0,     0,
       0,   302,   303,   304,   305,   712,   307,     0,     0,   713,
     309,   714,   310,     0,   311,   715,   716,   717,   718,   719,
     316,   317,   318,   319,   320,     0,   720,   321,   322,     0,
       0,   323,   324,   325,   326,   721,   722,   723,   327,   328,
       0,   724,   725,   329,     0,   330,   331,   726,     0,   333,
     334,   335,     0,   336,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   337,   338,   339,   727,   340,   341,     0,
     342,   343,   728,   345,   346,   347,   348,   729,   730,   351,
     731,     0,   352,   353,   354,     0,   355,     0,   356,   357,
     358,   359,   360,     0,   732,   362,   363,     0,     0,   364,
       0,     0,     0,   365,   366,   367,   368,   369,     0,     0,
     370,   371,   372,   373,   374,     0,   375,   376,     0,   377,
     378,   379,   733,   734,   380,     0,   381,     0,   382,   383,
       0,   384,   385,   386,     0,   735,     0,   736,   388,   389,
     390,   391,   392,   737,   738,   395,   396,   397,   398,     0,
     739,   400,     0,     0,     0,   401,   402,   403,   404,     0,
       0,     0,   405,     0,     0,     0,   406,     0,   407,   408,
     409,   410,     0,   411,   412,   413,   414,   415,     0,     0,
       0,     0,     0,   416,   417,   418,     0,   419,   420,     0,
     421,     0,     0,   422,     0,     0,   423,   424,   425,   426,
     427,   428,   429,     0,     0,   740,   741,   430,   431,     0,
     432,   433,   742,   435,   436,   437,   743,   744,   438,   439,
     440,   441,   745,   442,   443,     0,     0,   444,   445,   446,
     447,   448,     0,   746,   449,   450,     0,   451,   747,   748,
     749,   750,     0,     0,     0,     0,   456,   457,   458,   459,
     460,   461,  1635,   462,   463,     0,   751,   752,   753,   465,
     466,   467,   754,   468,   469,   755,   470,   471,     0,   472,
     473,     0,     0,   474,     0,     0,   475,     0,   476,     0,
     756,   478,   479,     0,     0,   757,   758,   759,   760,   480,
       0,     0,   481,   761,     0,   762,   482,   483,   484,   763,
     764,     0,     0,     0,     0,     0,     0,   487,   488,     0,
     489,   490,   491,     0,     0,   765,     0,     0,     0,   766,
     767,     0,     0,     0,     0,   768,   769,     0,     0,   770,
     771,     0,     0,   772,   773,   127,     0,   667,   129,   130,
     131,   132,  2330,     0,   133,     0,     0,     0,   134,   135,
       0,     0,   668,     0,   137,   138,   139,   140,   669,   142,
       0,   143,     0,     0,  2331,   144,   671,   672,   673,   145,
     674,     0,   146,   147,   148,     0,   149,     0,   150,   151,
       0,     0,   152,   675,   676,   153,   154,     0,   155,   156,
     677,   678,   158,     0,   159,   160,   161,   162,   163,     0,
     679,   165,     0,   680,   167,     0,   168,   169,   170,   171,
     172,   173,   174,   175,   176,     0,   177,   178,     0,   179,
     180,   181,   681,   183,     0,   682,   683,   184,     0,     0,
     185,   684,   186,   685,     0,   187,   686,   687,     0,   188,
     189,   190,   688,   689,   690,     0,     0,     0,     0,   691,
     193,   692,     0,     0,  2332,   194,   195,     0,   196,     0,
       0,     0,   197,     0,   198,   199,   200,   201,   202,     0,
       0,     0,   203,     0,     0,   204,   205,   206,     0,     0,
       0,   207,     0,   208,   209,     0,   210,   211,   212,     0,
       0,   213,   214,     0,   215,   216,   217,   218,   219,   220,
     694,     0,   221,   222,   223,   224,   225,   695,   696,   226,
     227,     0,   228,   229,   230,   697,     0,   231,     0,     0,
       0,   698,   233,     0,   234,     0,   235,     0,   236,   699,
     238,   700,     0,   240,     0,   241,     0,   701,     0,   242,
     243,     0,   244,   702,     0,   245,   246,     0,     0,     0,
     703,   248,   249,   250,   704,     0,   251,   252,   253,     0,
     254,     0,   255,     0,     0,     0,   705,   256,   257,   706,
       0,     0,   258,     0,     0,     0,   259,   260,     0,   261,
     262,     0,     0,     0,   263,     0,     0,   264,   265,     0,
       0,   266,     0,   707,   267,   268,     0,     0,     0,     0,
       0,   708,   270,     0,   271,     0,   272,     0,   273,   274,
       0,     0,   709,     0,     0,     0,     0,   275,     0,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,     0,   293,   294,   295,
     710,   296,   297,   298,   299,   711,   300,   301,     0,     0,
       0,     0,   302,   303,   304,   305,   712,   307,     0,     0,
     713,   309,   714,   310,     0,   311,   715,   716,   717,   718,
     719,   316,   317,   318,   319,   320,     0,   720,   321,   322,
       0,     0,   323,   324,   325,   326,   721,   722,   723,   327,
     328,     0,   724,   725,   329,     0,   330,   331,   726,  2333,
     333,   334,   335,     0,   336,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   337,   338,   339,   727,   340,   341,
       0,   342,   343,   728,   345,   346,   347,   348,   729,   730,
     351,   731,     0,   352,   353,   354,     0,   355,     0,   356,
     357,   358,   359,   360,     0,   732,   362,   363,     0,     0,
     364,     0,     0,     0,   365,   366,   367,   368,   369,     0,
       0,   370,   371,   372,   373,   374,     0,   375,   376,     0,
     377,   378,   379,   733,   734,   380,     0,   381,     0,   382,
     383,     0,   384,   385,   386,     0,   735,     0,   736,   388,
     389,   390,   391,   392,   737,   738,   395,   396,   397,   398,
       0,   739,   400,     0,     0,     0,   401,   402,   403,   404,
       0,     0,     0,   405,     0,     0,     0,   406,     0,   407,
     408,   409,   410,     0,   411,   412,   413,   414,   415,     0,
       0,     0,     0,     0,   416,   417,   418,     0,   419,   420,
       0,   421,     0,     0,   422,     0,     0,   423,   424,   425,
     426,   427,   428,   429,     0,     0,   740,   741,   430,   431,
       0,   432,   433,   742,   435,   436,   437,   743,   744,   438,
     439,   440,   441,   745,   442,   443,     0,     0,   444,   445,
     446,   447,   448,     0,   746,   449,   450,     0,   451,   747,
     748,   749,   750,     0,     0,     0,     0,   456,   457,   458,
     459,   460,   461,     0,   462,   463,     0,   751,   752,   753,
     465,   466,   467,   754,   468,   469,   755,   470,   471,     0,
     472,   473,     0,     0,   474,     0,     0,   475,     0,   476,
       0,   756,   478,   479,     0,     0,   757,   758,   759,   760,
     480,     0,     0,   481,   761,     0,   762,   482,   483,   484,
     763,   764,     0,     0,     0,     0,     0,     0,   487,   488,
       0,   489,   490,   491,     0,     0,   765,     0,     0,     0,
     766,   767,     0,     0,     0,     0,   768,   769,     0,     0,
     770,   771,     0,     0,   772,   773,   127,     0,   667,   129,
     130,   131,   132,     0,     0,   133,     0,     0,     0,   134,
     135,     0,     0,   668,     0,   137,   138,   139,   140,   669,
     142,     0,   143,     0,     0,   670,   144,   671,   672,   673,
     145,   674,     0,   146,   147,   148,     0,   149,     0,   150,
     151,     0,     0,   152,   675,   676,   153,   154,     0,   155,
     156,   677,   678,   158,     0,   159,   160,   161,   162,   163,
       0,   679,   165,     0,   680,   167,     0,   168,   169,   170,
     171,   172,   173,   174,   175,   176,     0,   177,   178,     0,
     179,   180,   181,   681,   183,     0,   682,   683,   184,     0,
       0,   185,   684,   186,   685,     0,   187,   686,   687,     0,
     188,   189,   190,   688,   689,   690,     0,     0,     0,     0,
     691,   193,   692,     0,     0,   693,   194,   195,     0,   196,
       0,     0,     0,   197,     0,   198,   199,   200,   201,   202,
       0,     0,     0,   203,     0,     0,   204,   205,   206,     0,
       0,     0,   207,     0,   208,   209,     0,   210,   211,   212,
       0,     0,   213,   214,     0,   215,   216,   217,   218,   219,
     220,   694,     0,   221,   222,   223,   224,   225,   695,   696,
     226,   227,     0,   228,   229,   230,   697,     0,   231,     0,
       0,     0,   698,   233,  2166,   234,     0,   235,     0,   236,
     699,   238,   700,     0,   240,     0,   241,     0,   701,     0,
     242,   243,     0,   244,   702,     0,   245,   246,     0,     0,
       0,   703,   248,   249,   250,   704,     0,   251,   252,   253,
       0,   254,     0,   255,     0,     0,     0,   705,   256,   257,
     706,     0,     0,   258,     0,     0,     0,   259,   260,     0,
     261,   262,     0,     0,     0,   263,     0,     0,   264,   265,
       0,     0,   266,     0,   707,   267,   268,     0,     0,     0,
       0,     0,   708,   270,     0,   271,     0,   272,     0,   273,
     274,     0,     0,   709,     0,     0,     0,     0,   275,     0,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,     0,   293,   294,
     295,   710,   296,   297,   298,   299,   711,   300,   301,     0,
       0,     0,     0,   302,   303,   304,   305,   712,   307,     0,
       0,   713,   309,   714,   310,     0,   311,   715,   716,   717,
     718,   719,   316,   317,   318,   319,   320,     0,   720,   321,
     322,     0,     0,   323,   324,   325,   326,   721,   722,   723,
     327,   328,     0,   724,   725,   329,     0,   330,   331,   726,
       0,   333,   334,   335,     0,   336,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   337,   338,   339,   727,   340,
     341,     0,   342,   343,   728,   345,   346,   347,   348,   729,
     730,   351,   731,     0,   352,   353,   354,     0,   355,     0,
     356,   357,   358,   359,   360,     0,   732,   362,   363,     0,
       0,   364,     0,     0,     0,   365,   366,   367,   368,   369,
       0,     0,   370,   371,   372,   373,   374,     0,   375,   376,
       0,   377,   378,   379,   733,   734,   380,     0,   381,     0,
     382,   383,     0,   384,   385,   386,     0,   735,     0,   736,
     388,   389,   390,   391,   392,   737,   738,   395,   396,   397,
     398,     0,   739,   400,     0,     0,     0,   401,   402,   403,
     404,     0,     0,     0,   405,     0,     0,     0,   406,     0,
     407,   408,   409,   410,     0,   411,   412,   413,   414,   415,
       0,     0,     0,     0,     0,   416,   417,   418,     0,   419,
     420,     0,   421,     0,     0,   422,     0,     0,   423,   424,
     425,   426,   427,   428,   429,     0,     0,   740,   741,   430,
     431,     0,   432,   433,   742,   435,   436,   437,   743,   744,
     438,   439,   440,   441,   745,   442,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   746,   449,   450,     0,   451,
     747,   748,   749,   750,     0,     0,     0,     0,   456,   457,
     458,   459,   460,   461,     0,   462,   463,     0,   751,   752,
     753,   465,   466,   467,   754,   468,   469,   755,   470,   471,
       0,   472,   473,     0,     0,   474,     0,     0,   475,     0,
     476,     0,   756,   478,   479,     0,     0,   757,   758,   759,
     760,   480,     0,     0,   481,   761,     0,   762,   482,   483,
     484,   763,   764,     0,     0,     0,     0,     0,     0,   487,
     488,     0,   489,   490,   491,     0,     0,   765,     0,     0,
       0,   766,   767,     0,     0,     0,     0,   768,   769,     0,
       0,   770,   771,     0,     0,   772,   773,   127,     0,   667,
     129,   130,   131,   132,     0,     0,   133,     0,     0,     0,
     134,   135,     0,     0,   668,     0,   137,   138,   139,   140,
     669,   142,     0,   143,     0,     0,   670,   144,   671,   672,
     673,   145,   674,     0,   146,   147,   148,     0,   149,     0,
     150,   151,     0,     0,   152,   675,   676,   153,   154,     0,
     155,   156,   677,   678,   158,     0,   159,   160,   161,   162,
     163,     0,   679,   165,     0,   680,   167,     0,   168,   169,
     170,   171,   172,   173,   174,   175,   176,     0,   177,   178,
       0,   179,   180,   181,   681,   183,     0,   682,   683,   184,
       0,     0,   185,   684,   186,   685,     0,   187,   686,   687,
       0,   188,   189,   190,   688,   689,   690,     0,     0,     0,
       0,   691,   193,   692,     0,     0,   693,   194,   195,     0,
     196,     0,     0,     0,   197,     0,   198,   199,   200,   201,
     202,     0,     0,     0,   203,     0,     0,   204,   205,   206,
       0,     0,     0,   207,     0,   208,   209,     0,   210,   211,
     212,     0,     0,   213,   214,     0,   215,   216,   217,   218,
     219,   220,   694,     0,   221,   222,   223,   224,   225,   695,
     696,   226,   227,     0,   228,   229,   230,   697,     0,   231,
       0,     0,     0,   698,   233,  2168,   234,     0,   235,     0,
     236,   699,   238,   700,     0,   240,     0,   241,     0,   701,
       0,   242,   243,     0,   244,   702,     0,   245,   246,     0,
       0,     0,   703,   248,   249,   250,   704,     0,   251,   252,
     253,     0,   254,     0,   255,     0,     0,     0,   705,   256,
     257,   706,     0,     0,   258,     0,     0,     0,   259,   260,
       0,   261,   262,     0,     0,     0,   263,     0,     0,   264,
     265,     0,     0,   266,     0,   707,   267,   268,     0,     0,
       0,     0,     0,   708,   270,     0,   271,     0,   272,     0,
     273,   274,     0,     0,   709,     0,     0,     0,     0,   275,
       0,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,     0,   293,
     294,   295,   710,   296,   297,   298,   299,   711,   300,   301,
       0,     0,     0,     0,   302,   303,   304,   305,   712,   307,
       0,     0,   713,   309,   714,   310,     0,   311,   715,   716,
     717,   718,   719,   316,   317,   318,   319,   320,     0,   720,
     321,   322,     0,     0,   323,   324,   325,   326,   721,   722,
     723,   327,   328,     0,   724,   725,   329,     0,   330,   331,
     726,     0,   333,   334,   335,     0,   336,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   337,   338,   339,   727,
     340,   341,     0,   342,   343,   728,   345,   346,   347,   348,
     729,   730,   351,   731,     0,   352,   353,   354,     0,   355,
       0,   356,   357,   358,   359,   360,     0,   732,   362,   363,
       0,     0,   364,     0,     0,     0,   365,   366,   367,   368,
     369,     0,     0,   370,   371,   372,   373,   374,     0,   375,
     376,     0,   377,   378,   379,   733,   734,   380,     0,   381,
       0,   382,   383,     0,   384,   385,   386,     0,   735,     0,
     736,   388,   389,   390,   391,   392,   737,   738,   395,   396,
     397,   398,     0,   739,   400,     0,     0,     0,   401,   402,
     403,   404,     0,     0,     0,   405,     0,     0,     0,   406,
       0,   407,   408,   409,   410,     0,   411,   412,   413,   414,
     415,     0,     0,     0,     0,     0,   416,   417,   418,     0,
     419,   420,     0,   421,     0,     0,   422,     0,     0,   423,
     424,   425,   426,   427,   428,   429,     0,     0,   740,   741,
     430,   431,     0,   432,   433,   742,   435,   436,   437,   743,
     744,   438,   439,   440,   441,   745,   442,   443,     0,     0,
     444,   445,   446,   447,   448,     0,   746,   449,   450,     0,
     451,   747,   748,   749,   750,     0,     0,     0,     0,   456,
     457,   458,   459,   460,   461,     0,   462,   463,     0,   751,
     752,   753,   465,   466,   467,   754,   468,   469,   755,   470,
     471,     0,   472,   473,     0,     0,   474,     0,     0,   475,
       0,   476,     0,   756,   478,   479,     0,     0,   757,   758,
     759,   760,   480,     0,     0,   481,   761,     0,   762,   482,
     483,   484,   763,   764,     0,     0,     0,     0,     0,     0,
     487,   488,     0,   489,   490,   491,     0,     0,   765,     0,
       0,     0,   766,   767,     0,     0,     0,     0,   768,   769,
       0,     0,   770,   771,     0,     0,   772,   773,   127,     0,
     667,   129,   130,   131,   132,     0,     0,   133,     0,     0,
       0,   134,   135,     0,     0,   668,     0,   137,   138,   139,
     140,   669,   142,     0,   143,     0,     0,   670,   144,   671,
     672,   673,   145,   674,     0,   146,   147,   148,     0,   149,
       0,   150,   151,     0,     0,   152,   675,   676,   153,   154,
       0,   155,   156,   677,   678,   158,     0,   159,   160,   161,
     162,   163,     0,   679,   165,     0,   680,   167,     0,   168,
     169,   170,   171,   172,   173,   174,   175,   176,     0,   177,
     178,     0,   179,   180,   181,   681,   183,     0,   682,   683,
     184,     0,     0,   185,   684,   186,   685,     0,   187,   686,
     687,     0,   188,   189,   190,   688,   689,   690,     0,     0,
       0,     0,   691,   193,   692,     0,     0,   693,   194,   195,
       0,   196,     0,     0,     0,   197,     0,   198,   199,   200,
     201,   202,     0,     0,     0,   203,     0,     0,   204,   205,
     206,     0,     0,     0,   207,     0,   208,   209,     0,   210,
     211,   212,     0,     0,   213,   214,     0,   215,   216,   217,
     218,   219,   220,   694,     0,   221,   222,   223,   224,   225,
     695,   696,   226,   227,     0,   228,   229,   230,   697,     0,
     231,     0,     0,     0,   698,   233,  2170,   234,     0,   235,
       0,   236,   699,   238,   700,     0,   240,     0,   241,     0,
     701,     0,   242,   243,     0,   244,   702,     0,   245,   246,
       0,     0,     0,   703,   248,   249,   250,   704,     0,   251,
     252,   253,     0,   254,     0,   255,     0,     0,     0,   705,
     256,   257,   706,     0,     0,   258,     0,     0,     0,   259,
     260,     0,   261,   262,     0,     0,     0,   263,     0,     0,
     264,   265,     0,     0,   266,     0,   707,   267,   268,     0,
       0,     0,     0,     0,   708,   270,     0,   271,     0,   272,
       0,   273,   274,     0,     0,   709,     0,     0,     0,     0,
     275,     0,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,     0,
     293,   294,   295,   710,   296,   297,   298,   299,   711,   300,
     301,     0,     0,     0,     0,   302,   303,   304,   305,   712,
     307,     0,     0,   713,   309,   714,   310,     0,   311,   715,
     716,   717,   718,   719,   316,   317,   318,   319,   320,     0,
     720,   321,   322,     0,     0,   323,   324,   325,   326,   721,
     722,   723,   327,   328,     0,   724,   725,   329,     0,   330,
     331,   726,     0,   333,   334,   335,     0,   336,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   337,   338,   339,
     727,   340,   341,     0,   342,   343,   728,   345,   346,   347,
     348,   729,   730,   351,   731,     0,   352,   353,   354,     0,
     355,     0,   356,   357,   358,   359,   360,     0,   732,   362,
     363,     0,     0,   364,     0,     0,     0,   365,   366,   367,
     368,   369,     0,     0,   370,   371,   372,   373,   374,     0,
     375,   376,     0,   377,   378,   379,   733,   734,   380,     0,
     381,     0,   382,   383,     0,   384,   385,   386,     0,   735,
       0,   736,   388,   389,   390,   391,   392,   737,   738,   395,
     396,   397,   398,     0,   739,   400,     0,     0,     0,   401,
     402,   403,   404,     0,     0,     0,   405,     0,     0,     0,
     406,     0,   407,   408,   409,   410,     0,   411,   412,   413,
     414,   415,     0,     0,     0,     0,     0,   416,   417,   418,
       0,   419,   420,     0,   421,     0,     0,   422,     0,     0,
     423,   424,   425,   426,   427,   428,   429,     0,     0,   740,
     741,   430,   431,     0,   432,   433,   742,   435,   436,   437,
     743,   744,   438,   439,   440,   441,   745,   442,   443,     0,
       0,   444,   445,   446,   447,   448,     0,   746,   449,   450,
       0,   451,   747,   748,   749,   750,     0,     0,     0,     0,
     456,   457,   458,   459,   460,   461,     0,   462,   463,     0,
     751,   752,   753,   465,   466,   467,   754,   468,   469,   755,
     470,   471,     0,   472,   473,     0,     0,   474,     0,     0,
     475,     0,   476,     0,   756,   478,   479,     0,     0,   757,
     758,   759,   760,   480,     0,     0,   481,   761,     0,   762,
     482,   483,   484,   763,   764,     0,     0,     0,     0,     0,
       0,   487,   488,     0,   489,   490,   491,     0,     0,   765,
       0,     0,     0,   766,   767,     0,     0,     0,     0,   768,
     769,     0,     0,   770,   771,     0,     0,   772,   773,   127,
       0,   667,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,     0,   668,     0,   137,   138,
     139,   140,   669,   142,     0,   143,     0,     0,   670,   144,
     671,   672,   673,   145,   674,     0,   146,   147,   148,     0,
     149,     0,   150,   151,     0,     0,   152,   675,   676,   153,
     154,     0,   155,   156,   677,   678,   158,     0,   159,   160,
     161,   162,   163,     0,   679,   165,     0,   680,   167,     0,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   681,   183,     0,   682,
     683,   184,     0,     0,   185,   684,   186,   685,     0,   187,
     686,   687,     0,   188,   189,   190,   688,   689,   690,     0,
       0,     0,     0,   691,   193,   692,     0,     0,   693,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,   208,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,   220,   694,     0,   221,   222,   223,   224,
     225,   695,   696,   226,   227,     0,   228,   229,   230,   697,
       0,   231,     0,     0,     0,   698,   233,     0,   234,     0,
     235,     0,   236,   699,   238,   700,     0,   240,     0,   241,
       0,   701,     0,   242,   243,     0,   244,   702,     0,   245,
     246,     0,     0,     0,   703,   248,   249,   250,   704,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
     705,   256,   257,   706,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,   707,   267,   268,
       0,     0,     0,     0,     0,   708,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,   709,     0,     0,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,   710,   296,   297,   298,   299,   711,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     712,   307,     0,     0,   713,   309,   714,   310,     0,   311,
     715,   716,   717,   718,   719,   316,   317,   318,   319,   320,
       0,   720,   321,   322,     0,     0,   323,   324,   325,   326,
     721,   722,   723,   327,   328,     0,   724,   725,   329,     0,
     330,   331,   726,     0,   333,   334,   335,     0,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,   727,   340,   341,     0,   342,   343,   728,   345,   346,
     347,   348,   729,   730,   351,   731,     0,   352,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   732,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,   378,   379,   733,   734,   380,
       0,   381,     0,   382,   383,     0,   384,   385,   386,     0,
     735,     0,   736,   388,   389,   390,   391,   392,   737,   738,
     395,   396,   397,   398,     0,   739,   400,     0,     0,     0,
     401,   402,   403,   404,     0,     0,     0,   405,     0,     0,
       0,   406,     0,   407,   408,   409,   410,     0,   411,   412,
     413,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,   424,   425,   426,   427,   428,   429,     0,     0,
     740,   741,   430,   431,     0,   432,   433,   742,   435,   436,
     437,   743,   744,   438,   439,   440,   441,   745,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,   746,   449,
     450,     0,   451,   747,   748,   749,   750,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,   751,   752,   753,   465,   466,   467,   754,   468,   469,
     755,   470,   471,     0,   472,   473,     0,     0,   474,     0,
       0,   475,     0,   476,     0,   756,   478,   479,     0,     0,
     757,   758,   759,   760,   480,     0,     0,   481,   761,     0,
     762,   482,   483,   484,   763,   764,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,     0,
     765,     0,     0,     0,   766,   767,     0,     0,     0,     0,
     768,   769,     0,     0,   770,   771,     0,     0,   772,   773,
     127,     0,   667,   129,   130,   131,   132,     0,     0,   133,
       0,     0,     0,   134,   135,     0,     0,   668,     0,   137,
     138,   139,   140,   669,   142,     0,   143,     0,     0,   670,
     144,   671,   672,   673,   145,   674,     0,   146,   147,   148,
       0,   149,     0,   150,   151,     0,     0,   152,   675,   676,
     153,   154,     0,   155,   156,   677,   678,   158,     0,   159,
     160,   161,   162,   163,     0,   679,   165,     0,   680,   167,
       0,   168,   169,   170,   171,   172,   173,   174,   175,   176,
       0,   177,   178,     0,   179,   180,   181,   681,   183,     0,
     682,   683,   184,     0,     0,   185,   684,   186,   685,     0,
     187,   686,   687,     0,   188,   189,   190,   688,   689,   690,
       0,     0,     0,     0,   691,   193,   692,     0,     0,   693,
     194,   195,     0,   196,     0,     0,     0,   197,     0,   198,
     199,   200,   201,   202,     0,     0,     0,   203,     0,     0,
     204,   205,   206,     0,     0,     0,   207,     0,   208,   209,
       0,   210,   211,   212,     0,     0,   213,   214,     0,   215,
     216,   217,   218,   219,   220,   694,     0,   221,   222,   223,
     224,   225,   695,   696,   226,   227,     0,   228,   229,   230,
     697,     0,   231,     0,     0,     0,   698,   233,     0,   234,
       0,   235,     0,   236,   699,   238,   700,     0,   240,     0,
     241,     0,   701,     0,   242,   243,     0,   244,   702,     0,
     245,   246,     0,     0,     0,   703,   248,   249,   250,   704,
       0,   251,   252,   253,     0,   254,     0,   255,     0,     0,
       0,   705,   256,   257,   706,     0,     0,   258,     0,     0,
       0,   259,   260,     0,   261,   262,     0,     0,     0,   263,
       0,     0,   264,   265,     0,     0,   266,     0,   707,   267,
     268,     0,     0,     0,     0,     0,   708,   270,     0,   271,
       0,   272,     0,   273,   274,     0,     0,   709,     0,     0,
       0,     0,   275,     0,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,     0,   293,   294,   295,   710,   296,   297,   298,   299,
     711,   300,   301,     0,     0,     0,     0,   302,   303,   304,
     305,   712,   307,     0,     0,   713,   309,   714,   310,     0,
     311,   715,   716,   717,   718,   719,   316,   317,   318,   319,
     320,     0,   720,   321,   322,     0,     0,   323,   324,   325,
     326,   721,   722,   723,   327,   328,     0,   724,   725,   329,
       0,   330,   331,   726,     0,   333,   334,   335,     0,   336,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   337,
     338,   339,   727,   340,   341,     0,   342,   343,   728,   345,
     346,   347,   348,   729,   730,   351,   731,     0,   352,   353,
     354,     0,   355,     0,   356,   357,   358,   359,   360,     0,
     732,   362,   363,     0,     0,   364,     0,     0,     0,   365,
     366,   367,   368,   369,     0,     0,   370,   371,   372,   373,
     374,     0,   375,   376,     0,   377,   378,   379,   733,   734,
     380,     0,   381,     0,   382,   383,     0,   384,   385,   386,
       0,   735,     0,   736,   388,   389,   390,   391,   392,   737,
     738,   395,   396,   397,   398,     0,   739,   400,     0,     0,
       0,   401,   402,   403,   404,     0,     0,     0,   405,     0,
       0,     0,   406,     0,   407,   408,   409,   410,     0,   411,
     412,   413,   414,   415,     0,     0,     0,     0,     0,   416,
     417,   418,     0,   419,   420,     0,   421,     0,     0,   422,
       0,     0,   423,   424,   425,   426,   427,   428,   429,     0,
       0,   740,   741,   430,   431,     0,   432,   433,   742,   435,
     436,   437,   743,   744,   438,   439,   440,   441,   745,   442,
     443,     0,     0,   444,   445,   446,   447,   448,     0,   746,
     449,   450,     0,   451,   747,   748,   749,   750,     0,     0,
       0,     0,   456,   457,   458,   459,   460,   461,     0,   462,
     463,     0,   751,   752,   753,   465,   466,   467,   754,   468,
     469,   755,   470,   471,     0,   472,   473,     0,     0,   474,
       0,     0,   475,     0,   476,     0,   756,   478,   479,     0,
       0,   757,   758,   759,   760,   480,     0,     0,   481,   761,
       0,   762,   482,   483,   484,   763,   764,     0,     0,     0,
       0,     0,     0,   487,   488,     0,   489,   490,   491,     0,
       0,   765,     0,     0,     0,   766,   767,     0,     0,     0,
       0,   768,  1085,     0,     0,   770,   771,     0,     0,   772,
     773,   127,     0,   667,   129,   130,   131,   132,  1668,     0,
     133,     0,     0,     0,  1669,   135,     0,     0,   668,     0,
     137,   138,   139,   140,   669,   142,     0,   143,     0,     0,
     670,   144,   671,   672,   673,   145,   674,     0,   146,   147,
     148,     0,   149,     0,   150,   151,     0,     0,   152,   675,
     676,   153,   154,     0,   155,   156,   677,   678,   158,     0,
     159,   160,   161,   162,   163,     0,   679,   165,     0,   680,
     167,     0,   168,   169,   170,   171,   172,   173,   174,   175,
     176,     0,   177,   178,     0,   179,   180,   181,   681,   183,
       0,   682,   683,   184,     0,     0,   185,   684,   186,   685,
       0,   187,   686,   687,     0,   188,   189,   190,   688,   689,
     690,     0,     0,     0,     0,   691,   193,   692,     0,     0,
     693,   194,   195,     0,   196,     0,     0,     0,   197,     0,
     198,   199,   200,   201,   202,     0,     0,     0,   203,     0,
       0,   204,   205,   206,     0,     0,     0,   207,     0,   208,
     209,     0,   210,   211,   212,     0,     0,   213,   214,     0,
     215,   216,   217,   218,   219,   220,   694,     0,   221,   222,
     223,   224,   225,   695,   696,   226,   227,     0,   228,   229,
     230,   697,     0,   231,     0,     0,     0,   698,   233,     0,
     234,     0,   235,     0,   236,   699,   238,   700,     0,   240,
       0,   241,     0,   701,     0,   242,   243,     0,   244,   702,
       0,   245,   246,     0,     0,     0,   703,   248,   249,   250,
     704,     0,   251,   252,   253,     0,   254,     0,   255,     0,
       0,     0,   705,   256,   257,   706,     0,     0,   258,     0,
       0,     0,   259,   260,     0,   261,   262,     0,     0,     0,
     263,     0,     0,   264,   265,     0,     0,   266,     0,   707,
     267,   268,     0,     0,     0,     0,     0,   708,   270,     0,
     271,     0,   272,     0,   273,   274,     0,     0,   709,     0,
       0,     0,     0,   275,     0,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,     0,   293,   294,   295,   710,   296,   297,   298,
     299,   711,   300,   301,     0,     0,     0,     0,   302,   303,
     304,   305,   712,   307,     0,     0,   713,   309,   714,   310,
       0,   311,   715,   716,   717,   718,   719,   316,   317,   318,
     319,   320,     0,   720,   321,   322,     0,     0,   323,   324,
     325,   326,   721,     0,   723,   327,   328,     0,   724,   725,
     329,     0,   330,   331,   726,     0,   333,   334,   335,     0,
     336,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     337,   338,   339,   727,   340,   341,     0,   342,   343,   728,
     345,   346,   347,   348,   729,   730,   351,   731,     0,   352,
     353,   354,     0,   355,     0,   356,   357,   358,   359,   360,
       0,   732,   362,   363,     0,     0,   364,     0,     0,     0,
     365,   366,   367,   368,   369,     0,     0,   370,   371,   372,
     373,   374,     0,   375,   376,     0,   377,   378,   379,   733,
     734,   380,     0,   381,     0,   382,   383,     0,   384,   385,
     386,     0,   735,     0,   736,   388,   389,   390,   391,   392,
     737,   738,   395,   396,   397,   398,     0,   739,   400,     0,
       0,     0,   401,   402,   403,   404,     0,     0,     0,   405,
       0,     0,     0,   406,     0,   407,   408,   409,   410,     0,
     411,   412,   413,   414,   415,     0,     0,     0,     0,     0,
     416,   417,   418,     0,   419,   420,     0,   421,     0,     0,
     422,     0,     0,   423,   424,   425,   426,   427,   428,   429,
       0,     0,   740,   741,   430,   431,     0,   432,   433,   742,
     435,   436,   437,   743,   744,   438,   439,   440,   441,   745,
     442,   443,     0,     0,   444,   445,   446,   447,   448,     0,
     746,   449,   450,     0,   451,   747,   748,   749,   750,     0,
       0,     0,     0,   456,   457,   458,   459,   460,   461,     0,
     462,   463,     0,   751,   752,   753,   465,   466,   467,   754,
     468,   469,   755,   470,   471,     0,   472,   473,     0,     0,
     474,     0,     0,   475,     0,   476,     0,   756,   478,   479,
       0,     0,   757,   758,   759,   760,   480,     0,     0,   481,
     761,     0,   762,   482,   483,   484,   763,   764,     0,     0,
       0,     0,     0,     0,   487,   488,     0,   489,   490,   491,
       0,     0,   765,     0,     0,     0,   766,   767,     0,     0,
       0,     0,   768,   769,     0,     0,   770,   771,     0,     0,
     772,   773,   127,     0,   667,   129,   130,   131,   132,     0,
       0,   133,     0,     0,     0,   134,   135,     0,     0,   668,
       0,   137,   138,   139,   140,   669,   142,     0,   143,     0,
       0,   670,   144,   671,   672,   673,   145,   674,     0,   146,
     147,   148,     0,   149,     0,   150,   151,     0,     0,   152,
     675,   676,   153,   154,     0,   155,   156,   677,   678,   158,
       0,   159,   160,   161,   162,   163,     0,   679,   165,     0,
     680,   167,     0,   168,   169,   170,   171,   172,   173,   174,
     175,   176,     0,   177,   178,     0,   179,   180,   181,   681,
     183,     0,   682,   683,   184,     0,     0,   185,   684,   186,
     685,     0,   187,   686,   687,     0,   188,   189,   190,   688,
     689,   690,     0,     0,     0,     0,   691,   193,   692,     0,
       0,   693,   194,   195,     0,   196,     0,     0,     0,   197,
       0,   198,   199,   200,   201,   202,     0,     0,     0,   203,
       0,     0,   204,   205,   206,     0,     0,     0,   207,     0,
     208,   209,     0,   210,   211,   212,     0,     0,   213,   214,
       0,   215,   216,   217,   218,   219,   220,   694,     0,   221,
     222,   223,   224,   225,   695,   696,   226,   227,     0,   228,
     229,   230,   697,     0,   231,     0,     0,     0,   698,   233,
       0,   234,     0,   235,     0,   236,   699,   238,   700,     0,
     240,     0,   241,     0,   701,     0,   242,   243,     0,   244,
     702,     0,   245,   246,     0,     0,     0,   703,   248,   249,
     250,   704,     0,   251,   252,   253,     0,   254,     0,   255,
       0,     0,     0,   705,   256,   257,  2573,     0,     0,   258,
       0,     0,     0,   259,   260,     0,   261,   262,     0,     0,
       0,   263,     0,     0,   264,   265,     0,     0,   266,     0,
     707,   267,   268,     0,     0,     0,     0,     0,   708,   270,
       0,   271,     0,   272,     0,   273,   274,     0,     0,   709,
       0,     0,     0,     0,   275,     0,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,     0,   293,   294,   295,   710,   296,   297,
     298,   299,   711,   300,   301,     0,     0,     0,     0,   302,
     303,   304,   305,   712,   307,     0,     0,   713,   309,   714,
     310,     0,   311,   715,   716,   717,   718,   719,   316,   317,
     318,   319,   320,     0,   720,   321,   322,     0,     0,   323,
     324,   325,   326,   721,   722,   723,   327,   328,     0,   724,
     725,   329,     0,   330,   331,   726,     0,   333,   334,   335,
       0,   336,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   337,   338,   339,   727,   340,   341,     0,   342,   343,
     728,   345,   346,   347,   348,   729,   730,   351,   731,     0,
     352,   353,   354,     0,   355,     0,   356,   357,   358,   359,
     360,     0,   732,   362,   363,     0,     0,   364,     0,     0,
       0,   365,   366,   367,   368,   369,     0,     0,   370,   371,
     372,   373,   374,     0,   375,   376,     0,   377,   378,   379,
     733,   734,   380,     0,   381,     0,   382,   383,     0,   384,
     385,   386,     0,   735,     0,   736,   388,   389,   390,   391,
     392,   737,   738,   395,   396,   397,   398,     0,   739,   400,
       0,     0,     0,   401,   402,   403,   404,     0,     0,     0,
     405,     0,     0,     0,   406,     0,   407,   408,   409,   410,
       0,   411,   412,   413,   414,   415,     0,     0,     0,     0,
       0,   416,   417,   418,     0,   419,   420,     0,   421,     0,
       0,   422,     0,     0,   423,   424,   425,   426,   427,   428,
     429,     0,     0,   740,   741,   430,   431,     0,   432,   433,
     742,   435,   436,   437,   743,   744,   438,   439,   440,   441,
     745,   442,   443,     0,     0,   444,   445,   446,   447,   448,
       0,   746,   449,   450,     0,   451,   747,   748,   749,   750,
       0,     0,     0,     0,   456,   457,   458,   459,   460,   461,
       0,   462,   463,     0,   751,   752,   753,   465,   466,   467,
     754,   468,   469,   755,   470,   471,     0,   472,   473,     0,
       0,   474,     0,     0,   475,     0,   476,     0,   756,   478,
     479,     0,     0,   757,   758,   759,   760,   480,     0,     0,
     481,   761,     0,   762,   482,   483,   484,   763,   764,     0,
       0,     0,     0,     0,     0,   487,   488,     0,   489,   490,
     491,     0,     0,   765,     0,     0,     0,   766,   767,     0,
       0,     0,     0,   768,   769,     0,     0,   770,   771,     0,
       0,   772,   773,   127,     0,   667,   129,   130,   131,   132,
       0,     0,   133,     0,     0,     0,   134,   135,     0,     0,
     668,     0,   137,   138,   139,   140,   669,   142,     0,   143,
       0,     0,   670,   144,   671,   672,   673,   145,   674,     0,
     146,   147,   148,     0,   149,     0,   150,   151,     0,     0,
     152,   675,   676,   153,   154,     0,   155,   156,   677,   678,
     158,     0,   159,   160,   161,   162,   163,     0,   679,   165,
       0,   680,   167,     0,   168,   169,   170,   171,   172,   173,
     174,   175,   176,     0,   177,   178,     0,   179,   180,   181,
     681,   183,     0,   682,   683,   184,     0,     0,   185,   684,
     186,   685,     0,   187,   686,   687,     0,   188,   189,   190,
     688,   689,   690,     0,     0,     0,     0,   691,   193,   692,
       0,     0,   693,   194,   195,     0,   196,     0,     0,     0,
     197,     0,   198,   199,   200,   201,   202,     0,     0,     0,
     203,     0,     0,   204,   205,   206,     0,     0,     0,   207,
       0,   208,   209,     0,   210,   211,   212,     0,     0,   213,
     214,     0,   215,   216,   217,   218,   219,   220,   694,     0,
     221,   222,   223,   224,   225,   695,   696,   226,   227,     0,
     228,   229,   230,   697,     0,   231,     0,     0,     0,   698,
     233,     0,   234,     0,   235,     0,   236,   699,   238,   700,
       0,   240,     0,   241,     0,   701,     0,   242,   243,     0,
     244,   702,     0,   245,   246,     0,     0,     0,   703,   248,
     249,   250,   704,     0,   251,   252,   253,     0,   254,     0,
     255,     0,     0,     0,   705,   256,   257,  2618,     0,     0,
     258,     0,     0,     0,   259,   260,     0,   261,   262,     0,
       0,     0,   263,     0,     0,   264,   265,     0,     0,   266,
       0,   707,   267,   268,     0,     0,     0,     0,     0,   708,
     270,     0,   271,     0,   272,     0,   273,   274,     0,     0,
     709,     0,     0,     0,     0,   275,     0,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,     0,   293,   294,   295,   710,   296,
     297,   298,   299,   711,   300,   301,     0,     0,     0,     0,
     302,   303,   304,   305,   712,   307,     0,     0,   713,   309,
     714,   310,     0,   311,   715,   716,   717,   718,   719,   316,
     317,   318,   319,   320,     0,   720,   321,   322,     0,     0,
     323,   324,   325,   326,   721,   722,   723,   327,   328,     0,
     724,   725,   329,     0,   330,   331,   726,     0,   333,   334,
     335,     0,   336,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   337,   338,   339,   727,   340,   341,     0,   342,
     343,   728,   345,   346,   347,   348,   729,   730,   351,   731,
       0,   352,   353,   354,     0,   355,     0,   356,   357,   358,
     359,   360,     0,   732,   362,   363,     0,     0,   364,     0,
       0,     0,   365,   366,   367,   368,   369,     0,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,   378,
     379,   733,   734,   380,     0,   381,     0,   382,   383,     0,
     384,   385,   386,     0,   735,     0,   736,   388,   389,   390,
     391,   392,   737,   738,   395,   396,   397,   398,     0,   739,
     400,     0,     0,     0,   401,   402,   403,   404,     0,     0,
       0,   405,     0,     0,     0,   406,     0,   407,   408,   409,
     410,     0,   411,   412,   413,   414,   415,     0,     0,     0,
       0,     0,   416,   417,   418,     0,   419,   420,     0,   421,
       0,     0,   422,     0,     0,   423,   424,   425,   426,   427,
     428,   429,     0,     0,   740,   741,   430,   431,     0,   432,
     433,   742,   435,   436,   437,   743,   744,   438,   439,   440,
     441,   745,   442,   443,     0,     0,   444,   445,   446,   447,
     448,     0,   746,   449,   450,     0,   451,   747,   748,   749,
     750,     0,     0,     0,     0,   456,   457,   458,   459,   460,
     461,     0,   462,   463,     0,   751,   752,   753,   465,   466,
     467,   754,   468,   469,   755,   470,   471,     0,   472,   473,
       0,     0,   474,     0,     0,   475,     0,   476,     0,   756,
     478,   479,     0,     0,   757,   758,   759,   760,   480,     0,
       0,   481,   761,     0,   762,   482,   483,   484,   763,   764,
       0,     0,     0,     0,     0,     0,   487,   488,     0,   489,
     490,   491,     0,     0,   765,     0,     0,     0,   766,   767,
       0,     0,     0,     0,   768,   769,     0,     0,   770,   771,
       0,     0,   772,   773,   127,     0,   667,   129,   130,   131,
     132,     0,     0,   133,     0,     0,     0,   134,   135,     0,
       0,   668,     0,   137,   138,   139,   140,   669,   142,     0,
     143,     0,     0,   670,   144,   671,   672,   673,   145,   674,
       0,   146,   147,   148,     0,   149,     0,   150,   151,     0,
       0,   152,   675,   676,   153,   154,     0,   155,   156,   677,
     678,   158,     0,   159,   160,   161,   162,   163,     0,   679,
     165,     0,   680,   167,     0,   168,   169,   170,   171,   172,
     173,   174,   175,   176,     0,   177,   178,     0,   179,   180,
     181,   681,   183,     0,   682,   683,   184,     0,     0,   185,
     684,   186,   685,     0,   187,   686,   687,     0,   188,   189,
     190,   688,   689,   690,     0,     0,     0,     0,   691,   193,
     692,     0,     0,  3379,   194,   195,     0,   196,     0,     0,
       0,   197,     0,   198,   199,   200,   201,   202,     0,     0,
       0,   203,     0,     0,   204,   205,   206,     0,     0,     0,
     207,     0,   208,   209,     0,   210,   211,   212,     0,     0,
     213,   214,     0,   215,   216,   217,   218,   219,   220,   694,
       0,   221,   222,   223,   224,   225,   695,   696,   226,   227,
       0,   228,   229,   230,   697,     0,   231,     0,     0,     0,
     698,   233,     0,   234,     0,   235,     0,   236,   699,   238,
     700,     0,   240,     0,   241,     0,   701,     0,   242,   243,
       0,   244,   702,     0,   245,   246,     0,     0,     0,   703,
     248,   249,   250,   704,     0,   251,   252,   253,     0,   254,
       0,   255,     0,     0,     0,   705,   256,   257,   706,     0,
       0,   258,     0,     0,     0,   259,   260,     0,   261,   262,
       0,     0,     0,   263,     0,     0,   264,   265,     0,     0,
     266,     0,   707,   267,   268,     0,     0,     0,     0,     0,
     708,   270,     0,   271,     0,   272,     0,   273,   274,     0,
       0,   709,     0,     0,     0,     0,   275,     0,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,     0,   293,   294,   295,   710,
     296,   297,   298,   299,   711,   300,   301,     0,     0,     0,
       0,   302,   303,   304,   305,   712,   307,     0,     0,   713,
     309,   714,   310,     0,   311,   715,   716,   717,   718,   719,
     316,   317,   318,   319,   320,     0,   720,   321,   322,     0,
       0,   323,   324,   325,   326,   721,   722,   723,   327,   328,
       0,   724,   725,   329,     0,   330,   331,   726,     0,   333,
     334,   335,     0,   336,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   337,   338,   339,   727,   340,   341,     0,
     342,   343,   728,   345,   346,   347,   348,   729,   730,   351,
     731,     0,   352,   353,   354,     0,   355,     0,   356,   357,
     358,   359,   360,     0,   732,   362,   363,     0,     0,   364,
       0,     0,     0,   365,   366,   367,   368,   369,     0,     0,
     370,   371,   372,   373,   374,     0,   375,   376,     0,   377,
     378,   379,   733,   734,   380,     0,   381,     0,   382,   383,
       0,   384,   385,   386,     0,   735,     0,   736,   388,   389,
     390,   391,   392,   737,   738,   395,   396,   397,   398,     0,
     739,   400,     0,     0,     0,   401,   402,   403,   404,     0,
       0,     0,   405,     0,     0,     0,   406,     0,   407,   408,
     409,   410,     0,   411,   412,   413,   414,   415,     0,     0,
       0,     0,     0,   416,   417,   418,     0,   419,   420,     0,
     421,     0,     0,   422,     0,     0,   423,   424,   425,   426,
     427,   428,   429,     0,     0,   740,   741,   430,   431,     0,
     432,   433,   742,   435,   436,   437,   743,   744,   438,   439,
     440,   441,   745,   442,   443,     0,     0,   444,   445,   446,
     447,   448,     0,   746,   449,   450,     0,   451,   747,   748,
     749,   750,     0,     0,     0,     0,   456,   457,   458,   459,
     460,   461,     0,   462,   463,     0,   751,   752,   753,   465,
     466,   467,   754,   468,   469,   755,   470,   471,     0,   472,
     473,     0,     0,   474,     0,     0,   475,     0,   476,     0,
     756,   478,   479,     0,     0,   757,   758,   759,   760,   480,
       0,     0,   481,   761,     0,   762,   482,   483,   484,   763,
     764,     0,     0,     0,     0,     0,     0,   487,   488,     0,
     489,   490,   491,     0,     0,   765,     0,     0,     0,   766,
     767,     0,     0,     0,     0,   768,   769,     0,     0,   770,
     771,     0,     0,   772,   773,   127,     0,   667,   129,   130,
     131,   132,     0,     0,   133,     0,     0,     0,   134,   135,
       0,     0,   668,     0,   137,   138,   139,   140,   669,   142,
       0,   143,     0,     0,   670,   144,   671,   672,   673,   145,
     674,     0,   146,   147,   148,     0,   149,     0,   150,   151,
       0,     0,   152,   675,   676,   153,   154,     0,   155,   156,
     677,   678,   158,     0,   159,   160,   161,   162,   163,     0,
     679,   165,     0,   680,   167,     0,   168,   169,   170,   171,
     172,   173,   174,   175,   176,     0,   177,   178,     0,   179,
     180,   181,   681,   183,     0,   682,   683,   184,     0,     0,
     185,   684,   186,   685,     0,   187,   686,   687,     0,   188,
     189,   190,   688,   689,   690,     0,     0,     0,     0,   691,
     193,   692,     0,     0,   693,   194,   195,     0,   196,     0,
       0,     0,   197,     0,   198,   199,   200,   201,   202,     0,
       0,     0,   203,     0,     0,   204,   205,   206,     0,     0,
       0,   207,     0,   208,   209,     0,   210,   211,   212,     0,
       0,   213,   214,     0,   215,   216,   217,   218,   219,   220,
     694,     0,   221,   222,   223,   224,   225,   695,   696,   226,
     227,     0,   228,   229,   230,   697,     0,   231,     0,     0,
       0,   698,   233,     0,   234,     0,   235,     0,   236,   699,
     238,   700,     0,   240,     0,   241,     0,   701,     0,   242,
     243,     0,   244,   702,     0,   245,   246,     0,     0,     0,
     703,   248,   249,   250,   704,     0,   251,   252,   253,     0,
     254,     0,   255,     0,     0,     0,   705,   256,   257,   706,
       0,     0,   258,     0,     0,     0,   259,   260,     0,   261,
     262,     0,     0,     0,   263,     0,     0,   264,   265,     0,
       0,   266,     0,   707,   267,   268,     0,     0,     0,     0,
       0,   708,   270,     0,   271,     0,   272,     0,   273,   274,
       0,     0,   709,     0,     0,     0,     0,   275,     0,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,     0,   293,   294,   295,
     710,   296,   297,   298,   299,   711,   300,   301,  4240,     0,
       0,     0,   302,   303,   304,   305,   712,   307,     0,     0,
     713,   309,   714,   310,     0,   311,   715,   716,   717,   718,
     719,   316,   317,   318,   319,   320,     0,   720,   321,   322,
       0,     0,   323,   324,   325,   326,   721,     0,   723,   327,
     328,     0,   724,   725,   329,     0,   330,   331,   726,     0,
     333,   334,   335,     0,   336,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   337,   338,   339,   727,   340,   341,
       0,   342,   343,   728,   345,   346,   347,   348,   729,   730,
     351,   731,     0,   352,   353,   354,     0,   355,     0,   356,
     357,   358,   359,   360,     0,   732,   362,   363,     0,     0,
     364,     0,     0,     0,   365,   366,   367,   368,   369,     0,
       0,   370,   371,   372,   373,   374,     0,   375,   376,     0,
     377,   378,   379,   733,   734,   380,     0,   381,     0,   382,
     383,     0,   384,   385,   386,     0,   735,     0,   736,   388,
     389,   390,   391,   392,   737,   738,   395,   396,   397,   398,
       0,   739,   400,     0,     0,     0,   401,   402,   403,   404,
       0,     0,     0,   405,     0,     0,     0,   406,     0,   407,
     408,   409,   410,     0,   411,   412,   413,   414,   415,     0,
       0,     0,     0,     0,   416,   417,   418,     0,   419,   420,
       0,   421,     0,     0,   422,     0,     0,   423,   424,   425,
     426,   427,   428,   429,     0,     0,   740,   741,   430,   431,
       0,   432,   433,   742,   435,   436,   437,   743,   744,   438,
     439,   440,   441,   745,   442,   443,     0,     0,   444,   445,
     446,   447,   448,     0,   746,   449,   450,     0,   451,   747,
     748,   749,   750,     0,     0,     0,     0,   456,   457,   458,
     459,   460,   461,     0,   462,   463,     0,   751,   752,   753,
     465,   466,   467,   754,   468,   469,   755,   470,   471,     0,
     472,   473,     0,     0,   474,     0,     0,   475,     0,   476,
       0,   756,   478,   479,     0,     0,   757,   758,   759,   760,
     480,     0,     0,   481,   761,     0,   762,   482,   483,   484,
     763,   764,     0,     0,     0,     0,     0,     0,   487,   488,
       0,   489,   490,   491,     0,     0,   765,     0,     0,     0,
     766,   767,     0,     0,     0,     0,   768,   769,     0,     0,
     770,   771,     0,     0,   772,   773,   127,     0,   667,   129,
     130,   131,   132,     0,     0,   133,     0,     0,     0,   134,
     135,     0,     0,   668,     0,   137,   138,   139,   140,   669,
     142,     0,   143,     0,     0,   670,   144,   671,   672,   673,
     145,   674,     0,   146,   147,   148,     0,   149,     0,   150,
     151,     0,     0,   152,   675,   676,   153,   154,     0,   155,
     156,   677,   678,   158,     0,   159,   160,   161,   162,   163,
       0,   679,   165,     0,   680,   167,     0,   168,   169,   170,
     171,   172,   173,   174,   175,   176,     0,   177,   178,     0,
     179,   180,   181,   681,   183,     0,   682,   683,   184,     0,
       0,   185,   684,   186,   685,     0,   187,   686,   687,     0,
     188,   189,   190,   688,   689,   690,     0,     0,     0,     0,
     691,   193,   692,     0,     0,   693,   194,   195,     0,   196,
       0,     0,     0,   197,     0,   198,   199,   200,   201,   202,
       0,     0,     0,   203,     0,     0,   204,   205,   206,     0,
       0,     0,   207,     0,   208,   209,     0,   210,   211,   212,
       0,     0,   213,   214,     0,   215,   216,   217,   218,   219,
     220,   694,     0,   221,   222,   223,   224,   225,   695,   696,
     226,   227,     0,   228,   229,   230,   697,     0,   231,     0,
       0,     0,   698,   233,     0,   234,     0,   235,     0,   236,
     699,   238,   700,     0,   240,     0,   241,     0,   701,     0,
     242,   243,     0,   244,   702,     0,   245,   246,     0,     0,
       0,   703,   248,   249,   250,   704,     0,   251,   252,   253,
       0,   254,     0,   255,     0,     0,     0,   705,   256,   257,
     706,     0,     0,   258,     0,     0,     0,   259,   260,     0,
     261,   262,     0,     0,     0,   263,     0,     0,   264,   265,
       0,     0,   266,     0,   707,   267,   268,     0,     0,     0,
       0,     0,   708,   270,     0,   271,     0,   272,     0,   273,
     274,     0,     0,   709,     0,     0,     0,     0,   275,     0,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,     0,   293,   294,
     295,   710,   296,   297,   298,   299,   711,   300,   301,     0,
       0,     0,     0,   302,   303,   304,   305,   712,   307,     0,
       0,   713,   309,   714,   310,     0,   311,   715,   716,   717,
     718,   719,   316,   317,   318,   319,   320,     0,   720,   321,
     322,     0,     0,   323,   324,   325,   326,   721,     0,   723,
     327,   328,     0,   724,   725,   329,     0,   330,   331,   726,
       0,   333,   334,   335,     0,   336,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   337,   338,   339,   727,   340,
     341,     0,   342,   343,   728,   345,   346,   347,   348,   729,
     730,   351,   731,     0,   352,   353,   354,     0,   355,     0,
     356,   357,   358,   359,   360,     0,   732,   362,   363,     0,
       0,   364,     0,     0,     0,   365,   366,   367,   368,   369,
       0,     0,   370,   371,   372,   373,   374,     0,   375,   376,
       0,   377,   378,   379,   733,   734,   380,     0,   381,     0,
     382,   383,     0,   384,   385,   386,     0,   735,     0,   736,
     388,   389,   390,   391,   392,   737,   738,   395,   396,   397,
     398,     0,   739,   400,     0,     0,     0,   401,   402,   403,
     404,     0,     0,     0,   405,     0,     0,     0,   406,     0,
     407,   408,   409,   410,     0,   411,   412,   413,   414,   415,
       0,     0,     0,     0,     0,   416,   417,   418,     0,   419,
     420,     0,   421,     0,     0,   422,     0,     0,   423,   424,
     425,   426,   427,   428,   429,     0,     0,   740,   741,   430,
     431,     0,   432,   433,   742,   435,   436,   437,   743,   744,
     438,   439,   440,   441,   745,   442,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   746,   449,   450,     0,   451,
     747,   748,   749,   750,     0,     0,     0,     0,   456,   457,
     458,   459,   460,   461,     0,   462,   463,     0,   751,   752,
     753,   465,   466,   467,   754,   468,   469,   755,   470,   471,
       0,   472,   473,     0,     0,   474,     0,     0,   475,     0,
     476,     0,   756,   478,   479,     0,     0,   757,   758,   759,
     760,   480,     0,     0,   481,   761,     0,   762,   482,   483,
     484,   763,   764,     0,     0,     0,     0,     0,     0,   487,
     488,     0,   489,   490,   491,     0,     0,   765,     0,     0,
       0,   766,   767,     0,     0,     0,     0,   768,   769,     0,
       0,   770,   771,     0,     0,   772,   773,   127,     0,   667,
     129,   130,   131,   132,     0,     0,   133,     0,     0,     0,
     134,   135,     0,     0,   668,     0,   137,   138,   139,   140,
     669,   142,     0,   143,     0,     0,   670,   144,   671,   672,
     673,   145,   674,     0,   146,   147,   148,     0,   149,     0,
     150,   151,     0,     0,   152,   675,   676,   153,   154,     0,
     155,   156,   677,   678,   158,     0,   159,   160,   161,   162,
     163,     0,   679,   165,     0,   680,   167,     0,   168,   169,
     170,   171,   172,   173,   174,   175,   176,     0,   177,   178,
       0,   179,   180,   181,   681,   183,     0,   682,   683,   184,
       0,     0,   185,   684,   186,   685,     0,   187,   686,   687,
       0,   188,   189,   190,   688,   689,   690,     0,     0,     0,
       0,   691,   193,   692,     0,     0,   693,   194,   195,     0,
     196,     0,     0,     0,   197,     0,   198,   199,   200,   201,
     202,     0,     0,     0,   203,     0,     0,   204,   205,   206,
       0,     0,     0,   207,     0,   208,   209,     0,   210,   211,
     212,     0,     0,   213,   214,     0,   215,   216,   217,   218,
     219,   220,   694,     0,   221,   222,   223,   224,   225,   695,
     696,   226,   227,     0,   228,   229,   230,   697,     0,   231,
       0,     0,     0,   698,   233,     0,   234,     0,   235,     0,
     236,   699,   238,   700,     0,   240,     0,   241,     0,   701,
       0,   242,   243,     0,   244,   702,     0,   245,   246,     0,
       0,     0,   703,   248,   249,   250,   704,     0,   251,   252,
     253,     0,   254,     0,   255,     0,     0,     0,   705,   256,
     257,  1683,     0,     0,   258,     0,     0,     0,   259,   260,
       0,   261,   262,     0,     0,     0,   263,     0,     0,   264,
     265,     0,     0,   266,     0,   707,   267,   268,     0,     0,
       0,     0,     0,   708,   270,     0,   271,     0,   272,     0,
     273,   274,     0,     0,   709,     0,     0,     0,     0,   275,
       0,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,     0,   293,
     294,   295,   710,   296,   297,   298,   299,   711,   300,   301,
       0,     0,     0,     0,   302,   303,   304,   305,   712,   307,
       0,     0,   713,   309,   714,   310,     0,   311,   715,   716,
     717,   718,   719,   316,   317,   318,   319,   320,     0,   720,
     321,   322,     0,     0,   323,   324,   325,   326,   721,     0,
     723,   327,   328,     0,   724,   725,   329,     0,   330,   331,
     726,     0,   333,   334,   335,     0,   336,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   337,   338,   339,   727,
     340,   341,     0,   342,   343,   728,   345,   346,   347,   348,
     729,   730,   351,   731,     0,   352,   353,   354,     0,   355,
       0,   356,   357,   358,   359,   360,     0,   732,   362,   363,
       0,     0,   364,     0,     0,     0,   365,   366,   367,   368,
     369,     0,     0,   370,   371,   372,   373,   374,     0,   375,
     376,     0,   377,   378,   379,   733,   734,   380,     0,   381,
       0,   382,   383,     0,   384,   385,   386,     0,   735,     0,
     736,   388,   389,   390,   391,   392,   737,   738,   395,   396,
     397,   398,     0,   739,   400,     0,     0,     0,   401,   402,
     403,   404,     0,     0,     0,   405,     0,     0,     0,   406,
       0,   407,   408,   409,   410,     0,   411,   412,   413,   414,
     415,     0,     0,     0,     0,     0,   416,   417,   418,     0,
     419,   420,     0,   421,     0,     0,   422,     0,     0,   423,
     424,   425,   426,   427,   428,   429,     0,     0,   740,   741,
     430,   431,     0,   432,   433,   742,   435,   436,   437,   743,
     744,   438,   439,   440,   441,   745,   442,   443,     0,     0,
     444,   445,   446,   447,   448,     0,   746,   449,   450,     0,
     451,   747,   748,   749,   750,     0,     0,     0,     0,   456,
     457,   458,   459,   460,   461,     0,   462,   463,     0,   751,
     752,   753,   465,   466,   467,   754,   468,   469,   755,   470,
     471,     0,   472,   473,     0,     0,   474,     0,     0,   475,
       0,   476,     0,   756,   478,   479,     0,     0,   757,   758,
     759,   760,   480,     0,     0,   481,   761,     0,   762,   482,
     483,   484,   763,   764,     0,     0,     0,     0,     0,     0,
     487,   488,     0,   489,   490,   491,     0,     0,   765,     0,
       0,     0,   766,   767,     0,     0,     0,     0,   768,   769,
       0,     0,   770,   771,     0,     0,   772,   773,   127,     0,
     667,   129,   130,   131,   132,     0,     0,   133,     0,     0,
       0,   134,   135,     0,     0,   668,     0,   137,   138,   139,
     140,   669,   142,     0,   143,     0,     0,   670,   144,   671,
     672,   673,   145,   674,     0,   146,   147,   148,     0,   149,
       0,   150,   151,     0,     0,   152,   675,   676,   153,   154,
       0,   155,   156,   677,   678,   158,     0,   159,   160,   161,
     162,   163,     0,   679,   165,     0,   680,   167,     0,   168,
     169,   170,   171,   172,   173,   174,   175,   176,     0,   177,
     178,     0,   179,   180,   181,   681,   183,     0,   682,   683,
     184,     0,     0,   185,   684,   186,   685,     0,   187,   686,
     687,     0,   188,   189,   190,   688,   689,   690,     0,     0,
       0,     0,   691,   193,   692,     0,     0,   693,   194,   195,
       0,   196,     0,     0,     0,   197,     0,   198,   199,   200,
     201,   202,     0,     0,     0,   203,     0,     0,   204,   205,
     206,     0,     0,     0,   207,     0,   208,   209,     0,   210,
     211,   212,     0,     0,   213,   214,     0,   215,   216,   217,
     218,   219,   220,   694,     0,   221,   222,   223,   224,   225,
     695,   696,   226,   227,     0,   228,   229,   230,   697,     0,
     231,     0,     0,     0,   698,   233,     0,   234,     0,   235,
       0,   236,   699,   238,   700,     0,   240,     0,   241,     0,
     701,     0,   242,   243,     0,   244,   702,     0,   245,   246,
       0,     0,     0,   703,   248,   249,   250,   704,     0,   251,
     252,   253,     0,   254,     0,   255,     0,     0,     0,   705,
     256,   257,  1685,     0,     0,   258,     0,     0,     0,   259,
     260,     0,   261,   262,     0,     0,     0,   263,     0,     0,
     264,   265,     0,     0,   266,     0,   707,   267,   268,     0,
       0,     0,     0,     0,   708,   270,     0,   271,     0,   272,
       0,   273,   274,     0,     0,   709,     0,     0,     0,     0,
     275,     0,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,     0,
     293,   294,   295,   710,   296,   297,   298,   299,   711,   300,
     301,     0,     0,     0,     0,   302,   303,   304,   305,   712,
     307,     0,     0,   713,   309,   714,   310,     0,   311,   715,
     716,   717,   718,   719,   316,   317,   318,   319,   320,     0,
     720,   321,   322,     0,     0,   323,   324,   325,   326,   721,
       0,   723,   327,   328,     0,   724,   725,   329,     0,   330,
     331,   726,     0,   333,   334,   335,     0,   336,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   337,   338,   339,
     727,   340,   341,     0,   342,   343,   728,   345,   346,   347,
     348,   729,   730,   351,   731,     0,   352,   353,   354,     0,
     355,     0,   356,   357,   358,   359,   360,     0,   732,   362,
     363,     0,     0,   364,     0,     0,     0,   365,   366,   367,
     368,   369,     0,     0,   370,   371,   372,   373,   374,     0,
     375,   376,     0,   377,   378,   379,   733,   734,   380,     0,
     381,     0,   382,   383,     0,   384,   385,   386,     0,   735,
       0,   736,   388,   389,   390,   391,   392,   737,   738,   395,
     396,   397,   398,     0,   739,   400,     0,     0,     0,   401,
     402,   403,   404,     0,     0,     0,   405,     0,     0,     0,
     406,     0,   407,   408,   409,   410,     0,   411,   412,   413,
     414,   415,     0,     0,     0,     0,     0,   416,   417,   418,
       0,   419,   420,     0,   421,     0,     0,   422,     0,     0,
     423,   424,   425,   426,   427,   428,   429,     0,     0,   740,
     741,   430,   431,     0,   432,   433,   742,   435,   436,   437,
     743,   744,   438,   439,   440,   441,   745,   442,   443,     0,
       0,   444,   445,   446,   447,   448,     0,   746,   449,   450,
       0,   451,   747,   748,   749,   750,     0,     0,     0,     0,
     456,   457,   458,   459,   460,   461,     0,   462,   463,     0,
     751,   752,   753,   465,   466,   467,   754,   468,   469,   755,
     470,   471,     0,   472,   473,     0,     0,   474,     0,     0,
     475,     0,   476,     0,   756,   478,   479,     0,     0,   757,
     758,   759,   760,   480,     0,     0,   481,   761,     0,   762,
     482,   483,   484,   763,   764,     0,     0,     0,     0,     0,
       0,   487,   488,     0,   489,   490,   491,     0,     0,   765,
       0,     0,     0,   766,   767,     0,     0,     0,     0,   768,
     769,     0,     0,   770,   771,     0,     0,   772,   773,   127,
       0,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,     0,   136,     0,   137,   138,
     139,   140,   141,   142,     0,   143,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,   150,   151,     0,     0,   152,     0,     0,   153,
     154,     0,   155,   156,   157,     0,   158,     0,   159,   160,
     161,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,  2436,   179,   180,   181,   182,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,   208,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,   220,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,   233,     0,   234,   506,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,  2031,   254,     0,   255,     0,     0,     0,
       0,   256,   257,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,  2032,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
       0,  2970,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,   327,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,   335,     0,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,     0,   340,   341,  1987,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,   381,     0,   382,   383,     0,   384,   385,   386,     0,
     387,     0,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,  -386,     0,     0,
     401,   402,   403,   404,     0,     0,     0,   405,     0,     0,
       0,   406,     0,   407,   408,   409,   410,     0,   411,   412,
     413,   414,   415,   509,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,     0,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,   472,   473,     0,     0,   474,     0,
       0,   475,     0,   476,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,     0,
     492,   127,     0,   128,   129,   130,   131,   132,     0,     0,
     133,     0,     0,     0,   134,   135,     0,     0,   136,  2507,
     137,   138,   139,   140,   141,   142,     0,   143,     0,     0,
       0,   144,     0,     0,     0,   145,     0,     0,   146,   147,
     148,     0,   149,     0,   150,   151,     0,     0,   152,     0,
       0,   153,   154,     0,   155,   156,   157,     0,   158,     0,
     159,   160,   161,   162,   163,     0,   164,   165,     0,   166,
     167,     0,   168,   169,   170,   171,   172,   173,   174,   175,
     176,     0,   177,   178,  2436,   179,   180,   181,   182,   183,
       0,     0,     0,   184,     0,     0,   185,     0,   186,     0,
       0,   187,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,   193,     0,     0,     0,
       0,   194,   195,     0,   196,     0,     0,     0,   197,     0,
     198,   199,   200,   201,   202,     0,     0,     0,   203,     0,
       0,   204,   205,   206,     0,     0,     0,   207,     0,   208,
     209,     0,   210,   211,   212,     0,     0,   213,   214,     0,
     215,   216,   217,   218,   219,   220,     0,     0,   221,   222,
     223,   224,   225,     0,     0,   226,   227,     0,   228,   229,
     230,     0,     0,   231,     0,     0,     0,   232,   233,     0,
     234,   506,   235,     0,   236,   237,   238,   239,     0,   240,
       0,   241,     0,     0,     0,   242,   243,     0,   244,     0,
       0,   245,   246,     0,     0,     0,   247,   248,   249,   250,
       0,     0,   251,   252,   253,  2031,   254,     0,   255,     0,
       0,     0,     0,   256,   257,     0,     0,     0,   258,     0,
       0,     0,   259,   260,     0,   261,   262,     0,     0,     0,
     263,  2032,     0,   264,   265,     0,     0,   266,     0,     0,
     267,   268,     0,     0,     0,     0,     0,   269,   270,     0,
     271,     0,   272,     0,   273,   274,     0,     0,     0,     0,
       0,     0,     0,   275,     0,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,     0,   293,   294,   295,     0,   296,   297,   298,
     299,     0,   300,   301,     0,     0,     0,     0,   302,   303,
     304,   305,   306,   307,     0,     0,   308,   309,     0,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,     0,     0,   321,   322,     0,     0,   323,   324,
     325,   326,     0,     0,     0,   327,   328,     0,     0,     0,
     329,     0,   330,   331,   332,     0,   333,   334,   335,     0,
     336,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     337,   338,   339,     0,   340,   341,     0,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,     0,     0,   352,
     353,   354,     0,   355,     0,   356,   357,   358,   359,   360,
       0,   361,   362,   363,     0,     0,   364,     0,     0,     0,
     365,   366,   367,   368,   369,     0,     0,   370,   371,   372,
     373,   374,     0,   375,   376,     0,   377,   378,   379,     0,
       0,   380,     0,   381,     0,   382,   383,     0,   384,   385,
     386,     0,   387,     0,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,     0,
       0,     0,   401,   402,   403,   404,     0,     0,     0,   405,
       0,     0,     0,   406,     0,   407,   408,   409,   410,     0,
     411,   412,   413,   414,   415,   509,     0,     0,     0,     0,
     416,   417,   418,     0,   419,   420,     0,   421,     0,     0,
     422,     0,     0,   423,   424,   425,   426,   427,   428,   429,
       0,     0,     0,     0,   430,   431,     0,   432,   433,   434,
     435,   436,   437,     0,     0,   438,   439,   440,   441,     0,
     442,   443,     0,     0,   444,   445,   446,   447,   448,     0,
       0,   449,   450,     0,   451,   452,   453,   454,   455,     0,
       0,     0,     0,   456,   457,   458,   459,   460,   461,     0,
     462,   463,     0,     0,     0,   464,   465,   466,   467,     0,
     468,   469,     0,   470,   471,     0,   472,   473,     0,     0,
     474,     0,     0,   475,     0,   476,     0,   477,   478,   479,
       0,     0,     0,     0,     0,     0,   480,     0,     0,   481,
       0,     0,     0,   482,   483,   484,   485,   486,     0,     0,
       0,     0,     0,     0,   487,   488,     0,   489,   490,   491,
       0,     0,   492,   127,     0,   128,   129,   130,   131,   132,
       0,     0,   133,     0,     0,     0,   134,   135,     0,     0,
     136,  2507,   137,   138,   139,   140,   141,   142,     0,   143,
       0,     0,     0,   144,     0,     0,     0,   145,     0,     0,
     146,   147,   148,     0,   149,     0,   150,   151,     0,     0,
     152,     0,     0,   153,   154,     0,   155,   156,   157,     0,
     158,     0,   159,   160,   161,   162,   163,     0,   164,   165,
       0,   166,   167,     0,   168,   169,   170,   171,   172,   173,
     174,   175,   176,     0,   177,   178,     0,   179,   180,   181,
     182,   183,     0,     0,     0,   184,     0,     0,   185,     0,
     186,     0,     0,   187,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,   193,     0,
       0,     0,     0,   194,   195,     0,   196,     0,     0,     0,
     197,     0,   198,   199,   200,   201,   202,     0,     0,     0,
     203,     0,     0,   204,   205,   206,     0,     0,     0,   207,
       0,   208,   209,     0,   210,   211,   212,     0,     0,   213,
     214,     0,   215,   216,   217,   218,   219,   220,     0,     0,
     221,   222,   223,   224,   225,     0,     0,   226,   227,     0,
     228,   229,   230,     0,     0,   231,     0,     0,     0,   232,
     233,     0,   234,     0,   235,     0,   236,   237,   238,   239,
       0,   240,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,     0,   245,   246,     0,     0,     0,   247,   248,
     249,   250,     0,     0,   251,   252,   253,     0,   254,     0,
     255,     0,     0,     0,     0,   256,   257,     0,     0,     0,
     258,     0,     0,     0,   259,   260,     0,   261,   262,     0,
       0,     0,   263,     0,     0,   264,   265,     0,     0,   266,
       0,     0,   267,   268,     0,     0,     0,     0,     0,   269,
     270,     0,   271,     0,   272,     0,   273,   274,     0,     0,
       0,     0,     0,     0,     0,   275,     0,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,     0,   293,   294,   295,     0,   296,
     297,   298,   299,     0,   300,   301,     0,     0,     0,     0,
     302,   303,   304,   305,   306,   307,     0,     0,   308,   309,
       0,   310,     0,   311,     0,   312,   313,   314,   315,   316,
     317,   318,   319,   320,     0,     0,   321,   322,     0,     0,
     323,   324,   325,   326,     0,     0,     0,   327,   328,     0,
       0,     0,   329,     0,   330,   331,   332,     0,   333,   334,
     335,     0,   336,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   337,   338,   339,     0,   340,   341,     0,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,     0,
       0,   352,   353,   354,     0,   355,     0,   356,   357,   358,
     359,   360,     0,   361,   362,   363,     0,     0,   364,     0,
       0,     0,   365,   366,   367,   368,   369,     0,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,   378,
     379,     0,     0,   380,     0,   381,     0,   382,   383,     0,
     384,   385,   386,     0,   387,     0,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,  2302,     0,     0,   401,   402,   403,   404,     0,     0,
       0,   405,     0,     0,     0,   406,     0,   407,   408,   409,
     410,     0,   411,   412,   413,   414,   415,     0,     0,     0,
       0,     0,   416,   417,   418,     0,   419,   420,     0,   421,
       0,     0,   422,     0,     0,   423,   424,   425,   426,   427,
     428,   429,     0,     0,     0,     0,   430,   431,     0,   432,
     433,   434,   435,   436,   437,     0,     0,   438,   439,   440,
     441,     0,   442,   443,     0,     0,   444,   445,   446,   447,
     448,     0,     0,   449,   450,     0,   451,   452,   453,   454,
     455,     0,     0,     0,     0,   456,   457,   458,   459,   460,
     461,     0,   462,   463,     0,     0,     0,   464,   465,   466,
     467,     0,   468,   469,     0,   470,   471,     0,   472,   473,
       0,     0,   474,     0,     0,   475,     0,   476,     0,   477,
     478,   479,     0,     0,     0,     0,     0,     0,   480,     0,
       0,   481,     0,     0,     0,   482,   483,   484,   485,   486,
       0,     0,     0,     0,     0,     0,   487,   488,     0,   489,
     490,   491,     0,     0,   492,   127,     0,   128,   129,   130,
     131,   132,     0,     0,   133,     0,  2721,     0,   134,   135,
       0,     0,   136,   773,   137,   138,   139,   140,   141,   142,
       0,   143,     0,     0,     0,   144,     0,     0,     0,   145,
       0,     0,   146,   147,   148,     0,   149,     0,   150,   151,
       0,     0,   152,     0,     0,   153,   154,     0,   155,   156,
     157,     0,   158,     0,   159,   160,   161,   162,   163,     0,
     164,   165,     0,   166,   167,     0,   168,   169,   170,   171,
     172,   173,   174,   175,   176,     0,   177,   178,     0,   179,
     180,   181,   182,   183,     0,     0,     0,   184,     0,     0,
     185,     0,   186,     0,     0,   187,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
     193,     0,     0,     0,     0,   194,   195,     0,   196,     0,
       0,     0,   197,     0,   198,   199,   200,   201,   202,     0,
       0,     0,   203,     0,     0,   204,   205,   206,     0,     0,
       0,   207,     0,   208,   209,     0,   210,   211,   212,     0,
       0,   213,   214,     0,   215,   216,   217,   218,   219,   220,
       0,     0,   221,   222,   223,   224,   225,     0,     0,   226,
     227,     0,   228,   229,   230,     0,     0,   231,     0,     0,
       0,   232,   233,     0,   234,     0,   235,     0,   236,   237,
     238,   239,     0,   240,     0,   241,     0,     0,     0,   242,
     243,     0,   244,     0,     0,   245,   246,     0,     0,     0,
     247,   248,   249,   250,     0,     0,   251,   252,   253,     0,
     254,     0,   255,     0,     0,     0,     0,   256,   257,     0,
       0,     0,   258,     0,     0,     0,   259,   260,     0,   261,
     262,     0,     0,     0,   263,     0,     0,   264,   265,     0,
       0,   266,     0,     0,   267,   268,     0,     0,     0,     0,
       0,   269,   270,     0,   271,     0,   272,     0,   273,   274,
       0,     0,     0,     0,     0,     0,     0,   275,     0,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,     0,   293,   294,   295,
       0,   296,   297,   298,   299,     0,   300,   301,     0,     0,
       0,     0,   302,   303,   304,   305,   306,   307,     0,     0,
     308,   309,     0,   310,     0,   311,     0,   312,   313,   314,
     315,   316,   317,   318,   319,   320,     0,     0,   321,   322,
       0,     0,   323,   324,   325,   326,     0,     0,     0,   327,
     328,     0,     0,     0,   329,     0,   330,   331,   332,     0,
     333,   334,   335,     0,   336,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   337,   338,   339,     0,   340,   341,
       0,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,     0,     0,   352,   353,   354,     0,   355,     0,   356,
     357,   358,   359,   360,     0,   361,   362,   363,     0,     0,
     364,     0,     0,     0,   365,   366,   367,   368,   369,     0,
       0,   370,   371,   372,   373,   374,     0,   375,   376,     0,
     377,   378,   379,     0,     0,   380,     0,   381,     0,   382,
     383,     0,   384,   385,   386,     0,   387,     0,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,     0,     0,   401,   402,   403,   404,
       0,     0,     0,   405,     0,     0,     0,   406,     0,   407,
     408,   409,   410,     0,   411,   412,   413,   414,   415,     0,
       0,     0,     0,     0,   416,   417,   418,     0,   419,   420,
       0,   421,     0,     0,   422,     0,     0,   423,   424,   425,
     426,   427,   428,   429,     0,     0,     0,     0,   430,   431,
       0,   432,   433,   434,   435,   436,   437,     0,     0,   438,
     439,   440,   441,     0,   442,   443,     0,     0,   444,   445,
     446,   447,   448,     0,     0,   449,   450,     0,   451,   452,
     453,   454,   455,     0,     0,     0,     0,   456,   457,   458,
     459,   460,   461,     0,   462,   463,     0,     0,     0,   464,
     465,   466,   467,     0,   468,   469,     0,   470,   471,     0,
     472,   473,     0,     0,   474,     0,     0,   475,     0,   476,
       0,   477,   478,   479,     0,     0,     0,     0,     0,     0,
     480,     0,     0,   481,     0,     0,     0,   482,   483,   484,
     485,   486,     0,     0,     0,     0,     0,     0,   487,   488,
       0,   489,   490,   491,     0,     0,   492,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   127,  4373,   128,
     129,   130,   131,   132,  4374,   773,   133,     0,     0,     0,
     134,   135,     0,     0,   136,     0,   137,   138,   139,   140,
     141,   142,     0,   143,     0,     0,     0,   144,     0,     0,
       0,   145,     0,     0,   146,   147,   148,     0,   149,     0,
     150,   151,     0,     0,   152,     0,     0,   153,   154,     0,
     155,   156,   157,     0,   158,     0,   159,   160,   161,   162,
     163,     0,   164,   165,     0,   166,   167,     0,   168,   169,
     170,   171,   172,   173,   174,   175,   176,     0,   177,   178,
       0,   179,   180,   181,   182,   183,     0,     0,     0,   184,
       0,     0,   185,     0,   186,     0,     0,   187,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,   193,     0,     0,     0,     0,   194,   195,     0,
     196,     0,     0,     0,   197,     0,   198,   199,   200,   201,
     202,     0,     0,     0,   203,     0,     0,   204,   205,   206,
       0,     0,     0,   207,     0,   208,   209,     0,   210,   211,
     212,     0,     0,   213,   214,     0,   215,   216,   217,   218,
     219,   220,     0,     0,   221,   222,   223,   224,   225,     0,
       0,   226,   227,     0,   228,   229,   230,     0,     0,   231,
       0,     0,     0,   232,   233,     0,   234,     0,   235,     0,
     236,   237,   238,   239,     0,   240,     0,   241,     0,     0,
       0,   242,   243,     0,   244,     0,     0,   245,   246,     0,
       0,     0,   247,   248,   249,   250,     0,     0,   251,   252,
     253,     0,   254,     0,   255,     0,     0,     0,     0,   256,
     257,     0,     0,     0,   258,     0,     0,     0,   259,   260,
       0,   261,   262,     0,     0,     0,   263,     0,     0,   264,
     265,     0,     0,   266,     0,     0,   267,   268,     0,     0,
       0,     0,     0,   269,   270,     0,   271,     0,   272,     0,
     273,   274,     0,     0,     0,     0,     0,     0,     0,   275,
       0,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,     0,   293,
     294,   295,     0,   296,   297,   298,   299,     0,   300,   301,
       0,     0,     0,     0,   302,   303,   304,   305,   306,   307,
       0,     0,   308,   309,     0,   310,     0,   311,     0,   312,
     313,   314,   315,   316,   317,   318,   319,   320,     0,     0,
     321,   322,     0,     0,   323,   324,   325,   326,     0,     0,
       0,   327,   328,     0,     0,     0,   329,     0,   330,   331,
     332,     0,   333,   334,   335,     0,   336,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   337,   338,   339,     0,
     340,   341,     0,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,     0,     0,   352,   353,   354,     0,   355,
       0,   356,   357,   358,   359,   360,     0,   361,   362,   363,
       0,     0,   364,     0,     0,     0,   365,   366,   367,   368,
     369,     0,     0,   370,   371,   372,   373,   374,     0,   375,
     376,     0,   377,   378,   379,     0,     0,   380,     0,   381,
       0,   382,   383,     0,   384,   385,   386,     0,   387,     0,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,     0,     0,     0,   401,   402,
     403,   404,     0,     0,     0,   405,     0,     0,     0,   406,
       0,   407,   408,   409,   410,     0,   411,   412,   413,   414,
     415,     0,     0,     0,     0,     0,   416,   417,   418,     0,
     419,   420,     0,   421,     0,     0,   422,     0,     0,   423,
     424,   425,   426,   427,   428,   429,     0,     0,     0,     0,
     430,   431,     0,   432,   433,   434,   435,   436,   437,     0,
       0,   438,   439,   440,   441,     0,   442,   443,     0,     0,
     444,   445,   446,   447,   448,     0,     0,   449,   450,     0,
     451,   452,   453,   454,   455,     0,     0,     0,     0,   456,
     457,   458,   459,   460,   461,     0,   462,   463,     0,     0,
       0,   464,   465,   466,   467,     0,   468,   469,     0,   470,
     471,     0,   472,   473,     0,     0,   474,     0,     0,   475,
       0,   476,     0,   477,   478,   479,     0,     0,     0,     0,
       0,     0,   480,     0,     0,   481,     0,     0,     0,   482,
     483,   484,   485,   486,     0,     0,     0,     0,     0,     0,
     487,   488,     0,   489,   490,   491,     0,     0,   492,   127,
       0,   128,   129,   130,   131,   132,     0,     0,   133,  1089,
       0,     0,   134,   135,     0,     0,   136,   773,   137,   138,
     139,   140,   141,   142,     0,   143,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,   150,   151,     0,     0,   152,     0,     0,   153,
     154,     0,   155,   156,   157,     0,   158,     0,   159,   160,
     161,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,   208,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,   220,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,   257,     0,  1304,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,   327,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,   335,     0,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,     0,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,   381,     0,   382,   383,     0,   384,   385,   386,     0,
     387,     0,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,     0,     0,     0,   405,     0,     0,
       0,   406,     0,   407,   408,   409,   410,     0,   411,   412,
     413,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,     0,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,   472,   473,     0,     0,   474,     0,
       0,   475,     0,   476,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,     0,
     492,   127,     0,   128,   129,   130,   131,   132,     0,     0,
     133,     0,     0,     0,   134,   135,     0,     0,   136,   544,
     137,   138,   139,   140,   141,   142,     0,   143,     0,     0,
       0,   144,     0,     0,     0,   145,     0,     0,   146,   147,
     148,     0,   149,     0,   150,   151,     0,     0,   152,     0,
       0,   153,   154,     0,   155,   156,   157,     0,   158,     0,
     159,   160,   161,   162,   163,     0,   164,   165,     0,   166,
     167,     0,   168,   169,   170,   171,   172,   173,   174,   175,
     176,     0,   177,   178,     0,   179,   180,   181,   182,   183,
       0,     0,     0,   184,     0,     0,   185,     0,   186,     0,
       0,   187,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,   193,     0,     0,     0,
       0,   194,   195,     0,   196,     0,     0,     0,   197,     0,
     198,   199,   200,   201,   202,     0,     0,     0,   203,     0,
       0,   204,   205,   206,     0,     0,     0,   207,     0,   208,
     209,     0,   210,   211,   212,     0,     0,   213,   214,     0,
     215,   216,   217,   218,   219,   220,     0,     0,   221,   222,
     223,   224,   225,     0,     0,   226,   227,     0,   228,   229,
     230,     0,     0,   231,     0,     0,     0,   232,   233,     0,
     234,     0,   235,     0,   236,   237,   238,   239,     0,   240,
       0,   241,     0,     0,     0,   242,   243,     0,   244,     0,
       0,   245,   246,     0,     0,     0,   247,   248,   249,   250,
       0,     0,   251,   252,   253,     0,   254,     0,   255,     0,
       0,     0,     0,   256,   257,     0,     0,     0,   258,     0,
       0,     0,   259,   260,     0,   261,   262,     0,     0,     0,
     263,     0,     0,   264,   265,     0,     0,   266,     0,     0,
     267,   268,     0,     0,     0,     0,     0,   269,   270,     0,
     271,     0,   272,     0,   273,   274,     0,     0,     0,     0,
       0,     0,     0,   275,     0,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,     0,   293,   294,   295,     0,   296,   297,   298,
     299,     0,   300,   301,     0,     0,     0,     0,   302,   303,
     304,   305,   306,   307,     0,     0,   308,   309,     0,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,     0,     0,   321,   322,     0,     0,   323,   324,
     325,   326,     0,     0,     0,   327,   328,     0,     0,     0,
     329,     0,   330,   331,   332,     0,   333,   334,   335,     0,
     336,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     337,   338,   339,     0,   340,   341,     0,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,     0,     0,   352,
     353,   354,     0,   355,     0,   356,   357,   358,   359,   360,
       0,   361,   362,   363,     0,     0,   364,     0,     0,     0,
     365,   366,   367,   368,   369,     0,     0,   370,   371,   372,
     373,   374,     0,   375,   376,     0,   377,   378,   379,     0,
       0,   380,     0,   381,     0,   382,   383,     0,   384,   385,
     386,     0,   387,     0,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,     0,
       0,     0,   401,   402,   403,   404,     0,     0,     0,   405,
       0,     0,     0,   406,     0,   407,   408,   409,   410,     0,
     411,   412,   413,   414,   415,     0,     0,     0,     0,     0,
     416,   417,   418,     0,   419,   420,     0,   421,     0,     0,
     422,     0,     0,   423,   424,   425,   426,   427,   428,   429,
       0,     0,     0,     0,   430,   431,     0,   432,   433,   434,
     435,   436,   437,     0,     0,   438,   439,   440,   441,     0,
     442,   443,     0,     0,   444,   445,   446,   447,   448,     0,
       0,   449,   450,     0,   451,   452,   453,   454,   455,     0,
       0,     0,     0,   456,   457,   458,   459,   460,   461,     0,
     462,   463,     0,     0,     0,   464,   465,   466,   467,     0,
     468,   469,     0,   470,   471,     0,   472,   473,     0,     0,
     474,     0,     0,   475,     0,   476,     0,   477,   478,   479,
       0,     0,     0,     0,     0,     0,   480,     0,     0,   481,
       0,     0,     0,   482,   483,   484,   485,   486,     0,     0,
       0,     0,     0,     0,   487,   488,     0,   489,   490,   491,
       0,     0,   492,   127,     0,   128,   129,   130,   131,   132,
       0,     0,   133,  2506,     0,     0,   134,   135,     0,     0,
     136,  2507,   137,   138,   139,   140,   141,   142,     0,   143,
       0,     0,     0,   144,     0,     0,     0,   145,     0,     0,
     146,   147,   148,     0,   149,     0,   150,   151,     0,     0,
     152,     0,     0,   153,   154,     0,   155,   156,   157,     0,
     158,     0,   159,   160,   161,   162,   163,     0,   164,   165,
       0,   166,   167,     0,   168,   169,   170,   171,   172,   173,
     174,   175,   176,     0,   177,   178,     0,   179,   180,   181,
     182,   183,     0,     0,     0,   184,     0,     0,   185,     0,
     186,     0,     0,   187,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,   193,     0,
       0,     0,     0,   194,   195,     0,   196,     0,     0,     0,
     197,     0,   198,   199,   200,   201,   202,     0,     0,     0,
     203,     0,     0,   204,   205,   206,     0,     0,     0,   207,
       0,   208,   209,     0,   210,   211,   212,     0,     0,   213,
     214,     0,   215,   216,   217,   218,   219,   220,     0,     0,
     221,   222,   223,   224,   225,     0,     0,   226,   227,     0,
     228,   229,   230,     0,     0,   231,     0,     0,     0,   232,
     233,     0,   234,     0,   235,     0,   236,   237,   238,   239,
       0,   240,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,     0,   245,   246,     0,     0,     0,   247,   248,
     249,   250,     0,     0,   251,   252,   253,     0,   254,     0,
     255,     0,     0,     0,     0,   256,   257,     0,     0,     0,
     258,     0,     0,     0,   259,   260,     0,   261,   262,     0,
       0,     0,   263,     0,     0,   264,   265,     0,     0,   266,
       0,     0,   267,   268,     0,     0,     0,     0,     0,   269,
     270,     0,   271,     0,   272,     0,   273,   274,     0,     0,
       0,     0,     0,     0,     0,   275,     0,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,     0,   293,   294,   295,     0,   296,
     297,   298,   299,     0,   300,   301,     0,     0,     0,     0,
     302,   303,   304,   305,   306,   307,     0,     0,   308,   309,
       0,   310,     0,   311,     0,   312,   313,   314,   315,   316,
     317,   318,   319,   320,     0,     0,   321,   322,     0,     0,
     323,   324,   325,   326,     0,     0,     0,   327,   328,     0,
       0,     0,   329,     0,   330,   331,   332,     0,   333,   334,
     335,     0,   336,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   337,   338,   339,     0,   340,   341,     0,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,     0,
       0,   352,   353,   354,     0,   355,     0,   356,   357,   358,
     359,   360,     0,   361,   362,   363,     0,     0,   364,     0,
       0,     0,   365,   366,   367,   368,   369,     0,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,   378,
     379,     0,     0,   380,     0,   381,     0,   382,   383,     0,
     384,   385,   386,     0,   387,     0,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,     0,     0,   401,   402,   403,   404,     0,     0,
       0,   405,     0,     0,     0,   406,     0,   407,   408,   409,
     410,     0,   411,   412,   413,   414,   415,     0,     0,     0,
       0,     0,   416,   417,   418,     0,   419,   420,     0,   421,
       0,     0,   422,     0,     0,   423,   424,   425,   426,   427,
     428,   429,     0,     0,     0,     0,   430,   431,     0,   432,
     433,   434,   435,   436,   437,     0,     0,   438,   439,   440,
     441,     0,   442,   443,     0,     0,   444,   445,   446,   447,
     448,     0,     0,   449,   450,     0,   451,   452,   453,   454,
     455,     0,     0,     0,     0,   456,   457,   458,   459,   460,
     461,     0,   462,   463,     0,     0,     0,   464,   465,   466,
     467,     0,   468,   469,     0,   470,   471,     0,   472,   473,
       0,     0,   474,     0,     0,   475,     0,   476,     0,   477,
     478,   479,     0,     0,     0,     0,     0,     0,   480,     0,
       0,   481,     0,     0,     0,   482,   483,   484,   485,   486,
       0,     0,     0,     0,     0,     0,   487,   488,     0,   489,
     490,   491,     0,     0,   492,     0,     0,     0,     0,     0,
    2683,   127,     0,   128,   129,   130,   131,   132,     0,     0,
     133,     0,     0,   544,   134,   135,     0,     0,   136,     0,
     137,   138,   139,   140,   141,   142,     0,   143,     0,     0,
       0,   144,     0,     0,     0,   145,     0,     0,   146,   147,
     148,     0,   149,     0,   150,   151,     0,     0,   152,     0,
       0,   153,   154,     0,   155,   156,   157,     0,   158,     0,
     159,   160,   161,   162,   163,     0,   164,   165,     0,   166,
     167,     0,   168,   169,   170,   171,   172,   173,   174,   175,
     176,     0,   177,   178,     0,   179,   180,   181,   182,   183,
       0,     0,     0,   184,     0,     0,   185,     0,   186,     0,
       0,   187,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,   193,     0,     0,     0,
       0,   194,   195,     0,   196,     0,     0,     0,   197,     0,
     198,   199,   200,   201,   202,     0,     0,     0,   203,     0,
       0,   204,   205,   206,     0,     0,     0,   207,     0,   208,
     209,     0,   210,   211,   212,     0,     0,   213,   214,     0,
     215,   216,   217,   218,   219,   220,     0,     0,   221,   222,
     223,   224,   225,     0,     0,   226,   227,     0,   228,   229,
     230,     0,     0,   231,     0,     0,     0,   232,   233,     0,
     234,     0,   235,     0,   236,   237,   238,   239,     0,   240,
       0,   241,     0,     0,     0,   242,   243,     0,   244,     0,
       0,   245,   246,     0,     0,     0,   247,   248,   249,   250,
       0,     0,   251,   252,   253,     0,   254,     0,   255,     0,
       0,     0,     0,   256,   257,     0,     0,     0,   258,     0,
       0,     0,   259,   260,     0,   261,   262,     0,     0,     0,
     263,     0,     0,   264,   265,     0,     0,   266,     0,     0,
     267,   268,     0,     0,     0,     0,     0,   269,   270,     0,
     271,     0,   272,     0,   273,   274,     0,     0,     0,     0,
       0,     0,     0,   275,     0,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,     0,   293,   294,   295,     0,   296,   297,   298,
     299,     0,   300,   301,     0,     0,     0,     0,   302,   303,
     304,   305,   306,   307,     0,     0,   308,   309,     0,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,     0,     0,   321,   322,     0,     0,   323,   324,
     325,   326,     0,     0,     0,   327,   328,     0,     0,     0,
     329,     0,   330,   331,   332,     0,   333,   334,   335,     0,
     336,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     337,   338,   339,     0,   340,   341,     0,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,     0,     0,   352,
     353,   354,     0,   355,     0,   356,   357,   358,   359,   360,
       0,   361,   362,   363,     0,     0,   364,     0,     0,     0,
     365,   366,   367,   368,   369,     0,     0,   370,   371,   372,
     373,   374,     0,   375,   376,     0,   377,   378,   379,     0,
       0,   380,     0,   381,     0,   382,   383,     0,   384,   385,
     386,     0,   387,     0,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,     0,
       0,     0,   401,   402,   403,   404,     0,     0,     0,   405,
       0,     0,     0,   406,     0,   407,   408,   409,   410,     0,
     411,   412,   413,   414,   415,     0,     0,     0,     0,     0,
     416,   417,   418,     0,   419,   420,     0,   421,     0,     0,
     422,     0,     0,   423,   424,   425,   426,   427,   428,   429,
       0,     0,     0,     0,   430,   431,     0,   432,   433,   434,
     435,   436,   437,     0,     0,   438,   439,   440,   441,     0,
     442,   443,     0,     0,   444,   445,   446,   447,   448,     0,
       0,   449,   450,     0,   451,   452,   453,   454,   455,     0,
       0,     0,     0,   456,   457,   458,   459,   460,   461,     0,
     462,   463,     0,     0,     0,   464,   465,   466,   467,     0,
     468,   469,     0,   470,   471,     0,   472,   473,     0,     0,
     474,     0,     0,   475,     0,   476,     0,   477,   478,   479,
       0,     0,     0,     0,     0,     0,   480,     0,     0,   481,
       0,     0,     0,   482,   483,   484,   485,   486,     0,     0,
       0,     0,     0,     0,   487,   488,     0,   489,   490,   491,
       0,     0,   492,     0,     0,   127,     0,   128,   129,   130,
     131,   132,     0,     0,   133,     0,     0,     0,   134,   135,
    4374,   773,   136,     0,   137,   138,   139,   140,   141,   142,
       0,   143,     0,     0,     0,   144,     0,     0,     0,   145,
       0,     0,   146,   147,   148,     0,   149,     0,   150,   151,
       0,     0,   152,     0,     0,   153,   154,     0,   155,   156,
     157,     0,   158,     0,   159,   160,   161,   162,   163,     0,
     164,   165,     0,   166,   167,     0,   168,   169,   170,   171,
     172,   173,   174,   175,   176,     0,   177,   178,     0,   179,
     180,   181,   182,   183,     0,     0,     0,   184,     0,     0,
     185,     0,   186,     0,     0,   187,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
     193,     0,     0,     0,     0,   194,   195,     0,   196,     0,
       0,     0,   197,     0,   198,   199,   200,   201,   202,     0,
       0,     0,   203,     0,     0,   204,   205,   206,     0,     0,
       0,   207,     0,   208,   209,     0,   210,   211,   212,     0,
       0,   213,   214,     0,   215,   216,   217,   218,   219,   220,
       0,     0,   221,   222,   223,   224,   225,     0,     0,   226,
     227,     0,   228,   229,   230,     0,     0,   231,     0,     0,
       0,   232,   233,     0,   234,     0,   235,     0,   236,   237,
     238,   239,     0,   240,     0,   241,     0,     0,     0,   242,
     243,     0,   244,     0,     0,   245,   246,     0,     0,     0,
     247,   248,   249,   250,     0,     0,   251,   252,   253,     0,
     254,     0,   255,     0,     0,     0,     0,   256,   257,     0,
       0,     0,   258,     0,     0,     0,   259,   260,     0,   261,
     262,     0,     0,     0,   263,     0,     0,   264,   265,     0,
       0,   266,     0,     0,   267,   268,     0,     0,     0,     0,
       0,   269,   270,     0,   271,     0,   272,     0,   273,   274,
       0,     0,     0,     0,     0,     0,     0,   275,     0,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,     0,   293,   294,   295,
       0,   296,   297,   298,   299,     0,   300,   301,     0,     0,
       0,     0,   302,   303,   304,   305,   306,   307,     0,     0,
     308,   309,     0,   310,     0,   311,     0,   312,   313,   314,
     315,   316,   317,   318,   319,   320,     0,     0,   321,   322,
       0,     0,   323,   324,   325,   326,     0,     0,     0,   327,
     328,     0,     0,     0,   329,     0,   330,   331,   332,     0,
     333,   334,   335,     0,   336,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   337,   338,   339,     0,   340,   341,
       0,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,     0,     0,   352,   353,   354,     0,   355,     0,   356,
     357,   358,   359,   360,     0,   361,   362,   363,     0,     0,
     364,     0,     0,     0,   365,   366,   367,   368,   369,     0,
       0,   370,   371,   372,   373,   374,     0,   375,   376,     0,
     377,   378,   379,     0,     0,   380,     0,   381,     0,   382,
     383,     0,   384,   385,   386,     0,   387,     0,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,     0,     0,   401,   402,   403,   404,
       0,     0,     0,   405,     0,     0,     0,   406,     0,   407,
     408,   409,   410,     0,   411,   412,   413,   414,   415,     0,
       0,     0,     0,     0,   416,   417,   418,     0,   419,   420,
       0,   421,     0,     0,   422,     0,     0,   423,   424,   425,
     426,   427,   428,   429,     0,     0,     0,     0,   430,   431,
       0,   432,   433,   434,   435,   436,   437,     0,     0,   438,
     439,   440,   441,     0,   442,   443,     0,     0,   444,   445,
     446,   447,   448,     0,     0,   449,   450,     0,   451,   452,
     453,   454,   455,     0,     0,     0,     0,   456,   457,   458,
     459,   460,   461,     0,   462,   463,     0,     0,     0,   464,
     465,   466,   467,     0,   468,   469,     0,   470,   471,     0,
     472,   473,     0,     0,   474,     0,     0,   475,     0,   476,
       0,   477,   478,   479,     0,     0,     0,     0,     0,     0,
     480,     0,     0,   481,     0,     0,     0,   482,   483,   484,
     485,   486,     0,     0,     0,     0,     0,     0,   487,   488,
       0,   489,   490,   491,     0,     0,   492,   127,     0,   128,
     129,   130,   131,   132,     0,     0,   133,     0,     0,     0,
     134,   135,     0,     0,   136,   544,   137,   138,   139,   140,
     141,   142,     0,   143,     0,     0,     0,   144,     0,     0,
       0,   145,     0,     0,   146,   147,   148,     0,   149,     0,
     150,   151,     0,     0,   152,     0,     0,   153,   154,     0,
     155,   156,   157,     0,   158,     0,   159,   160,   161,   162,
     163,     0,   164,   165,     0,   166,   167,     0,   168,   169,
     170,   171,   172,   173,   174,   175,   176,     0,   177,   178,
       0,   179,   180,   181,   182,   183,     0,     0,     0,   184,
       0,     0,   185,     0,   186,     0,     0,   187,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,   193,     0,     0,     0,     0,   194,   195,     0,
     196,     0,     0,     0,   197,     0,   198,   199,   200,   201,
     202,     0,     0,     0,   203,     0,     0,   204,   205,   206,
       0,     0,     0,   207,     0,   208,   209,     0,   210,   211,
     212,     0,     0,   213,   214,     0,   215,   216,   217,   218,
     219,   220,     0,     0,   221,   222,   223,   605,   225,     0,
       0,   226,   227,     0,   228,   229,   230,     0,     0,   231,
       0,     0,     0,   606,   233,     0,   234,     0,   235,     0,
     236,   237,   238,   239,     0,   240,     0,   241,     0,     0,
       0,   242,   243,     0,   244,     0,     0,   245,   246,     0,
       0,     0,   247,   248,   249,   250,     0,     0,   251,   252,
     253,     0,   254,     0,   255,     0,     0,     0,     0,   256,
     257,     0,     0,     0,   258,     0,     0,     0,   259,   260,
       0,   261,   262,     0,     0,     0,   263,     0,     0,   264,
     265,     0,     0,   266,     0,     0,   267,   268,     0,     0,
       0,     0,     0,   269,   270,     0,   271,     0,   272,     0,
     273,   274,     0,     0,     0,     0,     0,     0,     0,   275,
       0,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,     0,   293,
     294,   295,     0,   296,   297,   298,   299,     0,   300,   301,
       0,     0,     0,     0,   302,   303,   304,   305,   306,   307,
       0,     0,   308,   309,     0,   310,     0,   311,     0,   312,
     313,   314,   315,   316,   317,   318,   319,   320,     0,     0,
     321,   322,     0,     0,   323,   324,   325,   326,     0,     0,
       0,   327,   328,     0,     0,     0,   329,     0,   330,   331,
     332,     0,   333,   334,   335,     0,   336,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   337,   338,   339,     0,
     340,   341,     0,   607,   343,   344,   345,   346,   347,   348,
     349,   350,   351,     0,     0,   352,   353,   354,     0,   355,
       0,   356,   357,   358,   359,   360,     0,   361,   362,   363,
       0,     0,   364,     0,     0,     0,   365,   366,   367,   368,
     369,     0,     0,   370,   371,   372,   373,   374,     0,   375,
     376,     0,   377,   378,   379,     0,     0,   380,     0,   381,
       0,   382,   383,     0,   384,   385,   386,     0,   387,     0,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,     0,   399,   400,     0,     0,     0,   401,   402,
     403,   404,     0,     0,     0,   405,     0,     0,     0,   406,
       0,   407,   408,   409,   410,     0,   411,   412,   413,   414,
     415,     0,     0,     0,     0,     0,   416,   417,   418,     0,
     419,   420,     0,   421,     0,     0,   422,     0,     0,   423,
     424,   425,   426,   427,   428,   429,     0,     0,     0,     0,
     430,   431,     0,   432,   433,   434,   435,   436,   437,     0,
       0,   438,   439,   440,   441,     0,   442,   443,     0,     0,
     444,   445,   446,   447,   448,     0,     0,   449,   450,     0,
     451,   452,   453,   454,   455,     0,     0,     0,     0,   456,
     457,   458,   459,   460,   461,     0,   462,   463,     0,     0,
       0,   464,   465,   466,   467,     0,   468,   469,     0,   470,
     471,     0,   472,   473,     0,     0,   474,     0,     0,   475,
       0,   476,     0,   477,   478,   479,     0,     0,     0,     0,
       0,     0,   480,     0,     0,   481,     0,     0,     0,   482,
     483,   484,   485,   486,     0,     0,     0,     0,     0,     0,
     487,   488,     0,   489,   490,   491,     0,     0,   492,   127,
       0,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,     0,   136,   544,   137,   138,
     139,   140,   141,   142,     0,   143,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,   150,   151,     0,     0,   152,     0,     0,   153,
     154,     0,   155,   156,   157,     0,   158,     0,   159,   160,
     161,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,   208,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,   220,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,   257,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,   327,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,   335,     0,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,     0,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,   381,     0,   382,   383,     0,   384,   385,   386,     0,
     387,     0,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,     0,     0,     0,   405,     0,     0,
       0,   406,     0,   407,   408,   409,   410,     0,   411,   412,
     413,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,     0,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,   472,   473,     0,     0,   474,     0,
       0,   475,     0,   476,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,     0,
     492,   127,     0,   128,   129,   130,   131,   132,     0,     0,
     133,     0,     0,     0,   134,   135,     0,     0,   136,   773,
     137,   138,   139,   140,   141,   142,     0,   143,     0,     0,
       0,   144,     0,     0,     0,   145,     0,     0,   146,   147,
     148,     0,   149,     0,   150,   151,     0,     0,   152,     0,
       0,   153,   154,     0,   155,   156,   157,     0,   158,     0,
     159,   160,   161,   162,   163,     0,   164,   165,     0,   166,
     167,     0,   168,   169,   170,   171,   172,   173,   174,   175,
     176,     0,   177,   178,     0,   179,   180,   181,   182,   183,
       0,     0,     0,   184,     0,     0,   185,     0,   186,     0,
       0,   187,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,   193,     0,     0,     0,
       0,   194,   195,     0,   196,     0,     0,     0,   197,     0,
     198,   199,   200,   201,   202,     0,     0,     0,   203,     0,
       0,   204,   205,   206,     0,     0,     0,   207,     0,   208,
     209,     0,   210,   211,   212,     0,     0,   213,   214,     0,
     215,   216,   217,   218,   219,   220,     0,     0,   221,   222,
     223,   224,   225,     0,     0,   226,   227,     0,   228,   229,
     230,     0,     0,   231,     0,     0,     0,   232,   233,     0,
     234,     0,   235,     0,   236,   237,   238,   239,     0,   240,
       0,   241,     0,     0,     0,   242,   243,     0,   244,     0,
       0,   245,   246,     0,     0,     0,   247,   248,   249,   250,
       0,     0,   251,   252,   253,     0,   254,     0,   255,     0,
       0,     0,     0,   256,   257,     0,     0,     0,   258,     0,
       0,     0,   259,   260,     0,   261,   262,     0,     0,     0,
     263,     0,     0,   264,   265,     0,     0,   266,     0,     0,
     267,   268,     0,     0,     0,     0,     0,   269,   270,     0,
     271,     0,   272,     0,   273,   274,     0,     0,     0,     0,
       0,     0,     0,   275,     0,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,     0,   293,   294,   295,     0,   296,   297,   298,
     299,     0,   300,   301,     0,     0,     0,     0,   302,   303,
     304,   305,   306,   307,     0,     0,   308,   309,     0,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,     0,     0,   321,   322,     0,     0,   323,   324,
     325,   326,     0,     0,     0,   327,   328,     0,     0,     0,
     329,     0,   330,   331,   332,     0,   333,   334,   335,     0,
     336,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     337,   338,   339,     0,   340,   341,     0,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,     0,     0,   352,
     353,   354,     0,   355,     0,   356,   357,   358,   359,   360,
       0,   361,   362,   363,     0,     0,   364,     0,     0,     0,
     365,   366,   367,   368,   369,     0,     0,   370,   371,   372,
     373,   374,     0,   375,   376,     0,   377,   378,   379,     0,
       0,   380,     0,   381,     0,   382,   383,     0,   384,   385,
     386,     0,   387,     0,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   399,   400,     0,
       0,     0,   401,   402,   403,   404,     0,     0,     0,   405,
       0,     0,     0,   406,     0,   407,   408,   409,   410,     0,
     411,   412,   413,   414,   415,     0,     0,     0,     0,     0,
     416,   417,   418,     0,   419,   420,     0,   421,     0,     0,
     422,     0,     0,   423,   424,   425,   426,   427,   428,   429,
       0,     0,     0,     0,   430,   431,     0,   432,   433,   434,
     435,   436,   437,     0,     0,   438,   439,   440,   441,     0,
     442,   443,     0,     0,   444,   445,   446,   447,   448,     0,
       0,   449,   450,     0,   451,   452,   453,   454,   455,     0,
       0,     0,     0,   456,   457,   458,   459,   460,   461,     0,
     462,   463,     0,     0,     0,   464,   465,   466,   467,     0,
     468,   469,     0,   470,   471,     0,   472,   473,     0,     0,
     474,     0,     0,   475,     0,   476,     0,   477,   478,   479,
       0,     0,     0,     0,     0,     0,   480,     0,     0,   481,
       0,     0,     0,   482,   483,   484,   485,   486,     0,     0,
       0,     0,     0,     0,   487,   488,     0,   489,   490,   491,
       0,     0,   492,   127,     0,   128,   129,   130,   131,   132,
       0,     0,   133,     0,     0,     0,   134,   135,     0,     0,
     136,  2507,   137,   138,   139,   140,   141,   142,     0,   143,
       0,     0,     0,   144,     0,     0,     0,   145,     0,     0,
     146,   147,   148,     0,   149,     0,   150,   151,     0,     0,
     152,     0,     0,   153,   154,     0,   155,   156,   874,   875,
     158,     0,   159,   160,   161,   162,   163,     0,   164,   165,
       0,   166,   167,     0,   168,   169,   170,   171,   172,   173,
     174,   175,   176,     0,   177,   178,     0,   179,   180,   181,
     182,   183,     0,     0,     0,   184,     0,     0,   185,     0,
     186,     0,     0,   187,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,   193,     0,
       0,     0,   876,   194,   195,     0,   196,     0,     0,     0,
     197,     0,   198,   199,   200,   201,   202,     0,     0,     0,
     203,     0,     0,   204,   205,   206,     0,     0,     0,   207,
       0,   208,   209,     0,   210,   211,   212,     0,     0,   213,
     214,     0,   215,   216,   217,   218,   219,   220,     0,     0,
     221,   222,   223,   224,   225,     0,     0,   226,   227,     0,
     228,   229,   230,     0,     0,   231,     0,     0,     0,   232,
     233,     0,   234,     0,   235,     0,   236,   237,   238,   239,
       0,   877,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,     0,   245,   246,     0,     0,     0,   247,   248,
     249,   250,     0,     0,   251,   252,   253,     0,   254,     0,
     255,     0,     0,     0,     0,   256,   257,     0,     0,     0,
     258,     0,     0,     0,   259,   260,     0,   261,   262,     0,
       0,     0,   263,     0,     0,   264,   265,     0,     0,   266,
       0,     0,   267,   268,     0,     0,     0,     0,     0,   269,
     270,     0,   878,     0,   272,     0,   273,   274,     0,     0,
       0,     0,     0,     0,     0,   275,     0,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,     0,   293,   294,   295,     0,   296,
     297,   298,   299,     0,   300,   301,     0,     0,     0,     0,
     302,   303,   304,   305,   306,   307,     0,     0,   308,   309,
       0,   310,     0,   311,     0,   312,   313,   314,   315,   316,
     317,   879,   319,   320,     0,     0,   321,   322,     0,     0,
     323,   324,   325,   326,     0,     0,     0,   327,   328,     0,
       0,     0,   329,     0,   330,   331,   332,     0,   333,   334,
     335,     0,   336,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   337,   338,   339,     0,   340,   341,     0,   342,
     343,   880,   345,   346,   347,   348,   349,   350,   351,     0,
       0,   352,   353,   354,     0,   355,     0,   356,   357,   358,
     359,   360,     0,   361,   362,   363,     0,     0,   364,     0,
       0,     0,   365,   366,   367,   368,   369,     0,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,   378,
     379,     0,     0,   380,     0,   381,     0,   382,   383,     0,
     384,   385,   386,     0,   387,     0,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,     0,   399,
     400,     0,     0,     0,   401,   402,   881,   404,     0,     0,
       0,   405,     0,     0,     0,   406,     0,   407,   408,   409,
     410,     0,   411,   412,   413,   414,   415,     0,     0,     0,
       0,     0,   416,   417,   418,     0,   419,   420,     0,   421,
       0,     0,   422,     0,     0,   423,   424,   425,   426,   427,
     428,   429,     0,     0,     0,     0,   430,   431,     0,   432,
     433,   434,   435,   436,   437,     0,     0,   438,   439,   440,
     441,     0,   442,   443,     0,     0,   444,   445,   446,   447,
     448,     0,     0,   449,   450,     0,   451,   452,   453,   454,
     455,     0,     0,     0,     0,   456,   457,   458,   459,   460,
     461,     0,   882,   463,     0,     0,     0,   464,   465,   466,
     467,     0,   468,   469,     0,   470,   471,     0,   472,   473,
       0,     0,   474,     0,     0,   475,     0,   476,     0,   477,
     478,   479,     0,     0,     0,     0,     0,     0,   480,     0,
       0,   481,     0,     0,     0,   482,   483,   484,   485,   486,
       0,     0,     0,     0,     0,     0,   487,   488,     0,   489,
     490,   491,     0,     0,   492,     0,   127,     0,   128,   129,
     130,   131,   132,     0,     0,   133,     0,     0,     0,   134,
     135,     0,   883,   136,     0,   137,   138,   139,   140,   141,
     142,     0,   143,     0,     0,     0,   144,     0,     0,     0,
     145,     0,     0,   146,   147,   148,     0,   149,     0,   150,
     151,     0,     0,   152,     0,     0,   153,   154,     0,   155,
     156,   157,     0,   158,     0,   159,   160,   161,   162,   163,
       0,   164,   165,     0,   166,   167,     0,   168,   169,   170,
     171,   172,   173,   174,   175,   176,     0,   177,   178,     0,
     179,   180,   181,   182,   183,     0,     0,     0,   184,     0,
       0,   185,     0,   186,     0,     0,   187,     0,     0,     0,
     188,   189,   190,     0,     0,   191,     0,     0,     0,     0,
     192,   193,     0,     0,     0,     0,   194,   195,     0,   196,
       0,     0,     0,   197,     0,   198,   199,   200,   201,   202,
       0,     0,     0,   203,     0,     0,   204,   205,   206,     0,
       0,     0,   207,     0,   208,   209,     0,   210,   211,   212,
       0,     0,   213,   214,     0,   215,   216,   217,   218,   219,
     220,     0,     0,   221,   222,   223,   224,   225,     0,     0,
     226,   227,     0,   228,   229,   230,     0,     0,   231,     0,
       0,     0,   232,   233,     0,   234,     0,   235,     0,   236,
     237,   238,   239,     0,   240,     0,   241,     0,     0,     0,
     242,   243,     0,   244,     0,     0,   245,   246,     0,     0,
       0,   247,   248,   249,   250,     0,     0,   251,   252,   253,
       0,   254,     0,   255,     0,     0,     0,     0,   256,   257,
       0,     0,     0,   258,     0,     0,     0,   259,   260,     0,
     261,   262,     0,     0,     0,   263,     0,     0,   264,   265,
       0,     0,   266,     0,     0,   267,   268,   618,     0,     0,
       0,     0,   269,   270,     0,   271,     0,   272,     0,   273,
     274,     0,     0,     0,     0,     0,     0,     0,   275,     0,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,     0,   293,   294,
     295,     0,   296,   297,   298,   299,     0,   300,   301,     0,
       0,     0,     0,   302,   303,   304,   305,   306,   307,     0,
       0,   308,   309,     0,   310,     0,   311,     0,   312,   313,
     314,   315,   316,   317,   318,   319,   320,     0,     0,   321,
     322,     0,     0,   323,   324,   325,   326,     0,     0,     0,
     327,   328,     0,     0,     0,   329,     0,   330,   331,   332,
       0,   333,   334,   335,     0,   336,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   337,   338,   339,     0,   340,
     341,     0,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,     0,     0,   352,   353,   354,     0,   355,     0,
     356,   357,   358,   359,   360,     0,   361,   362,   363,     0,
       0,   364,     0,     0,     0,   365,   366,   367,   368,   369,
       0,     0,   370,   371,   372,   373,   374,     0,   375,   376,
       0,   377,   378,   379,     0,     0,   380,     0,   381,     0,
     382,   383,     0,   384,   385,   386,     0,   387,     0,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,     0,   399,   400,     0,     0,     0,   401,   402,   403,
     404,     0,     0,     0,   405,     0,     0,     0,   406,     0,
     407,   408,   409,   410,     0,   411,   412,   413,   414,   415,
       0,     0,     0,     0,     0,   416,   417,   418,     0,   419,
     420,     0,   421,     0,     0,   422,     0,     0,   423,   424,
     425,   426,   427,   428,   429,     0,     0,     0,     0,   430,
     431,     0,   432,   433,   434,   435,   436,   437,     0,     0,
     438,   439,   440,   441,     0,   442,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   124,   449,   450,     0,   451,
     452,   453,   454,   455,     0,     0,     0,     0,   456,   457,
     458,   459,   460,   461,     0,   462,   463,     0,     0,     0,
     464,   465,   466,   467,     0,   468,   469,     0,   470,   471,
       0,   472,   473,     0,     0,   474,     0,     0,   475,     0,
     476,     0,   477,   478,   479,     0,     0,     0,     0,     0,
       0,   480,     0,     0,   481,     0,     0,     0,   482,   483,
     484,   485,   486,     0,     0,     0,     0,     0,     0,   487,
     488,     0,   489,   490,   491,     0,     0,   492,     0,   127,
       0,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,  1343,   136,     0,   137,   138,
     139,   140,   141,   142,     0,   143,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,   150,   151,     0,     0,   152,     0,     0,   153,
     154,     0,   155,   156,   157,     0,   158,     0,   159,   160,
     161,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,   208,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,   220,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,   257,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
     618,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,   327,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,   335,     0,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,     0,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,   381,     0,   382,   383,     0,   384,   385,   386,     0,
     387,     0,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,     0,     0,     0,   405,     0,     0,
       0,   406,     0,   407,   408,   409,   410,     0,   411,   412,
     413,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,   124,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,   472,   473,     0,     0,   474,     0,
       0,   475,     0,   476,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,     0,
     492,     0,   127,     0,   128,   129,   130,   131,   132,     0,
       0,   133,     0,     0,     0,   134,   135,     0,  1655,   136,
       0,   137,   138,   139,   140,   141,   142,     0,   143,     0,
       0,     0,   144,     0,     0,     0,   145,     0,     0,   146,
     147,   148,     0,   149,     0,   150,   151,     0,     0,   152,
       0,     0,   153,   154,     0,   155,   156,   874,   875,   158,
       0,   159,   160,   161,   162,   163,     0,   164,   165,     0,
     166,   167,     0,   168,   169,   170,   171,   172,   173,   174,
     175,   176,     0,   177,   178,     0,   179,   180,   181,   182,
     183,     0,     0,     0,   184,     0,     0,   185,     0,   186,
       0,     0,   187,     0,     0,     0,   188,   189,   190,     0,
       0,   191,     0,     0,     0,     0,   192,   193,     0,     0,
       0,   876,   194,   195,     0,   196,     0,     0,     0,   197,
       0,   198,   199,   200,   201,   202,     0,     0,     0,   203,
       0,     0,   204,   205,   206,     0,     0,     0,   207,     0,
     208,   209,     0,   210,   211,   212,     0,     0,   213,   214,
       0,   215,   216,   217,   218,   219,   220,     0,     0,   221,
     222,   223,   224,   225,     0,     0,   226,   227,     0,   228,
     229,   230,     0,     0,   231,     0,     0,     0,   232,   233,
       0,   234,     0,   235,     0,   236,   237,   238,   239,     0,
     877,     0,   241,     0,     0,     0,   242,   243,     0,   244,
       0,     0,   245,   246,     0,     0,     0,   247,   248,   249,
     250,     0,     0,   251,   252,   253,     0,   254,     0,   255,
       0,     0,     0,     0,   256,   257,     0,     0,     0,   258,
       0,     0,     0,   259,   260,     0,   261,   262,     0,     0,
       0,   263,     0,     0,   264,   265,     0,     0,   266,     0,
       0,   267,   268,     0,     0,     0,     0,     0,   269,   270,
       0,   878,     0,   272,     0,   273,   274,     0,     0,     0,
       0,     0,     0,     0,   275,     0,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,     0,   293,   294,   295,     0,   296,   297,
     298,   299,     0,   300,   301,     0,     0,     0,     0,   302,
     303,   304,   305,   306,   307,     0,     0,   308,   309,     0,
     310,     0,   311,     0,   312,   313,   314,   315,   316,   317,
     879,   319,   320,     0,     0,   321,   322,     0,     0,   323,
     324,   325,   326,     0,     0,     0,   327,   328,     0,     0,
       0,   329,     0,   330,   331,   332,     0,   333,   334,   335,
       0,   336,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   337,   338,   339,     0,   340,   341,     0,   342,   343,
     880,   345,   346,   347,   348,   349,   350,   351,     0,     0,
     352,   353,   354,     0,   355,     0,   356,   357,   358,   359,
     360,     0,   361,   362,   363,     0,     0,   364,     0,     0,
       0,   365,   366,   367,   368,   369,     0,     0,   370,   371,
     372,   373,   374,     0,   375,   376,     0,   377,   378,   379,
       0,     0,   380,     0,   381,     0,   382,   383,     0,   384,
     385,   386,     0,   387,     0,     0,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,     0,   399,   400,
       0,     0,     0,   401,   402,   881,   404,     0,     0,     0,
     405,     0,     0,     0,   406,     0,   407,   408,   409,   410,
       0,   411,   412,   413,   414,   415,     0,     0,     0,     0,
       0,   416,   417,   418,     0,   419,   420,     0,   421,     0,
       0,   422,     0,     0,   423,   424,   425,   426,   427,   428,
     429,     0,     0,     0,     0,   430,   431,     0,   432,   433,
     434,   435,   436,   437,     0,     0,   438,   439,   440,   441,
       0,   442,   443,     0,     0,   444,   445,   446,   447,   448,
       0,     0,   449,   450,     0,   451,   452,   453,   454,   455,
       0,     0,     0,     0,   456,   457,   458,   459,   460,   461,
       0,   462,   463,     0,     0,     0,   464,   465,   466,   467,
       0,   468,   469,     0,   470,   471,     0,   472,   473,     0,
       0,   474,     0,     0,   475,     0,   476,     0,   477,   478,
     479,     0,     0,     0,     0,     0,     0,   480,     0,     0,
     481,     0,     0,     0,   482,   483,   484,   485,   486,     0,
       0,     0,     0,     0,     0,   487,   488,     0,   489,   490,
     491,     0,     0,   492,     0,   127,     0,   128,   129,   130,
     131,   132,     0,     0,   133,     0,     0,     0,   134,   135,
       0,   883,   136,     0,   137,   138,   139,   140,   141,   142,
       0,   143,     0,     0,     0,   144,     0,     0,     0,   145,
       0,     0,   146,   147,   148,     0,   149,     0,   150,   151,
       0,     0,   152,     0,     0,   153,   154,     0,   155,   156,
     157,     0,   158,     0,   159,   160,   161,   162,   163,     0,
     164,   165,     0,   166,   167,     0,   168,   169,   170,   171,
     172,   173,   174,   175,   176,     0,   177,   178,     0,   179,
     180,   181,   182,   183,     0,     0,     0,   184,     0,     0,
     185,     0,   186,     0,     0,   187,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
     193,     0,     0,     0,     0,   194,   195,     0,   196,     0,
       0,     0,   197,     0,   198,   199,   200,   201,   202,     0,
       0,     0,   203,     0,     0,   204,   205,   206,     0,     0,
       0,   207,     0,   208,   209,     0,   210,   211,   212,     0,
       0,   213,   214,     0,   215,   216,   217,   218,   219,   220,
       0,     0,   221,   222,   223,   224,   225,     0,     0,   226,
     227,     0,   228,   229,   230,     0,     0,   231,     0,     0,
       0,   232,   233,     0,   234,     0,   235,     0,   236,   237,
     238,   239,     0,   240,     0,   241,     0,     0,     0,   242,
     243,     0,   244,     0,     0,   245,   246,     0,     0,     0,
     247,   248,   249,   250,     0,     0,   251,   252,   253,     0,
     254,     0,   255,     0,     0,     0,     0,   256,   257,     0,
       0,     0,   258,     0,     0,     0,   259,   260,     0,   261,
     262,     0,     0,     0,   263,     0,     0,   264,   265,     0,
       0,   266,     0,     0,   267,   268,   618,     0,     0,     0,
       0,   269,   270,     0,   271,     0,   272,     0,   273,   274,
       0,     0,     0,     0,     0,     0,     0,   275,     0,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,     0,   293,   294,   295,
       0,   296,   297,   298,   299,     0,   300,   301,     0,     0,
       0,     0,   302,   303,   304,   305,   306,   307,     0,     0,
     308,   309,     0,   310,     0,   311,     0,   312,   313,   314,
     315,   316,   317,   318,   319,   320,     0,     0,   321,   322,
       0,     0,   323,   324,   325,   326,     0,     0,     0,   327,
     328,     0,     0,     0,   329,     0,   330,   331,   332,     0,
     333,   334,   335,     0,   336,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   337,   338,   339,     0,   340,   341,
       0,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,     0,     0,   352,   353,   354,     0,   355,     0,   356,
     357,   358,   359,   360,     0,   361,   362,   363,     0,     0,
     364,     0,     0,     0,   365,   366,   367,   368,   369,     0,
       0,   370,   371,   372,   373,   374,     0,   375,   376,     0,
     377,   378,   379,     0,     0,   380,     0,   381,     0,   382,
     383,     0,   384,   385,   386,     0,   387,     0,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
       0,   399,   400,     0,     0,     0,   401,   402,   403,   404,
       0,     0,     0,   405,     0,     0,     0,   406,     0,   407,
     408,   409,   410,     0,   411,   412,   413,   414,   415,     0,
       0,     0,     0,     0,   416,   417,   418,     0,   419,   420,
       0,   421,     0,     0,   422,     0,     0,   423,   424,   425,
     426,   427,   428,   429,     0,     0,     0,     0,   430,   431,
       0,   432,   433,   434,   435,   436,   437,     0,     0,   438,
     439,   440,   441,     0,   442,   443,     0,     0,   444,   445,
     446,   447,   448,     0,   124,   449,   450,     0,   451,   452,
     453,   454,   455,     0,     0,     0,     0,   456,   457,   458,
     459,   460,   461,     0,   462,   463,     0,     0,     0,   464,
     465,   466,   467,     0,   468,   469,     0,   470,   471,     0,
     472,   473,     0,     0,   474,     0,     0,   475,     0,   476,
       0,   477,   478,   479,     0,     0,     0,     0,     0,     0,
     480,     0,     0,   481,     0,     0,     0,   482,   483,   484,
     485,   486,     0,     0,     0,     0,     0,     0,   487,   488,
       0,   489,   490,   491,     0,     0,   492,   127,     0,   128,
     129,   130,   131,   132,     0,     0,   133,     0,     0,     0,
     134,   135,     0,     0,  3416,     0,   137,   138,   139,   140,
     141,     0,     0,  -274,     0,     0,     0,   144,     0,     0,
       0,   145,     0,     0,   146,   147,   148,     0,   149,     0,
       0,     0,     0,     0,   152,  3827,     0,   153,   154,     0,
     155,   156,     0,     0,     0,     0,   159,   160,   161,   162,
    3828,     0,   164,   165,     0,   166,   167,     0,   168,   169,
       0,   171,     0,   173,   174,   175,   176,     0,   177,   178,
       0,   179,   180,   181,     0,   183,     0,     0,     0,   184,
       0,     0,   185,     0,   186,     0,     0,   187,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,     0,     0,     0,     0,     0,   194,   195,     0,
     196,     0,     0,     0,   197,     0,   198,   199,   200,   201,
     202,     0,     0,     0,     0,     0,     0,   204,   205,   206,
       0,     0,     0,   207,     0,     0,   209,     0,   210,   211,
     212,     0,     0,   213,   214,     0,   215,   216,   217,   218,
     219,     0,     0,     0,   221,   222,   223,   224,   225,     0,
       0,   226,   227,  3829,   228,   229,   230,     0,     0,     0,
       0,     0,     0,     0,   233,     0,   234,     0,   235,     0,
     236,   237,   238,   239,     0,   240,     0,   241,     0,     0,
       0,     0,   243,     0,     0,     0,     0,     0,   246,     0,
       0,     0,   247,   248,   249,   250,  3830,     0,   251,   252,
     253,     0,   254,     0,   255,     0,     0,     0,     0,   256,
       0,     0,     0,     0,   258,     0,     0,     0,   259,   260,
       0,   261,   262,  3831,     0,     0,   263,     0,     0,     0,
     265,     0,     0,   266,  3832,     0,   267,   268,     0,     0,
       0,     0,     0,   269,   270,     0,   271,     0,   272,     0,
     273,   274,     0,     0,     0,     0,  -229,     0,     0,   275,
       0,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,     0,   293,
     294,   295,     0,   296,   297,   298,   299,     0,   300,   301,
       0,     0,     0,     0,   302,   303,   304,   305,   306,   307,
       0,     0,   308,   309,     0,   310,     0,   311,     0,   312,
     313,   314,   315,   316,   317,   318,   319,   320,     0,     0,
     321,   322,     0,     0,   323,   324,   325,   326,     0,     0,
       0,     0,   328,     0,     0,     0,   329,     0,   330,   331,
     332,     0,   333,   334,  3833,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   338,   339,     0,
       0,   341,     0,   342,   343,   344,   345,   346,   347,   348,
     349,   350,     0,     0,     0,     0,   353,   354,     0,   355,
       0,   356,   357,   358,   359,   360,     0,   361,   362,   363,
       0,     0,   364,     0,     0,     0,   365,   366,   367,   368,
     369,     0,     0,   370,   371,   372,   373,   374,     0,   375,
       0,     0,   377,     0,   379,  -229,     0,   380,     0,     0,
       0,   382,     0,     0,   384,   385,   386,  3834,   387,     0,
       0,     0,   389,   390,   391,   392,   393,   394,   395,     0,
     397,   398,     0,   399,     0,     0,     0,     0,   401,   402,
     403,     0,     0,     0,     0,   405,     0,     0,     0,   406,
       0,     0,   408,     0,   410,     0,   411,     0,     0,   414,
     415,     0,     0,     0,     0,     0,   416,   417,   418,     0,
     419,   420,     0,   421,     0,     0,   422,     0,     0,   423,
       0,   425,   426,   427,   428,   429,     0,     0,     0,     0,
       0,   431,     0,   432,   433,   434,   435,   436,   437,     0,
       0,   438,   439,   440,   441,     0,   442,   443,     0,     0,
     444,   445,   446,   447,   448,     0,     0,   449,   450,     0,
     451,   452,   453,   454,   455,     0,     0,     0,     0,   456,
     457,   458,   459,   460,   461,     0,   462,   463,     0,     0,
       0,     0,   465,   466,   467,     0,   468,   469,     0,   470,
     471,     0,     0,     0,     0,     0,   474,     0,     0,   475,
       0,     0,     0,   477,   478,   479,     0,     0,     0,     0,
       0,     0,   480,     0,     0,   481,     0,     0,     0,   482,
     483,   484,   485,   486,     0,     0,  -229,     0,     0,     0,
     487,     0,     0,   489,     0,   491,     0,     0,   492,   127,
       0,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,  4365,   134,   135,     0,     0,   136,     0,   137,   138,
     139,   140,   141,   142,     0,   143,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,   150,   151,     0,     0,   152,     0,     0,   153,
     154,     0,   155,   156,   157,     0,   158,     0,   159,   160,
     161,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,   208,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,   220,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,   257,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,   327,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,   335,     0,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,     0,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,   381,     0,   382,   383,     0,   384,   385,   386,     0,
     387,     0,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,     0,     0,     0,   405,     0,     0,
       0,   406,     0,   407,   408,   409,   410,     0,   411,   412,
     413,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,     0,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,   472,   473,     0,     0,   474,     0,
       0,   475,     0,   476,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,   127,
     492,   128,   129,   130,   131,   132,  2082,     0,   133,     0,
       0,     0,   134,   135,     0,     0,   136,     0,   137,   138,
     139,   140,   141,   142,     0,   143,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,   150,   151,     0,     0,   152,     0,     0,   153,
     154,     0,   155,   156,   157,     0,   158,     0,   159,   160,
     161,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,   208,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,   220,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,   257,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,   327,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,   335,     0,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,     0,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,   381,     0,   382,   383,     0,   384,   385,   386,     0,
     387,     0,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,     0,     0,     0,   405,     0,     0,
       0,   406,     0,   407,   408,   409,   410,     0,   411,   412,
     413,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,     0,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,   472,   473,     0,     0,   474,     0,
       0,   475,     0,   476,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,   127,
     492,   128,   129,   130,   131,   132,  2750,     0,   133,     0,
       0,     0,   134,   135,     0,     0,   136,     0,   137,   138,
     139,   140,   141,   142,     0,   143,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,   150,   151,     0,     0,   152,     0,     0,   153,
     154,     0,   155,   156,   157,     0,   158,     0,   159,   160,
     161,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,   208,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,   220,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,   257,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,   327,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,   335,     0,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,     0,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,   381,     0,   382,   383,     0,   384,   385,   386,     0,
     387,     0,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,     0,     0,     0,   405,     0,     0,
       0,   406,     0,   407,   408,   409,   410,     0,   411,   412,
     413,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,     0,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,   472,   473,     0,     0,   474,     0,
       0,   475,     0,   476,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,   127,
     492,   128,   129,   130,   131,   132,  3375,     0,   133,     0,
       0,     0,   134,   135,     0,     0,   136,     0,   137,   138,
     139,   140,   141,   142,     0,   143,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,   150,   151,     0,     0,   152,     0,     0,   153,
     154,     0,   155,   156,   157,     0,   158,     0,   159,   160,
     161,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,   208,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,   220,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,   257,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,   327,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,   335,     0,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,     0,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,   381,     0,   382,   383,     0,   384,   385,   386,     0,
     387,     0,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,     0,     0,     0,   405,     0,     0,
       0,   406,     0,   407,   408,   409,   410,     0,   411,   412,
     413,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,     0,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,   472,   473,     0,     0,   474,     0,
       0,   475,     0,   476,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,   127,
     492,   128,   129,   130,   131,   132,  3421,     0,   133,     0,
       0,     0,   134,   135,     0,     0,   136,     0,   137,   138,
     139,   140,   141,   142,     0,   143,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,   150,   151,     0,     0,   152,     0,     0,   153,
     154,     0,   155,   156,   157,     0,   158,     0,   159,   160,
     161,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,  2414,     0,     0,     0,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,   208,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,   220,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,  2415,
       0,   231,     0,     0,     0,   232,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,  2416,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,   257,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,  2417,     0,     0,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
    1005,  1006,     0,   327,   328,     0,     0,  2418,   329,     0,
     330,   331,   332,     0,   333,   334,   335,     0,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,     0,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,   381,     0,   382,   383,     0,   384,   385,   386,     0,
     387,     0,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,     0,     0,     0,   405,     0,     0,
       0,   406,     0,   407,   408,   409,   410,     0,   411,   412,
     413,   414,   415,     0,     0,  4350,  4339,  4351,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,     0,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,   464,   465,   466,   467,  2419,   468,   469,
       0,   470,   471,     0,   472,   473,     0,     0,   474,     0,
       0,   475,     0,   476,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,   127,
     492,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,     0,   136,     0,   137,   138,
     139,   140,   141,   142,     0,   143,     0,     0,  1332,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,   150,   151,     0,     0,   152,     0,     0,   153,
     154,     0,   155,   156,   157,     0,   158,     0,   159,   160,
     161,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,  1333,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,   208,   209,     0,
     210,   211,   212,  1334,     0,   213,   214,     0,   215,   216,
     217,   218,   219,   220,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,   257,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
     618,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,   327,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,   335,     0,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,     0,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,   381,     0,   382,   383,     0,   384,   385,   386,     0,
     387,     0,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,     0,     0,  1335,   405,     0,     0,
       0,   406,     0,   407,   408,   409,   410,     0,   411,   412,
     413,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,   124,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,   472,   473,     0,     0,   474,     0,
       0,   475,     0,   476,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,   127,
     492,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,     0,   136,     0,   137,   138,
     139,   140,   141,   142,     0,   143,     0,     0,  1345,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,   150,   151,     0,     0,   152,     0,     0,   153,
     154,     0,   155,   156,   157,     0,   158,     0,   159,   160,
     161,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,  1346,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,   208,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,   220,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,   257,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
     618,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,   327,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,   335,     0,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,     0,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,   381,     0,   382,   383,     0,   384,   385,   386,     0,
     387,     0,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,     0,     0,     0,   405,     0,     0,
       0,   406,     0,   407,   408,   409,   410,     0,   411,   412,
     413,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,   124,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,   472,   473,     0,     0,   474,     0,
       0,   475,     0,   476,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,   127,
     492,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,     0,   136,     0,   137,   138,
     139,   140,   141,   142,     0,   143,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,   150,   151,     0,     0,   152,     0,     0,   153,
     154,     0,   155,   156,   157,     0,   158,     0,   159,   160,
     161,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,   208,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,   220,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,   257,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,  1853,     0,     0,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,   327,   328,     0,     0,  1854,   329,     0,
     330,   331,   332,     0,   333,   334,   335,     0,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,   727,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,   381,     0,   382,   383,     0,   384,   385,   386,     0,
     387,     0,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,     0,     0,     0,   405,     0,     0,
       0,   406,     0,   407,   408,   409,   410,     0,   411,   412,
     413,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,     0,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,   464,   465,   466,   467,  1855,   468,   469,
       0,   470,   471,     0,   472,   473,     0,     0,   474,     0,
       0,   475,     0,   476,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,   127,
     492,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,     0,   136,     0,   137,   138,
     139,   140,   141,   142,     0,   143,     0,     0,  1332,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,   150,   151,     0,     0,   152,     0,     0,   153,
     154,     0,   155,   156,   157,     0,   158,     0,   159,   160,
     161,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,  1333,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,   208,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,   220,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,   257,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
     618,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,   327,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,   335,     0,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,     0,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,   381,     0,   382,   383,     0,   384,   385,   386,     0,
     387,     0,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,     0,     0,     0,   405,     0,     0,
       0,   406,     0,   407,   408,   409,   410,     0,   411,   412,
     413,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,   124,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,   472,   473,     0,     0,   474,     0,
       0,   475,     0,   476,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,   127,
     492,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,     0,   136,     0,   137,   138,
     139,   140,   141,   142,     0,   143,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,   150,   151,     0,     0,   152,     0,     0,   153,
     154,     0,   155,   156,   157,     0,   158,     0,   159,   160,
     161,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,   963,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,   208,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,   220,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,   257,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
     618,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,   327,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,   335,     0,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,     0,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,   381,     0,   382,   383,     0,   384,   385,   386,     0,
     387,     0,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,     0,     0,     0,   405,     0,     0,
       0,   406,     0,   407,   408,   409,   410,     0,   411,   412,
     413,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,   124,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,   472,   473,     0,     0,   474,     0,
       0,   475,     0,   476,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,   127,
     492,   128,   129,   130,   131,   132,  1368,     0,   133,     0,
       0,     0,   134,   135,     0,     0,   136,     0,   137,   138,
     139,   140,   141,   142,     0,   143,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,   150,   151,     0,     0,   152,     0,     0,   153,
     154,     0,   155,   156,   157,     0,   158,     0,   159,   160,
     161,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,   208,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,   220,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,   257,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
     618,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,   327,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,   335,     0,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,     0,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,   381,     0,   382,   383,     0,   384,   385,   386,     0,
     387,     0,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,     0,     0,     0,   405,     0,     0,
       0,   406,     0,   407,   408,   409,   410,     0,   411,   412,
     413,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,   124,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,   472,   473,     0,     0,   474,     0,
       0,   475,     0,   476,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,   127,
     492,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,     0,   136,     0,   137,   138,
     139,   140,   141,   142,     0,   143,     0,     0,     0,   144,
     940,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,   150,   151,     0,     0,   152,     0,     0,   153,
     154,     0,   155,   156,   157,     0,   158,     0,   159,   160,
     161,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,   208,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,   220,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,   941,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,   257,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,   327,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,   335,     0,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,     0,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,   381,     0,   382,   383,     0,   384,   385,   386,     0,
     387,     0,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,     0,     0,     0,   405,     0,     0,
       0,   406,     0,   407,   408,   409,   410,     0,   411,   412,
     413,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,   942,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,   472,   473,     0,     0,   474,     0,
       0,   475,     0,   476,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,   127,
     492,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,     0,   136,     0,   137,   138,
     139,   140,   141,   142,     0,   143,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,   150,   151,     0,     0,   152,     0,     0,   153,
     154,     0,   155,   156,   157,     0,   158,     0,   159,   160,
     161,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,  2336,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,   208,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,   220,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,   257,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
     618,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,   327,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,   335,     0,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,     0,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,   381,     0,   382,   383,     0,   384,   385,   386,     0,
     387,     0,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,     0,     0,     0,   405,     0,     0,
       0,   406,     0,   407,   408,   409,   410,     0,   411,   412,
     413,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,   124,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,   472,   473,     0,     0,   474,     0,
       0,   475,     0,   476,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,   127,
     492,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,     0,   136,     0,   137,   138,
     139,   140,   141,   142,     0,   143,     0,     0,  1332,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,   150,   151,     0,     0,   152,     0,     0,   153,
     154,     0,   155,   156,   157,     0,   158,     0,   159,   160,
     161,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,   208,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,   220,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,   257,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
     618,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,   327,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,   335,     0,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,     0,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,   381,     0,   382,   383,     0,   384,   385,   386,     0,
     387,     0,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,     0,     0,     0,   405,     0,     0,
       0,   406,     0,   407,   408,   409,   410,     0,   411,   412,
     413,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,   124,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,   472,   473,     0,     0,   474,     0,
       0,   475,     0,   476,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,   127,
     492,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,     0,   136,     0,   137,   138,
     139,   140,   141,   142,     0,   143,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,   150,   151,     0,     0,   152,     0,     0,   153,
     154,     0,   155,   156,   157,     0,   158,     0,   159,   160,
     161,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,   208,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,   220,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,   257,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
     618,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,   327,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,   335,     0,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,     0,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,   381,     0,   382,   383,     0,   384,   385,   386,     0,
     387,     0,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,     0,     0,     0,   405,     0,     0,
       0,   406,     0,   407,   408,   409,   410,     0,   411,   412,
     413,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,   124,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,   472,   473,     0,     0,   474,     0,
       0,   475,     0,   476,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,   127,
     492,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,  2746,     0,   136,     0,   137,   138,
     139,   140,   141,   142,     0,   143,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,   150,   151,     0,     0,   152,     0,     0,   153,
     154,     0,   155,   156,   157,     0,   158,     0,   159,   160,
     161,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,   208,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,   220,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,   257,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,   327,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,   335,     0,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,     0,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,   381,     0,   382,   383,     0,   384,   385,   386,     0,
     387,     0,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,     0,     0,     0,   405,     0,     0,
       0,   406,     0,   407,   408,   409,   410,     0,   411,   412,
     413,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,   124,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,   472,   473,     0,     0,   474,     0,
       0,   475,     0,   476,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,   127,
     492,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,     0,   136,     0,   137,   138,
     139,   140,   141,   142,     0,   143,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,   150,   151,     0,     0,   152,     0,     0,   153,
     154,     0,   155,   156,   157,     0,   158,     0,   159,   160,
     161,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,  4269,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,   208,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,   220,     0,  4270,   221,   222,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,   257,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,   327,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,   335,     0,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,     0,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,   381,     0,   382,   383,     0,   384,   385,   386,     0,
     387,     0,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,     0,     0,     0,   405,     0,     0,
       0,   406,     0,   407,   408,   409,   410,     0,   411,   412,
     413,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,     0,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,   472,   473,     0,     0,   474,     0,
       0,   475,     0,   476,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,   127,
     492,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,     0,   136,     0,   137,   138,
     139,   140,   141,   142,     0,   143,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,   150,   151,     0,     0,   152,     0,     0,   153,
     154,     0,   155,   156,   157,     0,   158,     0,   159,   160,
     161,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,   208,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,   220,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,   233,  1041,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,   257,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,   327,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,   335,     0,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,     0,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,   381,     0,   382,   383,     0,   384,   385,   386,     0,
     387,     0,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,     0,     0,     0,   405,     0,     0,
       0,   406,     0,   407,   408,   409,   410,     0,   411,   412,
     413,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,     0,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,   472,   473,     0,     0,   474,     0,
       0,   475,     0,   476,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,   127,
     492,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,     0,   136,     0,   137,   138,
     139,   140,   141,   142,     0,   143,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,   150,   151,     0,     0,   152,     0,     0,   153,
     154,     0,   155,   156,   157,     0,   158,     0,   159,   160,
     161,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,   876,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,   208,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,   220,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,   257,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,   327,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,   335,     0,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,     0,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,   381,     0,   382,   383,     0,   384,   385,   386,     0,
     387,     0,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,     0,     0,     0,   405,     0,     0,
       0,   406,     0,   407,   408,   409,   410,     0,   411,   412,
     413,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,     0,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,   472,   473,     0,     0,   474,     0,
       0,   475,     0,   476,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,   127,
     492,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,     0,   136,     0,   137,   138,
     139,   140,   141,   142,     0,   143,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,   150,   151,     0,     0,   152,     0,     0,   153,
     154,     0,   155,   156,   157,     0,   158,     0,   159,   160,
     161,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,   876,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,   208,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,   220,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,   257,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,   327,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,   335,     0,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,     0,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,   381,     0,   382,   383,     0,   384,   385,   386,     0,
     387,     0,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,     0,     0,     0,   405,     0,     0,
       0,   406,     0,   407,   408,   409,   410,     0,   411,   412,
     413,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,     0,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,  1830,   463,
       0,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,   472,   473,     0,     0,   474,     0,
       0,   475,     0,   476,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,   127,
     492,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,     0,   136,     0,   137,   138,
     139,   140,   141,   142,     0,   143,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,   150,   151,     0,     0,   152,     0,     0,   153,
     154,     0,   155,   156,   157,     0,   158,     0,   159,   160,
     161,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,  2024,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,   208,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,   220,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,   257,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,   327,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,   335,     0,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,     0,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,   381,     0,   382,   383,     0,   384,   385,   386,     0,
     387,     0,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,     0,     0,     0,   405,     0,     0,
       0,   406,     0,   407,   408,   409,   410,     0,   411,   412,
     413,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,     0,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,   472,   473,     0,     0,   474,     0,
       0,   475,     0,   476,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,   127,
     492,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,     0,   136,     0,   137,   138,
     139,   140,   141,   142,     0,   143,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,   150,   151,     0,     0,   152,     0,     0,   153,
     154,     0,   155,   156,   157,     0,   158,     0,   159,   160,
     161,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,  2837,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,   208,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,   220,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,   257,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,   327,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,   335,     0,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,     0,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,   381,     0,   382,   383,     0,   384,   385,   386,     0,
     387,     0,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,     0,     0,     0,   405,     0,     0,
       0,   406,     0,   407,   408,   409,   410,     0,   411,   412,
     413,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,     0,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,   472,   473,     0,     0,   474,     0,
       0,   475,     0,   476,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,   127,
     492,   128,   129,   130,   131,   132,  2845,     0,   133,     0,
       0,     0,   134,   135,     0,     0,   136,     0,   137,   138,
     139,   140,   141,   142,     0,   143,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,   150,   151,     0,     0,   152,     0,     0,   153,
     154,     0,   155,   156,   157,     0,   158,     0,   159,   160,
     161,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,   208,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,   220,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,   257,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,   327,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,   335,     0,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,     0,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,   381,     0,   382,   383,     0,   384,   385,   386,     0,
     387,     0,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,     0,     0,     0,   405,     0,     0,
       0,   406,     0,   407,   408,   409,   410,     0,   411,   412,
     413,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,     0,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,   472,   473,     0,     0,   474,     0,
       0,   475,     0,   476,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,   127,
     492,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,     0,   136,     0,   137,   138,
     139,   140,   141,   142,     0,   143,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,   150,   151,     0,     0,   152,     0,     0,   153,
     154,     0,   155,   156,   157,     0,   158,     0,   159,   160,
     161,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,  2869,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,   208,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,   220,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,   257,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,   327,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,   335,     0,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,     0,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,   381,     0,   382,   383,     0,   384,   385,   386,     0,
     387,     0,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,     0,     0,     0,   405,     0,     0,
       0,   406,     0,   407,   408,   409,   410,     0,   411,   412,
     413,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,     0,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,   472,   473,     0,     0,   474,     0,
       0,   475,     0,   476,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,   127,
     492,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,     0,   136,     0,   137,   138,
     139,   140,   141,   142,     0,   143,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,   150,   151,     0,     0,   152,     0,     0,   153,
     154,     0,   155,   156,   157,     0,   158,     0,   159,   160,
     161,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,   208,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,   220,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,   257,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,   327,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,   335,     0,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,     0,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,   354,
    2939,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,   381,     0,   382,   383,     0,   384,   385,   386,     0,
     387,     0,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,     0,     0,     0,   405,     0,     0,
       0,   406,     0,   407,   408,   409,   410,     0,   411,   412,
     413,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,     0,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,   472,   473,     0,     0,   474,     0,
       0,   475,     0,   476,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,   127,
     492,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,     0,   136,     0,   137,   138,
     139,   140,   141,   142,     0,   143,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,   150,   151,     0,     0,   152,     0,     0,   153,
     154,     0,   155,   156,   157,     0,   158,     0,   159,   160,
     161,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,   208,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,   220,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,   257,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,   327,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,   335,     0,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,     0,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,   381,     0,   382,   383,     0,   384,   385,   386,     0,
     387,     0,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,     0,     0,     0,   405,     0,     0,
       0,   406,     0,   407,   408,   409,   410,     0,   411,   412,
     413,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,   124,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,   472,   473,     0,     0,   474,     0,
       0,   475,     0,   476,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,   127,
     492,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,     0,   136,     0,   137,   138,
     139,   140,   141,   142,     0,   143,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,   150,   151,     0,     0,   152,     0,     0,   153,
     154,     0,   155,   156,   157,     0,   158,     0,   159,   160,
     161,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,   208,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,   220,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,   257,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,   327,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,   335,     0,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,     0,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,   381,     0,   382,   383,     0,   384,   385,   386,     0,
     387,     0,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,     0,     0,     0,   405,     0,     0,
       0,   406,     0,   407,   408,   409,   410,     0,   411,   412,
     413,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,     0,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,   472,   473,     0,     0,   474,     0,
       0,   475,     0,   476,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,   127,
     492,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,     0,   136,     0,   137,   138,
     139,   140,   141,   142,     0,   143,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,   150,   151,     0,     0,   152,     0,     0,   153,
     154,     0,   155,   156,   157,     0,   158,     0,   159,   160,
     161,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,   203,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,   208,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,   220,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,     0,   228,  1743,   230,     0,
       0,   231,     0,     0,     0,   232,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,   257,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,   264,   265,     0,     0,   266,     0,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,  1744,   325,   326,
       0,     0,     0,   327,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,   335,     0,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,     0,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,     0,     0,   352,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,   381,     0,   382,   383,     0,   384,   385,   386,     0,
     387,     0,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,     0,     0,     0,   405,     0,     0,
       0,   406,     0,   407,   408,   409,   410,     0,   411,   412,
     413,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,     0,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,   464,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,   472,   473,     0,     0,   474,     0,
       0,   475,     0,   476,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,   127,
     492,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,     0,     0,     0,   137,   138,
     139,   140,   141,     0,     0,  -274,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,     0,     0,     0,     0,   152,  3827,     0,   153,
     154,     0,   155,   156,     0,     0,     0,     0,   159,   160,
     161,   162,  3828,     0,   164,   165,     0,   166,   167,     0,
     168,   169,     0,   171,     0,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,     0,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,     0,     0,     0,     0,     0,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,     0,     0,     0,   204,
     205,   206,     0,  -244,  -244,   207,     0,  -244,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,     0,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,  3829,   228,   229,   230,     0,
       0,     0,     0,     0,     0,     0,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,     0,   243,     0,     0,     0,     0,     0,
     246,     0,     0,     0,   247,   248,   249,   250,  3830,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,     0,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,  3831,     0,     0,   263,     0,
       0,     0,   265,     0,     0,   266,  3832,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,  -229,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,     0,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,  3833,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   338,
     339,     0,     0,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,     0,     0,     0,     0,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,     0,     0,   377,     0,   379,  -229,     0,   380,
       0,     0,     0,   382,     0,     0,   384,   385,   386,  3834,
     387,     0,     0,     0,   389,   390,   391,   392,   393,   394,
     395,     0,   397,   398,     0,   399,     0,     0,     0,     0,
     401,   402,   403,     0,     0,     0,     0,   405,     0,     0,
       0,   406,     0,     0,   408,     0,   410,     0,   411,     0,
       0,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,     0,   425,   426,   427,   428,   429,     0,     0,
       0,     0,     0,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,     0,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,     0,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,     0,     0,     0,     0,   474,     0,
       0,   475,     0,     0,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,  -229,     0,
       0,     0,   487,     0,     0,   489,     0,   491,     0,   127,
     492,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,     0,     0,     0,   137,   138,
     139,   140,   141,     0,     0,  -274,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,     0,     0,     0,     0,   152,  3827,     0,   153,
     154,     0,   155,   156,     0,     0,     0,     0,   159,   160,
     161,   162,  3828,     0,   164,   165,     0,   166,   167,     0,
     168,   169,     0,   171,     0,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,     0,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,     0,     0,     0,     0,     0,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,     0,     0,     0,   204,
     205,   206,     0,  -265,     0,   207,     0,  -265,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,     0,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,  3829,   228,   229,   230,     0,
       0,     0,     0,     0,     0,     0,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,     0,   243,     0,     0,     0,     0,     0,
     246,     0,     0,     0,   247,   248,   249,   250,  3830,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,     0,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,  3831,     0,     0,   263,     0,
       0,     0,   265,     0,     0,   266,  3832,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,  -229,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,     0,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,  3833,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   338,
     339,     0,     0,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,     0,     0,     0,     0,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,     0,     0,   377,     0,   379,  -229,     0,   380,
       0,     0,     0,   382,     0,     0,   384,   385,   386,  3834,
     387,     0,     0,     0,   389,   390,   391,   392,   393,   394,
     395,     0,   397,   398,     0,   399,     0,     0,     0,     0,
     401,   402,   403,     0,     0,     0,     0,   405,     0,     0,
       0,   406,     0,     0,   408,     0,   410,     0,   411,     0,
       0,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,     0,   425,   426,   427,   428,   429,     0,     0,
       0,     0,     0,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,     0,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,     0,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,     0,     0,     0,     0,   474,     0,
       0,   475,     0,     0,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,  -265,     0,  -229,     0,
       0,     0,   487,     0,     0,   489,     0,   491,     0,   127,
     492,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,     0,     0,     0,   137,   138,
     139,   140,   141,     0,     0,  -274,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,     0,     0,     0,     0,   152,  3827,     0,   153,
     154,     0,   155,   156,     0,     0,     0,     0,   159,   160,
     161,   162,  3828,     0,   164,   165,     0,   166,   167,     0,
     168,   169,     0,   171,     0,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,     0,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,     0,     0,     0,     0,     0,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,     0,     0,     0,   204,
     205,   206,     0,  -262,     0,   207,     0,  -262,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,     0,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,  3829,   228,   229,   230,     0,
       0,     0,     0,     0,     0,     0,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,     0,   243,     0,     0,     0,     0,     0,
     246,     0,     0,     0,   247,   248,   249,   250,  3830,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,     0,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,  3831,     0,     0,   263,     0,
       0,     0,   265,     0,     0,   266,  3832,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,  -229,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,     0,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,  3833,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   338,
     339,     0,     0,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,     0,     0,     0,     0,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,     0,     0,   377,     0,   379,  -229,     0,   380,
       0,     0,     0,   382,     0,     0,   384,   385,   386,  3834,
     387,     0,     0,     0,   389,   390,   391,   392,   393,   394,
     395,     0,   397,   398,     0,   399,     0,     0,     0,     0,
     401,   402,   403,     0,     0,     0,     0,   405,     0,     0,
       0,   406,     0,     0,   408,     0,   410,     0,   411,     0,
       0,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,     0,   425,   426,   427,   428,   429,     0,     0,
       0,     0,     0,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,     0,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,     0,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,     0,     0,     0,     0,   474,     0,
       0,   475,     0,     0,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,  -262,     0,  -229,     0,
       0,     0,   487,     0,     0,   489,     0,   491,     0,   127,
     492,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,     0,     0,     0,   137,   138,
     139,   140,   141,     0,     0,  -274,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,     0,     0,     0,     0,   152,  3827,     0,   153,
     154,     0,   155,   156,     0,     0,     0,     0,   159,   160,
     161,   162,  3828,     0,   164,   165,     0,   166,   167,     0,
     168,   169,     0,   171,     0,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,     0,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,     0,     0,     0,     0,     0,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,     0,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,  4166,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,     0,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,  3829,   228,   229,   230,     0,
       0,     0,     0,     0,     0,     0,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,     0,   243,     0,     0,     0,     0,     0,
     246,     0,     0,     0,   247,   248,   249,   250,  3830,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,     0,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,  3831,     0,     0,   263,     0,
       0,     0,   265,     0,     0,   266,  3832,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,  -229,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,     0,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,  3833,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   338,
     339,     0,     0,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,     0,     0,     0,     0,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,     0,     0,   377,     0,   379,  -229,     0,   380,
       0,     0,     0,   382,     0,     0,   384,   385,   386,  3834,
     387,     0,     0,     0,   389,   390,   391,   392,   393,   394,
     395,     0,   397,   398,     0,   399,     0,     0,     0,     0,
     401,   402,   403,     0,     0,     0,     0,   405,     0,     0,
       0,   406,     0,     0,   408,     0,   410,     0,   411,     0,
       0,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,     0,   425,   426,   427,   428,   429,     0,     0,
       0,     0,     0,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,     0,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,     0,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,     0,     0,     0,     0,   474,     0,
       0,   475,     0,     0,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,  -229,     0,
       0,     0,   487,     0,     0,   489,     0,   491,     0,   127,
     492,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,     0,     0,     0,   137,   138,
     139,   140,   141,     0,     0,  -274,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,     0,     0,     0,     0,   152,  3827,     0,   153,
     154,     0,   155,   156,     0,     0,     0,     0,   159,   160,
     161,   162,  3828,     0,   164,   165,     0,   166,   167,     0,
     168,   169,     0,   171,     0,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,     0,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,     0,     0,     0,     0,     0,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,     0,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,  -267,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,     0,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,  3829,   228,   229,   230,     0,
       0,     0,     0,     0,     0,     0,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,     0,   243,     0,     0,     0,     0,     0,
     246,     0,     0,     0,   247,   248,   249,   250,  3830,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,     0,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,  3831,     0,     0,   263,     0,
       0,     0,   265,     0,     0,   266,  3832,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,  -229,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,     0,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,  3833,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   338,
     339,     0,     0,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,     0,     0,     0,     0,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,     0,     0,   377,     0,   379,  -229,     0,   380,
       0,     0,     0,   382,     0,     0,   384,   385,   386,  3834,
     387,     0,     0,     0,   389,   390,   391,   392,   393,   394,
     395,     0,   397,   398,     0,   399,     0,     0,     0,     0,
     401,   402,   403,     0,     0,     0,     0,   405,     0,     0,
       0,   406,     0,     0,   408,     0,   410,     0,   411,     0,
       0,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,     0,   425,   426,   427,   428,   429,     0,     0,
       0,     0,     0,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,     0,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,     0,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,     0,     0,     0,     0,   474,     0,
       0,   475,     0,     0,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,  -229,     0,
       0,     0,   487,     0,     0,   489,     0,   491,     0,   127,
     492,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,     0,     0,     0,   137,   138,
     139,   140,   141,     0,     0,  -274,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,     0,     0,     0,     0,   152,  3827,     0,   153,
     154,     0,   155,   156,     0,     0,     0,     0,   159,   160,
     161,   162,  3828,     0,   164,   165,     0,   166,   167,     0,
     168,   169,     0,   171,     0,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,     0,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,     0,     0,     0,     0,     0,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,     0,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,  4274,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,     0,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,  3829,   228,   229,   230,     0,
       0,     0,     0,     0,     0,     0,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,     0,   243,     0,     0,     0,     0,     0,
     246,     0,     0,     0,   247,   248,   249,   250,  3830,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,     0,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,  3831,     0,     0,   263,     0,
       0,     0,   265,     0,     0,   266,  3832,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,  -229,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,     0,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,  3833,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   338,
     339,     0,     0,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,     0,     0,     0,     0,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,     0,     0,   377,     0,   379,  -229,     0,   380,
       0,     0,     0,   382,     0,     0,   384,   385,   386,  3834,
     387,     0,     0,     0,   389,   390,   391,   392,   393,   394,
     395,     0,   397,   398,     0,   399,     0,     0,     0,     0,
     401,   402,   403,     0,     0,     0,     0,   405,     0,     0,
       0,   406,     0,     0,   408,     0,   410,     0,   411,     0,
       0,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,     0,   425,   426,   427,   428,   429,     0,     0,
       0,     0,     0,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,     0,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,     0,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,     0,     0,     0,     0,   474,     0,
       0,   475,     0,     0,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,  -229,     0,
       0,     0,   487,     0,     0,   489,     0,   491,     0,   127,
     492,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,     0,     0,     0,   137,   138,
     139,   140,   141,     0,     0,  -274,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,     0,     0,     0,     0,   152,  3827,     0,   153,
     154,     0,   155,   156,     0,     0,     0,     0,   159,   160,
     161,   162,  3828,     0,   164,   165,     0,   166,   167,     0,
     168,   169,     0,   171,     0,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,     0,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,     0,     0,     0,     0,     0,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,     0,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,  4320,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,     0,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,  3829,   228,   229,   230,     0,
       0,     0,     0,     0,     0,     0,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,     0,   243,     0,     0,     0,     0,     0,
     246,     0,     0,     0,   247,   248,   249,   250,  3830,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,     0,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,  3831,     0,     0,   263,     0,
       0,     0,   265,     0,     0,   266,  3832,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,  -229,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,     0,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,  3833,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   338,
     339,     0,     0,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,     0,     0,     0,     0,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,     0,     0,   377,     0,   379,  -229,     0,   380,
       0,     0,     0,   382,     0,     0,   384,   385,   386,  3834,
     387,     0,     0,     0,   389,   390,   391,   392,   393,   394,
     395,     0,   397,   398,     0,   399,     0,     0,     0,     0,
     401,   402,   403,     0,     0,     0,     0,   405,     0,     0,
       0,   406,     0,     0,   408,     0,   410,     0,   411,     0,
       0,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,     0,   425,   426,   427,   428,   429,     0,     0,
       0,     0,     0,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,     0,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,     0,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,     0,     0,     0,     0,   474,     0,
       0,   475,     0,     0,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,  -229,     0,
       0,     0,   487,     0,     0,   489,     0,   491,     0,   127,
     492,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,     0,     0,     0,   137,   138,
     139,   140,   141,     0,     0,  -274,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,     0,     0,     0,     0,   152,  3827,     0,   153,
     154,     0,   155,   156,     0,     0,     0,     0,   159,   160,
     161,   162,  3828,     0,   164,   165,     0,   166,   167,     0,
     168,   169,     0,   171,     0,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,     0,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,     0,     0,     0,     0,     0,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,     0,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,  -248,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,     0,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,  3829,   228,   229,   230,     0,
       0,     0,     0,     0,     0,     0,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,     0,   243,     0,     0,     0,     0,     0,
     246,     0,     0,     0,   247,   248,   249,   250,  3830,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,     0,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,  3831,     0,     0,   263,     0,
       0,     0,   265,     0,     0,   266,  3832,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,  -229,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,     0,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,  3833,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   338,
     339,     0,     0,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,     0,     0,     0,     0,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,     0,     0,   377,     0,   379,  -229,     0,   380,
       0,     0,     0,   382,     0,     0,   384,   385,   386,  3834,
     387,     0,     0,     0,   389,   390,   391,   392,   393,   394,
     395,     0,   397,   398,     0,   399,     0,     0,     0,     0,
     401,   402,   403,     0,     0,     0,     0,   405,     0,     0,
       0,   406,     0,     0,   408,     0,   410,     0,   411,     0,
       0,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,     0,   425,   426,   427,   428,   429,     0,     0,
       0,     0,     0,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,     0,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,     0,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,     0,     0,     0,     0,   474,     0,
       0,   475,     0,     0,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,  -229,     0,
       0,     0,   487,     0,     0,   489,     0,   491,     0,   127,
     492,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,     0,     0,     0,   137,   138,
     139,   140,   141,     0,     0,  -274,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,     0,     0,     0,     0,   152,  3827,     0,   153,
     154,     0,   155,   156,     0,     0,     0,     0,   159,   160,
     161,   162,  3828,     0,   164,   165,     0,   166,   167,     0,
     168,   169,     0,   171,     0,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,     0,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,     0,     0,     0,     0,     0,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,     0,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,     0,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,     0,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,  3829,   228,   229,   230,     0,
       0,     0,     0,     0,     0,     0,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,     0,   243,     0,     0,     0,     0,     0,
     246,     0,     0,     0,   247,   248,   249,   250,  3830,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,     0,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,  3831,     0,     0,   263,     0,
       0,     0,   265,     0,     0,   266,  3832,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,  -229,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,     0,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,  3833,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   338,
     339,     0,     0,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,     0,     0,     0,     0,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,     0,     0,   377,     0,   379,  -229,     0,   380,
       0,     0,     0,   382,     0,     0,   384,   385,   386,  3834,
     387,     0,     0,     0,   389,   390,   391,   392,   393,   394,
     395,     0,   397,   398,     0,   399,     0,     0,     0,     0,
     401,   402,   403,     0,     0,     0,     0,   405,     0,     0,
       0,   406,     0,     0,   408,     0,   410,     0,   411,     0,
       0,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,     0,   425,   426,   427,   428,   429,     0,     0,
       0,     0,     0,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,     0,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,     0,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,     0,     0,     0,     0,   474,     0,
       0,   475,     0,     0,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,  -229,     0,
       0,     0,   487,     0,     0,   489,     0,   491,     0,   127,
     492,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,     0,     0,     0,   137,   138,
     139,   140,   141,     0,     0,  -274,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,     0,     0,     0,     0,   152,  3827,     0,   153,
     154,     0,   155,   156,     0,     0,     0,     0,   159,   160,
     161,   162,  3828,     0,   164,   165,     0,   166,   167,     0,
     168,   169,     0,   171,     0,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,     0,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,     0,     0,     0,     0,     0,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,     0,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,     0,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,     0,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,  3829,   228,   229,   230,     0,
       0,     0,     0,     0,     0,     0,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,     0,   243,     0,     0,     0,     0,     0,
     246,     0,     0,     0,   247,   248,   249,   250,  3830,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,     0,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,  3831,     0,     0,   263,     0,
       0,     0,   265,     0,     0,   266,  3832,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,  -229,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,     0,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,  3833,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   338,
     339,     0,     0,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,     0,     0,     0,     0,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,     0,     0,   377,     0,   379,  -229,     0,   380,
       0,     0,     0,   382,     0,     0,   384,   385,   386,  3834,
     387,     0,     0,     0,   389,   390,   391,   392,   393,   394,
     395,     0,   397,   398,     0,   399,     0,     0,     0,     0,
     401,   402,   403,     0,     0,     0,     0,   405,     0,     0,
       0,   406,     0,     0,   408,     0,   410,     0,   411,     0,
       0,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,     0,   425,   426,   427,   428,   429,     0,     0,
       0,     0,     0,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,     0,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,     0,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,     0,     0,     0,     0,   474,     0,
       0,  4169,     0,     0,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,  -229,     0,
       0,     0,   487,     0,     0,   489,     0,   491,     0,   127,
     492,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,   134,   135,     0,     0,     0,     0,   137,   138,
     139,   140,   141,     0,     0,     0,     0,     0,     0,   144,
       0,     0,     0,   145,     0,     0,   146,   147,   148,     0,
     149,     0,     0,     0,     0,     0,   152,     0,     0,   153,
     154,     0,   155,   156,     0,     0,     0,     0,   159,   160,
     161,   162,     0,     0,   164,   165,     0,   166,   167,     0,
     168,   169,     0,   171,     0,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,     0,   183,     0,     0,
       0,   184,     0,     0,   185,     0,   186,     0,     0,   187,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,     0,     0,     0,     0,     0,   194,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,   202,     0,     0,     0,     0,     0,     0,   204,
     205,   206,     0,     0,     0,   207,     0,     0,   209,     0,
     210,   211,   212,     0,     0,   213,   214,     0,   215,   216,
     217,   218,   219,     0,     0,     0,   221,   222,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,     0,     0,     0,     0,     0,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,     0,     0,   243,     0,     0,     0,     0,     0,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,   254,     0,   255,     0,     0,     0,
       0,   256,     0,     0,     0,     0,   258,     0,     0,     0,
     259,   260,     0,   261,   262,     0,     0,     0,   263,     0,
       0,     0,   265,     0,     0,   266,     0,     0,   267,   268,
       0,     0,     0,     0,     0,   269,   270,     0,   271,     0,
     272,     0,   273,   274,     0,     0,     0,     0,     0,     0,
       0,   275,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,   294,   295,     0,   296,   297,   298,   299,     0,
     300,   301,     0,     0,     0,     0,   302,   303,   304,   305,
     306,   307,     0,     0,   308,   309,     0,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,     0,   323,   324,   325,   326,
       0,     0,     0,     0,   328,     0,     0,     0,   329,     0,
     330,   331,   332,     0,   333,   334,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   338,
     339,     0,     0,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,     0,     0,     0,     0,   353,   354,
       0,   355,     0,   356,   357,   358,   359,   360,     0,   361,
     362,   363,     0,     0,   364,     0,     0,     0,   365,   366,
     367,   368,   369,     0,     0,   370,   371,   372,   373,   374,
       0,   375,     0,     0,   377,     0,   379,     0,     0,   380,
       0,     0,     0,   382,     0,     0,   384,   385,   386,     0,
     387,     0,     0,     0,   389,   390,   391,   392,   393,   394,
     395,     0,   397,   398,     0,   399,     0,     0,     0,     0,
     401,   402,   403,     0,     0,     0,     0,   405,     0,     0,
       0,   406,     0,     0,   408,     0,   410,     0,   411,     0,
       0,   414,   415,     0,     0,     0,     0,     0,   416,   417,
     418,     0,   419,   420,     0,   421,     0,     0,   422,     0,
       0,   423,     0,   425,   426,   427,   428,   429,     0,     0,
       0,     0,     0,   431,     0,   432,   433,   434,   435,   436,
     437,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,     0,   444,   445,   446,   447,   448,     0,     0,   449,
     450,     0,   451,   452,   453,   454,   455,     0,     0,     0,
       0,   456,   457,   458,   459,   460,   461,     0,   462,   463,
       0,     0,     0,     0,   465,   466,   467,     0,   468,   469,
       0,   470,   471,     0,     0,     0,     0,     0,   474,     0,
       0,   475,     0,     0,     0,   477,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,     0,     0,   489,     0,   491,     0,     0,
     492
};

static const yytype_int16 yycheck[] =
{
       6,   650,   651,   641,   580,   789,   579,   580,    19,   879,
     880,   956,    18,   598,  1109,    21,   858,    28,   112,   889,
     579,  1296,    10,    34,    30,   957,  1296,  1804,  1519,  1652,
     527,  1479,  1045,    39,  1371,  1139,  1283,     6,  1039,  1040,
     898,  1139,    48,  1086,   614,  1806,   924,  1351,  1468,  1762,
    1468,  1987,  1477,  1933,  2468,     4,  2262,   627,  2098,  2396,
    1162,  2784,  2306,  2103,  3171,  2384,   924,  1169,  2728,  1076,
    1468,  2363,  2364,  2554,  2194,  1170,  1171,   961,    84,  1174,
    1175,  1176,  1177,  1289,  1179,  1180,  1181,  1182,  1183,  1184,
    1185,  1186,   637,   638,  1956,  1954,   961,  2058,  1960,    21,
     106,  2013,   108,  1835,  2371,   111,   112,   113,  2058,  1971,
    1905,  1906,   710,   655,  2931,  2463,  2322,  2441,  2377,  3401,
    2983,  1983,  1950,  3176,  2469,  1383,  2385,  1922,    16,    17,
     670,  2232,    34,    25,    74,    17,    16,    17,  1950,   108,
     778,  2585,   111,  1401,  1939,  1940,    20,  1448,    47,    25,
    1458,    51,    61,  3066,  1412,  1413,     8,   119,    16,    17,
    1955,   937,    84,  1958,  1959,    20,  1961,  3234,  3235,  1964,
    1965,  3238,    78,  1968,   149,    27,  3194,  1208,  1973,  2588,
      36,    33,  3442,  1978,  1979,  1980,  1981,  1982,    17,  2047,
    3257,  1986,  1500,  1988,    46,    64,  3263,  3445,    30,  1994,
    1995,  1996,  1997,   893,    71,  2000,   896,  2002,    30,    16,
      17,  2646,   267,   110,  2582,  1458,   906,    79,  2586,  1462,
      22,  1464,   190,   124,    66,   121,   766,   767,   768,   143,
    2058,   921,   922,   923,   175,   925,  2682,  2444,   808,   779,
      20,    82,   190,    36,    68,    21,  2058,  2042,  2043,  2044,
    2045,  3455,  1802,  2833,   155,   367,    86,  1500,    60,    61,
    2429,  2925,   378,  1458,   268,    16,    17,  1462,   108,  1464,
     122,  1924,   842,   155,    72,  3643,   124,   685,   363,   124,
     318,   155,   216,  3502,    78,   159,  2732,   391,   372,   185,
    3397,   390,   421,   285,   145,   225,   159,    16,    17,    78,
     346,  2568,  2182,  2570,   159,  1500,   473,   155,   193,    16,
      17,  3804,    22,    20,    16,    17,    12,    72,    16,    17,
      84,  3581,  1942,   369,    34,   221,     8,   223,   252,   446,
      16,    17,   229,   454,   514,   193,    16,    17,    48,   438,
     232,   473,  2425,  2426,   926,   126,   473,  2081,   254,   757,
      60,    61,    16,    17,   130,   240,   232,   213,   124,    16,
      17,   149,  4120,   554,    37,  4123,   149,  3627,  1017,  1018,
    1019,    16,    17,   359,   378,   592,   193,  1896,   554,   159,
     544,   250,   193,   547,   124,    22,   282,    16,    17,   155,
     210,   210,    16,    17,   973,   974,   510,    34,   166,    16,
      17,   229,  3057,    12,    35,   647,  3061,   147,  3621,   164,
      35,    48,   641,   655,   508,   612,  3483,   129,   615,   648,
     213,   535,   314,    60,    61,  3492,   175,   255,   196,   421,
     285,   648,   243,  1012,  3647,   255,   255,   601,   314,  2522,
    2523,   114,   987,   139,   184,    16,    17,   554,  3515,   144,
     436,   268,  3734,  3520,   548,    10,   647,   162,  3951,  1329,
     254,   242,    16,    17,   129,  2188,    20,   363,    16,    17,
    2737,  2738,  2791,   653,  1344,   254,   417,  1075,   654,  3698,
     647,  4239,    71,    21,   360,    64,   355,    16,    17,   377,
    1422,  1089,   380,   378,    16,    17,   625,   377,    16,    17,
     380,   183,   508,  1807,   510,  3612,  3559,  2831,    16,    17,
    2390,  2835,  2836,  2530,   444,   647,  2853,   362,  2556,   377,
     647,   285,   380,  1971,   236,   531,   159,  1165,   452,   535,
     139,   382,   649,   649,   655,  2447,  3200,   649,   544,  2451,
      16,    17,   548,   647,   550,    51,    16,    17,  2484,   111,
     649,   451,   114,  2465,  2466,   963,    16,    17,   265,   605,
     566,  1058,  1059,   648,  1448,  2477,   421,   481,   623,  2530,
    2450,   655,  2452,   579,  3437,  3943,  1434,  3945,   584,  2459,
    2530,   379,  1079,  1448,  2318,  1680,   416,    74,   592,   523,
    2721,  1088,   130,  2473,  2506,  3648,  1691,   421,   604,  1694,
    2480,  2429,  3182,  1100,  1101,  1102,  3810,  2005,   614,   647,
     616,  1108,  2492,  2493,  2494,  1499,  1924,  2429,  2498,   482,
    1878,   627,   628,   629,   379,  2832,   377,   468,   634,   380,
     636,   637,   638,  1173,  1499,  3895,   642,   643,   630,  3362,
    2552,   647,  1950,  3089,  3090,  3091,   515,   622,   159,   491,
    1190,   657,  2821,   529,   660,   661,   523,   625,   377,   665,
     629,   380,   603,  2458,   159,   534,  2524,  1674,   417,  1214,
     377,   250,  1703,   380,  3934,   377,  2471,  3112,   380,   377,
     456,  1924,   380,  3129,  3130,  3131,  1376,   583,   540,  1379,
     652,   377,    16,    17,   380,  1385,  3749,   377,   554,  1942,
     380,   649,  2530,   612,   710,  3987,   628,   647,  3956,  1485,
     562,   805,   634,   377,  3732,  2982,   380,   569,  2530,   625,
     377,  3634,   584,   380,  1414,  1415,   625,  3780,  2972,  1924,
      16,    17,   377,  2528,   566,   380,   633,   566,  3173,  2047,
    2041,  1286,   618,   625,   566,   647,   634,  1942,   377,   649,
    2058,   380,   653,   377,   634,  2408,   380,   649,  1303,  2860,
     377,   554,   631,   380,   652,   771,  3629,   773,   648,   649,
    1340,   653,  3216,  3217,  2324,   630,   634,   617,   473,   653,
    3224,    16,    17,  3227,  3228,   879,   566,   581,   590,   883,
     884,   649,   655,   799,   800,   801,   155,   803,   804,   805,
    3244,   807,   808,   897,  2047,   653,   377,  2427,  2521,   380,
    1380,   605,   818,  3222,  3258,  2058,    16,    17,  1360,  3263,
    3264,  3265,  3266,   377,   830,  4107,   380,   634,  1410,   377,
    3883,   800,   380,  2567,   622,   804,   842,   843,   807,   622,
     513,   847,  3161,  2268,  3253,  3254,  3165,  3192,   377,   482,
    3218,   380,  2047,   408,   605,   377,  3180,  2376,   380,   377,
    3208,   955,   380,  2058,   640,   538,   190,   873,  2951,   377,
      16,    17,   380,   879,  3118,    16,    17,   883,   884,  1452,
     590,    16,    17,   634,  3252,   834,   598,   653,    16,    17,
    2667,   897,  3260,  3960,   567,  3962,  1466,  2388,   649,  3267,
     649,   377,  3161,  3170,   380,   615,  3165,   377,   830,   268,
     380,   129,  3729,   544,   619,   634,   547,   377,   456,   544,
     380,   843,   547,   410,  2647,   847,  3132,   634,  2705,   648,
     649,   937,   634,   598,   523,  2952,   634,   647,  2976,   194,
      16,    17,   649,  1813,  2856,   451,   648,   649,   634,   955,
     648,   957,   647,   590,   634,   534,   651,  4010,   513,  2383,
     812,  3407,   648,   649,   121,   229,  1508,   175,   648,   649,
     634,   482,    16,    17,   611,   612,  3866,   634,    16,    17,
     284,   987,    16,    17,   648,   649,  4039,   482,    51,   634,
    3121,  2952,   649,  2821,  1872,  2443,  2444,   559,  2711,  1597,
     562,   371,  2952,   648,   649,   634,    16,    17,  4115,  2821,
     634,   121,    16,    17,  1872,   188,    25,   634,   236,   648,
     649,   576,   655,  1901,   648,   649,  2363,  2364,   155,  2761,
     371,  1037,   649,  2128,   152,  1041,  3156,    43,   196,    16,
      17,    16,    17,  1901,    56,   163,    16,    17,  2910,  1698,
    2909,   324,   225,   377,   178,  3992,   380,   544,  1152,    16,
      17,   138,   617,   634,    16,    17,    16,    17,   234,  1075,
    2083,    11,    16,    17,  3555,   185,   426,   243,   649,  2285,
     634,   188,  2502,  1089,  2502,    63,   634,    46,   575,   628,
     159,   377,   473,   270,   380,  1189,    11,   557,   225,   544,
    2408,   649,   547,  2205,  2502,   634,  3996,    63,  1757,   274,
    3429,  3430,   634,    69,  2372,  1037,   634,    22,   225,  1041,
     649,  2429,    16,    17,  2952,   282,   634,   649,   243,    34,
      25,   649,  2407,  1139,   389,   193,  1706,  2850,   157,   443,
    2952,   649,   377,    48,   655,   380,  1152,   473,   157,   264,
    2425,  2426,   183,  1693,   357,    60,    61,  2041,   634,   193,
     655,  2784,  1732,  1708,   634,  2408,    16,    17,  2211,  2212,
      16,    17,   282,   649,   634,  1865,  2041,   377,   196,   649,
     380,  2276,  3062,  1189,  2427,   396,   126,  1877,  1194,  3125,
    1880,  1881,   249,  1199,   127,    78,   361,  2204,  1292,    16,
      17,   404,  2306,  3863,    16,    17,   363,  2214,  1214,   417,
     467,  1781,  1782,  2408,   279,  3875,  2524,   383,  3941,    16,
      17,    32,  2530,   232,    59,  1795,   444,   258,  3831,  3832,
     581,   377,  2427,   189,   380,   490,   377,   587,   362,   380,
      16,    17,   377,    17,   249,   380,   323,  2522,  2523,   377,
     408,   210,   380,   363,   605,   473,    16,    17,   376,    25,
     630,   159,    16,    17,   623,  1271,   647,  1273,  1827,  1275,
    2695,  3563,    16,    17,    16,    17,   341,  1199,  3190,   552,
    1286,  2524,  2386,  3323,  4391,   462,  1292,  2530,  2386,   630,
      16,    17,   190,   519,   653,   353,   359,  1303,  1304,  4236,
    3212,   377,    16,    17,   380,   314,    16,    17,   157,   107,
     634,  1317,   585,  3557,    16,    17,    24,   444,   523,  1325,
     624,   647,    16,    17,   648,  1331,   155,  1276,   359,  2524,
     121,    16,    17,   377,  1340,  2530,   380,   232,  3051,   377,
     346,   360,   380,   377,  1350,  1351,   380,   359,   634,   232,
     473,   360,   285,  1275,   393,  1361,  1362,  1363,  1364,  1365,
    1366,  1455,   277,   649,   421,  1371,   140,   377,  2792,  2793,
     380,  1377,  1378,   377,  1380,  2479,   380,   221,  1384,   223,
     598,  2479,  1304,   232,  2832,    16,    17,   643,   451,   547,
     408,   157,  1361,  1362,  1363,   603,  1365,    16,    17,   634,
     377,  1407,   377,   380,   232,   380,  1355,   377,   613,  1378,
     380,    99,  4302,   482,   649,  1384,   421,   215,   481,   314,
     377,    16,    17,   380,   122,   377,   583,   377,   380,   647,
     380,   604,   243,   377,   634,   553,   380,    38,   206,   268,
     380,   649,  1364,   126,  1366,   121,  3783,   473,   648,  1455,
     406,   429,    16,    17,   578,   823,   267,   203,   523,   167,
    1466,   574,  2910,   360,   268,  1471,   232,   252,  1474,  1475,
     594,   354,   307,   583,   547,   650,   651,   360,   263,  1485,
      21,  2351,   648,   377,   252,  1407,   380,  3959,   634,    16,
      17,   282,  3736,   634,   396,    16,    17,   604,  1504,   634,
    1506,  1507,   648,  1509,  1510,     0,   634,   466,   649,   185,
     529,   360,  1461,  2821,   649,   554,  1522,   268,  1524,   140,
     529,   649,   123,   155,   647,   225,   653,   377,   274,   547,
     380,   377,   360,  3573,   380,    16,    17,  1506,  1507,    16,
      17,   403,   368,   241,   427,   233,    52,   803,   314,  1471,
      16,    17,   159,  1475,  2801,  2715,  2569,    63,   634,   242,
     377,  2663,   336,   380,   252,   377,    12,   393,   380,  4172,
    4173,   939,   363,   649,   378,   263,  3782,   159,    16,    17,
     377,   416,   129,   380,   482,   285,   384,    16,    17,   130,
     634,  1597,  1598,  3717,   360,   393,   634,    16,    17,   618,
     634,   377,   400,   206,   380,   649,   282,   473,  2105,   618,
     378,   649,  2716,    58,   648,  1709,   547,   377,  2716,   430,
     380,   647,  2119,   377,   634,   651,   380,   378,    16,    17,
     634,   489,   529,   377,   473,   377,   380,   593,   380,   649,
     649,    16,    17,  2803,  2952,   649,   529,    16,    17,    16,
      17,   377,  1658,   461,   380,  2152,   491,   634,   346,   634,
    3080,  3079,   178,   377,   634,   127,   380,   377,  2208,   554,
     380,   648,  3097,   458,   649,   377,  2951,   634,   380,   649,
     529,   166,   634,   377,   634,   590,   380,   363,    12,   236,
     634,   648,   377,   139,  1700,   380,   648,   495,   648,   190,
    1706,   529,  1708,  1709,   648,   588,   126,  3831,  3832,  2952,
     484,   485,    16,    17,  1720,   336,  1810,   417,  3598,   124,
    4134,   618,    16,    17,  2221,   423,  1732,   193,   554,  3665,
     175,  3444,   478,   138,   179,   618,   204,   545,   596,  3362,
     634,  4213,  4214,   551,  1750,   190,   377,   625,  1754,   380,
      16,    17,   214,    34,   648,    16,    17,  2952,   377,  3454,
     641,   380,   647,   529,  3742,  3743,   655,   648,   274,   618,
     458,   649,    19,    17,   193,  1781,  1782,  1783,  1784,   637,
      61,   647,   377,  2356,   634,   380,   277,    34,   634,  1795,
     618,  2331,   583,   601,   623,    16,    17,  2356,   648,    16,
      17,  1807,   648,   601,  1810,    16,    17,  3502,   647,   617,
     140,   986,    59,   377,    12,   139,   380,   634,   224,  1768,
      12,  1827,   634,   285,   653,   234,    16,    17,  1750,   206,
    1779,   648,  1754,   531,   243,  1841,   648,   634,    16,    17,
     356,   357,   530,   311,   312,    25,   362,  3151,   316,   317,
     377,   648,   618,   380,  3978,  3979,   377,    85,   634,   380,
    1035,  1783,  1784,   473,   638,   639,   640,   641,   642,   643,
     644,   645,   648,  1879,   634,   547,   104,   322,   157,   408,
     634,   121,  1888,   605,  2457,   554,  2728,  1836,   648,  1895,
     634,   551,   634,    17,   648,  2773,   377,   444,    78,   380,
     377,  2779,  3518,   380,   648,  3521,   648,   583,   634,  3887,
    3157,   377,    78,  3891,   380,  2773,    16,    17,   323,   229,
     634,  2779,   648,    69,   634,   269,   473,   649,   272,  2799,
       8,  3979,   634,   655,   648,   356,   357,   593,   648,   377,
     634,   139,   380,  2986,   110,   185,   648,   139,   377,   634,
    4074,   380,    30,   232,   648,   107,    78,  1879,   377,  3575,
    1909,   380,  2056,   648,   652,  4089,  2060,  3010,  3011,  1918,
    1919,   229,   417,  1895,   383,  3953,  3954,   157,   647,  4103,
    1929,  1930,  1931,  1932,   513,  1934,  1935,   605,   605,   377,
    3033,   157,   380,  1999,   524,   525,   176,   516,   229,   609,
     610,    75,   377,   634,  2098,   380,   336,  2013,   377,  2103,
     377,   380,   224,   380,   166,   634,   140,   648,  3122,   206,
    2669,   642,   643,   644,   645,  3905,  3906,  3907,  3908,   648,
     648,   649,   649,   647,   553,   157,  4160,   647,   655,   634,
     136,   655,   282,   372,   196,  2499,    25,   576,  4172,  4173,
    2056,   598,   232,   648,  2060,   151,  2062,   119,    34,  2065,
     307,   240,   578,   229,   166,  3169,  2072,  2073,  2074,  2075,
     634,  3169,  2078,   377,   418,    78,   380,  3838,   594,   190,
     557,   360,  3877,   377,   648,    61,   380,   190,   617,    92,
      47,  2781,  2098,   193,   196,  4219,  2065,  2103,  3202,    78,
     647,   626,   627,  2197,  3202,  4229,   193,   634,   648,   649,
     232,   377,  4160,   634,   380,   189,   377,   648,   649,   380,
    4000,   648,  2449,   363,   649,   121,  3921,   648,   124,  3924,
    3925,  3926,  3927,  2227,   314,   111,  3913,   285,   114,   648,
      58,   653,  4266,  2713,  4268,    25,   122,   313,  2475,  2476,
    2072,  2073,  2074,   634,  4278,   229,   377,   634,   220,   380,
     377,  2658,    69,   380,    12,   331,   377,   648,   634,   380,
     159,  4295,    99,  4297,   354,  4299,   648,   649,   157,     6,
     360,   255,  4306,   599,  3185,  3186,   655,   377,   354,   185,
     380,  2197,  4316,   648,   649,   513,   634,   176,    78,   377,
     107,  3914,   380,   374,   649,   634,  4330,  4331,   592,   593,
     648,   595,   336,   597,    12,   634,  2222,   213,  4266,   648,
    4268,  2227,   647,  4347,  4348,   189,  3563,     6,  4352,  3272,
      57,   444,   354,  2239,  4029,  4030,    60,    61,   360,  2245,
    2246,   473,  2248,  4038,    42,  3115,   634,  4295,    72,   481,
     529,   648,   649,   232,   257,   647,   408,   175,   129,   634,
     648,   179,   648,   649,   326,   634,    11,   634,   330,  2275,
     648,   649,   190,   648,   647,   337,    32,   377,   649,   648,
     380,   648,  4330,  4331,  1733,   647,   282,  1736,   195,   647,
    1739,   139,  3396,   648,   649,    93,   176,  3310,  3396,    97,
    2306,  2395,  2396,   655,  2310,   427,   233,  2313,  2314,  2315,
     640,   641,   642,   643,   644,   645,   143,   554,  3941,  2325,
    4033,  2327,   229,  2245,  2246,   252,  2248,    16,    17,   369,
     634,   334,   406,   648,   649,   314,   263,   121,   647,   618,
     634,   121,  3224,   583,   648,  3227,  3228,  3795,  3796,   529,
    2356,   647,   232,   415,   648,   647,   359,  2363,  2364,    31,
     484,   485,  3244,   529,   647,   236,   214,   363,   634,   647,
     649,   278,   348,   634,  2468,   354,  2325,   609,   610,   545,
    2386,   360,   648,   647,   140,    78,  2840,   648,   647,  2395,
    2396,  2313,  2314,  2315,   647,   547,   647,   421,   648,   649,
     170,   185,  3334,   605,   322,   185,   647,   529,    80,   471,
      60,    61,   647,   634,   647,   647,   419,   634,   442,   346,
    2874,  3912,   647,   634,   576,   647,  2437,   648,  2882,   213,
    2436,   648,  2886,   213,   314,  2441,    11,  2448,   618,   647,
    2446,  2447,   369,  2454,   634,  2451,   647,  2453,   647,   247,
     140,  2439,   476,   723,    16,    17,   634,  2463,   648,  2465,
    2466,   647,  2468,  2469,   157,   617,   588,  2478,  2474,   649,
     648,  2477,  2483,  2479,   354,   745,   648,   649,  2489,  2490,
     360,   153,  2488,    75,  2938,   648,   649,   243,   758,   759,
      12,   647,    26,  2499,  3308,  3309,   618,   647,   282,   417,
    2506,  2507,   282,   648,   649,   647,  2455,  2456,   648,   649,
     513,   267,  2518,   489,   638,   639,   640,   641,   642,   643,
     644,   645,   648,   649,  3021,   323,   647,   649,   648,   649,
     357,   458,   107,  2482,   634,    69,   648,   649,    72,   232,
     647,   121,    76,   647,    78,  2551,  2552,   648,   649,   647,
     529,   126,   647,   115,   116,   117,   118,   119,   620,   648,
     649,   647,  4001,  1051,  1052,  1053,  2488,  4006,   647,  4008,
     647,  2520,   479,   444,   636,  1063,  3073,  3150,   121,   363,
     336,   124,   647,   363,   648,   649,   562,   583,   386,   647,
     124,  3150,   499,   420,   647,   422,   647,   189,   648,   649,
     356,   357,   473,   530,   647,   185,  1094,   648,   649,  1097,
     648,   649,   648,   649,   647,  4392,  2246,   139,  2248,   647,
     596,   196,   648,   649,   647,   121,   648,   649,   124,  2551,
    1118,  1119,   647,   213,  1122,    36,  3450,   229,   545,   618,
     547,   647,   185,  3292,   551,   647,   336,   648,   649,   529,
     225,   225,  1140,  1141,   647,   217,   218,   219,   220,   507,
     508,   354,   510,   255,   512,   648,   649,   360,   648,   649,
     213,   648,   649,   647,   430,    13,  2682,    15,  3773,   648,
     649,   159,   530,  2313,  2314,  2315,   593,   121,  2694,   185,
     124,   647,   214,    31,   601,   648,   649,    35,   648,   649,
     498,   647,   282,   278,   647,   183,  2712,  2713,   648,   649,
    2716,    49,    50,   114,   648,   649,   647,   213,   502,   197,
     121,   255,   647,   140,    62,    63,  2732,   598,   484,   485,
     208,   403,   648,   649,   427,   648,   649,   647,   618,   282,
    2746,   497,    80,   541,   648,   649,   647,  3320,   647,  3681,
     647,   185,   647,   425,   647,  3687,  4031,  4032,   647,  2853,
      98,  4031,  4032,   647,   326,   647,   328,   329,   330,   648,
     649,   647,  2694,   648,   649,   337,   647,   178,   647,   213,
     258,   259,   120,   363,   185,   647,   282,   459,   648,   649,
     647,   129,   130,   131,   484,   485,   647,  2746,   390,   583,
     496,   648,   649,   583,   142,   143,   647,  3911,   286,   149,
     150,   140,   213,  3911,   406,   377,   647,   155,   380,   647,
     363,   647,   356,   357,   647,  2831,   243,   647,   362,  2835,
    2836,   169,    49,   408,  2840,   369,   529,    29,  3652,  3653,
      29,  3655,  3656,   648,   649,    63,   518,  2853,   282,   187,
    2856,    69,    63,   415,  3599,  3600,   279,    75,    69,    30,
      99,  1126,  1127,   279,    75,    49,   204,   363,  2874,   467,
      88,   209,   406,   649,   212,   353,  2882,    88,  3660,  3661,
    2886,   282,   638,   639,   640,   641,   642,   643,   644,   645,
      81,   592,    83,  3477,  3478,   588,  3134,  3135,   236,   642,
     238,  3377,  3378,   481,   479,  2854,  3490,   655,   470,   471,
    3609,  3610,  2918,  3497,  2863,  2921,   655,   165,   256,   336,
    2926,   647,   268,   190,   523,   618,  2932,   405,   544,   363,
    2936,   165,  2938,   124,   523,   273,    99,   279,  3522,   277,
     156,  3525,    87,   477,  2950,   649,   347,   649,   638,   639,
     640,   641,   642,   643,   644,   645,   147,  2963,   370,   540,
     648,   362,   363,  2932,  2970,   155,  3615,   124,   110,   654,
     545,   189,   547,     6,   647,  2981,   109,   195,   189,     4,
     649,   472,   393,   617,   195,   507,   508,   509,   510,   511,
     512,   243,   649,   184,   233,   529,   390,    56,   436,  2921,
     170,   110,   222,   583,   649,   649,  2955,   336,   530,   655,
    4114,   229,    72,   252,    12,   622,  4114,   648,   229,   648,
     139,  3863,     9,   649,   263,   655,   601,   648,   648,  3961,
     648,   655,   647,  3875,   267,   373,   655,   255,   649,   157,
     583,  1529,   654,  3137,   255,   529,   530,   649,  2970,   533,
     534,   279,   390,   537,   279,   539,   279,  3630,   620,   593,
     279,  3067,   649,    49,   279,   403,   279,   484,   485,  3075,
     233,   407,   634,   635,   636,   461,   414,   375,   544,  3085,
     369,   369,  3088,  3089,  3090,  3091,   649,   583,   274,   252,
     649,   391,   107,   649,  4189,   566,   649,  3103,   436,   566,
     263,   439,    12,   441,   390,   369,   444,   346,   369,   447,
     649,  1599,    72,   649,   140,  1603,  3122,  3123,   243,   457,
    3126,   459,   642,  3129,  3130,  3131,  3075,   542,   140,   467,
     369,  3137,   246,   180,   190,   473,   649,  3143,   494,  1627,
     394,   135,   173,   481,  3150,  3151,   649,   369,   486,   583,
    4020,   166,   649,   554,   648,   484,   485,   599,   559,   629,
     604,   562,   196,  3169,   369,   369,    34,   369,   649,   193,
     193,   648,   390,   648,  3180,   648,   648,   578,   642,   648,
     518,   196,   583,   346,  3190,   586,  3192,  4282,   406,   648,
     648,    59,   648,   641,   649,   406,  3202,   647,   649,    67,
     649,  3777,  3208,   648,  3210,   648,  3212,   648,   648,   648,
     592,   648,   648,   648,   229,   647,   482,   243,   647,   458,
     645,   638,   639,   640,   641,   642,   643,   644,   645,  3323,
     648,   544,   115,   116,   117,   118,   119,   428,   647,   640,
     641,   579,   649,   647,   623,   647,   231,    11,    20,   536,
     647,   649,   655,   591,   647,   647,   265,   595,   649,  4363,
     598,   649,   193,   278,   132,  4363,   604,  4074,  4200,  4201,
     655,  4203,  3857,   648,  4378,   655,   416,   655,  3284,  4383,
    4378,   499,  4089,   481,  4388,  4383,   193,   649,   499,   157,
    4388,   530,   649,   161,   632,   458,  4103,   190,   344,    47,
     472,  3307,  3308,  3309,   513,   513,   513,   513,   393,   647,
     336,   640,   641,   642,   643,   644,   645,  3323,  4250,   513,
    4252,  4253,  3416,    75,   336,   390,   810,    99,  3277,    78,
     198,   566,   390,   390,   217,   218,   219,   220,   135,   253,
     253,   390,   545,    92,   545,  3994,   135,   390,   216,  3298,
      47,   390,     6,  3929,  3992,   392,   439,    11,   390,    13,
     390,    15,   230,   390,   647,   647,   278,   530,   605,   648,
     655,   153,    26,    27,   648,   593,   567,   568,   569,   570,
     571,   572,   593,   155,   133,  3391,   239,   159,   403,   239,
    3396,   648,   655,   408,   649,  4327,   649,   648,  4343,   527,
     566,  3407,   648,    57,   648,  3499,   648,   648,    62,    63,
    3416,   279,  4219,   554,   274,    47,    70,   648,   190,   159,
     630,   647,  4229,   647,    78,   553,   647,   566,   204,   159,
     160,   193,    86,   647,   206,   240,   193,   554,   554,   211,
     249,    95,   421,   326,  3450,   328,   329,   330,   363,   649,
    3461,   252,   252,  3459,   337,   381,   110,   478,   484,   485,
     327,   233,  3468,   110,   479,   110,   173,   197,   240,   255,
     124,  4278,   484,   485,   128,   255,   655,   566,   208,  3573,
     252,   206,   136,   137,   374,   647,   647,   554,    20,   143,
    4297,   263,  4299,  3499,   647,   454,   268,   151,   390,  4306,
     655,   155,   241,   157,   642,   277,   241,   655,   257,  4316,
     647,   647,   647,   647,   168,   566,  4386,   648,   248,   648,
    3526,   648,   648,   655,   566,   649,   649,  3533,   648,   259,
     545,   566,   415,   648,   188,   648,   551,  3459,  3632,   407,
    4347,  4348,   670,  4116,  3550,  4352,   648,   675,   416,   655,
     647,   369,  3501,   225,   648,   269,   286,  3563,   649,   390,
     648,   576,   649,   431,   375,   655,   193,  3573,   193,   193,
     598,   648,   243,   227,   346,   229,  4360,   648,   706,   421,
     649,   449,   252,   237,   252,   334,   601,   470,   471,   255,
    3539,   369,   647,   255,   722,   649,   625,   369,  4236,   649,
     254,   649,   617,   647,   369,   404,   378,   356,   357,   369,
     359,    78,   638,   639,   640,   641,   642,   643,   644,   645,
     350,    20,   369,   277,   492,   647,  3632,   639,   640,   641,
     642,   643,   644,   645,   648,   648,   408,  3643,   766,   767,
     768,   769,   649,   369,   496,   473,  3652,  3653,   648,  3655,
    3656,   779,   647,   363,   647,   523,   647,   378,   648,   313,
      47,   475,   625,   265,   648,   648,   456,   277,  4244,    11,
     419,   421,   642,   146,   261,   648,   544,   331,   649,   547,
     548,   335,   648,   193,   206,   483,   458,   252,   252,  3783,
     558,   649,   647,   124,   124,   647,   547,   402,  4336,   647,
      82,   655,   142,   491,   648,   496,   648,   468,   649,   481,
     648,   648,    20,   268,   648,   648,   648,    34,   648,   373,
      34,  3727,  3728,   648,   378,   648,   648,  4365,   648,   333,
     257,   385,   416,  3739,   602,   174,   390,   620,   649,   393,
    4389,   277,   648,   204,   240,   647,   649,   648,    47,   211,
     655,   649,   635,   636,   333,   124,   605,   605,   530,   647,
     647,   647,   647,   647,   513,   310,  3772,   648,   647,  3775,
     424,   615,   615,   647,   598,   255,   255,  3783,   362,    34,
     363,   363,   648,   647,   438,   439,   440,   441,   649,   333,
     648,   172,   625,   547,   375,   255,   609,   605,   605,   554,
     647,   554,   240,   554,   358,   517,  3728,  3813,   369,   463,
     649,   454,   363,   625,   610,   649,   648,   554,   648,   598,
     592,   554,  3828,   554,   535,   647,   647,  3833,   647,   154,
     622,    31,   648,   605,   190,   388,   656,   375,   648,   556,
     135,   135,   648,   647,   157,   408,    74,   190,   622,   429,
    3772,   623,   193,   625,    31,   648,    63,   375,    63,   536,
      14,   270,   649,   648,   647,   993,   520,   521,   522,     5,
     369,   369,   240,   153,   375,   529,   648,   649,   653,   133,
     652,   653,   375,   142,   647,    47,    47,   152,    47,    47,
      47,   545,   598,   129,   622,   549,   153,   224,   284,   123,
     656,   647,   647,   148,   647,  3911,    47,    47,    47,   653,
      53,   557,   142,   462,   464,   653,   363,   649,   153,  1047,
    1048,   648,   557,   209,   653,   579,    36,  3876,  1056,  1057,
    1058,  1059,  1060,  1061,  1062,   222,   649,  3943,   592,  3945,
    4034,   649,  1070,  1071,   648,  1073,  1074,   648,    53,   649,
    1078,  1079,   153,   190,  1082,  1083,  1084,  1085,   190,  1087,
    1088,   190,    47,   557,   624,  3971,   443,  1095,  1096,   124,
    1098,  1099,  1100,  1101,  1102,   225,   610,  1105,  1106,  1107,
    1108,  1109,  1110,  1111,  1112,  1113,  1114,  1115,   363,  1117,
     647,   481,  1120,  1121,   192,  2234,   649,  1125,  3285,   653,
    2424,  1129,  1130,  1131,   114,  3548,  3995,   651,  3868,  4179,
    3546,   121,  4180,   970,  1142,  1143,  1144,  3550,  3726,  4025,
    4365,  4324,  4332,  1151,  3717,    20,  3717,  3717,  4034,  3717,
    1158,  1159,  1160,  3717,  1162,  4216,  3717,  4067,  3717,  3717,
    4134,  1169,  1170,  1171,  4216,  1173,  1174,  1175,  1176,  1177,
    3717,  1179,  1180,  1181,  1182,  1183,  1184,  1185,  1186,  3717,
    4173,  3717,  1190,  1191,  3717,  3717,  4093,  4092,   178,  1464,
    1010,  2012,  3735,  2880,  2707,   185,  3390,  2712,  1468,  4028,
    3103,  4025,  4118,  3393,  3773,  4244,  4282,  4197,  3301,  1499,
    1289,  3929,   518,  2005,  2552,  2956,  3212,  2509,  2013,  3190,
    3268,  4195,  3235,   213,    99,  3235,  3679,  3460,  4114,  3509,
    3499,  4116,  2636,  2395,  3061,  3058,  3053,  3950,   523,   522,
      10,    10,  3953,  3879,  1513,  3887,  3891,  3954,  4134,  3739,
    3687,  2070,  2502,    13,  2012,    15,  3465,  2301,  1419,  3191,
    1495,  1783,  1475,  2694,  3098,  2268,  2316,   599,  2190,  1801,
     870,  3075,  2669,  2104,  1089,    35,  3159,  2387,  2189,  3948,
     155,  4211,  3798,  3284,   159,  4212,  1063,  2215,  4313,    49,
      50,  3644,   282,  3202,  1434,  3632,  4125,  4126,  2321,  2075,
    1200,  2263,    62,    63,  3396,   956,   956,  2305,  3117,  4195,
    3116,  1275,  1304,   188,  4114,   190,  3169,  1325,   956,   588,
      80,  1522,   666,  1873,  1369,  4211,  4212,   580,  1874,  1719,
    1338,   206,  3210,  1398,   956,  4221,   211,  3101,    98,  1311,
    4280,    34,  4228,  4141,  4207,  4383,  4309,  4388,  1356,  3122,
     225,  3502,  1325,  3150,   579,  2354,  1655,   347,   233,   579,
     120,  2347,  1830,  2340,  1796,   240,    59,  2346,   358,   129,
     130,   131,   362,   363,    67,  1754,   855,   252,  1741,  1312,
    3903,  1504,   142,   143,  3085,  3909,   573,   857,   263,  3535,
     514,   514,  3858,   268,   651,   651,    -1,   651,    -1,    -1,
    4374,    -1,   277,    -1,    -1,    -1,    -1,    -1,    -1,   169,
    4296,    -1,    -1,    -1,    -1,  4301,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   187,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   132,
      -1,    -1,    -1,    -1,   204,    -1,    -1,    -1,    -1,   209,
    4336,    -1,   212,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   157,    -1,    -1,    -1,   161,    -1,
      -1,   346,    -1,    -1,    -1,    -1,   236,  4363,   238,  4365,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4374,    -1,
      -1,    -1,  4378,    -1,   369,    -1,   256,  4383,    -1,    -1,
      26,    27,  4388,   378,    -1,   198,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   273,    -1,    -1,    -1,   277,    -1,    -1,
      -1,    26,    27,   216,    -1,    -1,    -1,  1535,    -1,    -1,
      -1,    -1,    -1,   408,    60,    61,    62,   230,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    72,    -1,    -1,    -1,
      -1,    -1,    78,    -1,    -1,    60,    61,    62,    -1,    -1,
      86,    -1,    -1,    -1,   554,    -1,    -1,    72,    -1,   559,
      -1,    -1,   562,    78,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    86,    -1,   458,   110,    -1,   279,    -1,   578,    -1,
      -1,    -1,    -1,   583,    -1,    -1,   586,    -1,   124,    -1,
      -1,    -1,   128,    -1,    -1,   110,   481,    -1,    -1,    -1,
      -1,    -1,    -1,   373,    -1,    -1,    -1,    -1,    -1,   124,
      -1,    -1,    -1,   128,    -1,  1633,  1634,  1635,    -1,    -1,
     390,   157,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1648,    -1,    -1,   403,    -1,    -1,    -1,    -1,    -1,    -1,
     640,   641,   157,    -1,   414,   530,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1674,    -1,    -1,    -1,
      -1,    -1,  1680,    -1,    -1,  1683,   436,  1685,    -1,   439,
      -1,   441,    -1,  1691,   444,  1693,  1694,   447,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   457,    -1,   459,
      -1,    -1,    -1,   229,    -1,    -1,    -1,   467,    -1,    -1,
      -1,   237,    -1,   473,   407,    -1,    -1,   592,    -1,    -1,
      -1,   481,    -1,   416,   229,    -1,   486,    -1,   254,   604,
     605,    -1,   237,    -1,    -1,    -1,    -1,    -1,   431,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   623,   254,
     625,    -1,    -1,    -1,   553,    -1,   449,    -1,   518,  1767,
      12,    13,   267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1778,    -1,    -1,   648,   649,    -1,    -1,   652,   653,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   313,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   492,
    1808,    -1,    -1,    -1,    -1,   331,    -1,    -1,   313,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   579,
    1828,    -1,    -1,    -1,    -1,    -1,   331,  1835,    -1,    -1,
     523,   591,    -1,    -1,    -1,   595,    -1,    -1,   598,    -1,
      -1,    -1,    -1,    -1,   604,    -1,    98,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   548,    -1,    -1,    -1,   385,
      -1,    -1,    -1,    -1,    -1,   558,    -1,   393,    -1,    -1,
      -1,    -1,   632,    -1,    -1,    -1,   675,   129,    -1,    -1,
     385,    -1,    -1,    -1,    -1,    -1,    -1,   647,   393,    -1,
      -1,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   706,    -1,   602,
      -1,    -1,    -1,    -1,   166,    -1,    -1,   169,    -1,    -1,
      -1,    -1,    -1,   722,    -1,    -1,    -1,    -1,    -1,    -1,
     182,    -1,    -1,    -1,    -1,    -1,    -1,   463,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   204,    -1,    -1,    -1,    -1,    -1,   463,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     769,    -1,    -1,    -1,    -1,    -1,    -1,   229,    -1,    -1,
      -1,    -1,    -1,    -1,   236,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   520,   521,   522,    -1,    -1,    -1,
      -1,    -1,    -1,   529,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   520,   521,   522,    -1,   545,
      -1,    -1,    -1,   549,   529,   277,    -1,    -1,  2036,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     545,    -1,    -1,    -1,   549,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   592,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2084,    -1,    -1,    -1,
    2088,    -1,    -1,    -1,    -1,  2093,  2094,   592,    -1,    -1,
      -1,    -1,    -1,    -1,  2102,    -1,    -1,  2105,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2115,  2116,    -1,
    2118,  2119,    -1,  2121,  2122,  2123,  2124,  2125,    -1,    -1,
    2128,    -1,    -1,   649,    -1,    -1,    -1,    -1,    -1,  2137,
      -1,    -1,    -1,    -1,    -1,    -1,  2144,    -1,  2146,    -1,
    2148,  2149,   647,  2151,  2152,    -1,    -1,    -1,  2156,  2157,
    2158,    -1,    -1,    -1,  2162,  2163,  2164,   409,  2166,    -1,
    2168,   413,  2170,    -1,  2172,    -1,  2174,    -1,    -1,    -1,
      -1,  2179,    -1,    -1,    -1,    -1,    -1,   429,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   437,    -1,    -1,    -1,    -1,
    2198,    -1,    -1,   445,   993,    -1,    -1,  2205,    -1,    -1,
    2208,    -1,    -1,    -1,    -1,    -1,  2214,    -1,    -1,  2217,
      -1,    -1,    -1,  2221,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   473,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   486,   487,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1047,  1048,
      -1,    -1,    13,    -1,    -1,    -1,    -1,  1056,  1057,    -1,
      -1,  1060,  1061,  1062,    -1,    -1,    -1,    -1,  2276,    12,
      13,  1070,  1071,    -1,  1073,  1074,    -1,    -1,    -1,  1078,
      -1,    -1,    -1,  1082,  1083,  1084,  1085,   539,  1087,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1095,  1096,    -1,  1098,
    1099,    -1,    -1,    -1,    -1,    -1,  1105,  1106,  1107,    -1,
      -1,  1110,  1111,  1112,  1113,  1114,  1115,    -1,  1117,    -1,
      -1,  1120,  1121,  2331,   576,    -1,  1125,    -1,    -1,    -1,
    1129,  1130,  1131,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      -1,    -1,    -1,  1142,  1143,  1144,   598,    -1,   600,    -1,
      -1,    -1,  1151,    -1,    -1,    98,    -1,    -1,    -1,  1158,
    1159,  1160,    -1,    -1,    -1,    -1,    33,    34,   129,    -1,
      -1,    -1,    39,    -1,    41,    -1,    43,    44,    -1,    -1,
      -1,    -1,   143,    -1,    -1,    -1,   129,    -1,    -1,    -1,
      -1,    -1,  1191,    -1,    61,    -1,    -1,    -1,    -1,  2407,
     143,    -1,    -1,    -1,    -1,   166,    26,    27,   169,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2425,  2426,    -1,
      -1,   182,    -1,   166,    -1,    -1,   169,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   182,
      60,    61,    62,   204,   111,    -1,    -1,   114,    -1,    -1,
      -1,    -1,    72,    -1,    -1,   122,    -1,    -1,    78,    -1,
      -1,   204,    -1,    -1,    -1,    -1,    86,    -1,   229,    -1,
      -1,    -1,    -1,    -1,   141,   236,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   229,    -1,    -1,    -1,
     110,   158,    -1,   236,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   124,    -1,    -1,    -1,   128,    -1,
      -1,    -1,    -1,    -1,  2522,  2523,   277,   184,    -1,   186,
      -1,    -1,    -1,    -1,    -1,    -1,  1325,    -1,    -1,    -1,
      -1,    -1,   199,   200,   277,    -1,    -1,   157,    -1,  1338,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1356,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2573,    -1,    -1,    -1,  2577,
      -1,    -1,    -1,    -1,   241,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2597,
    2598,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   271,    -1,    -1,    -1,    -1,   229,
    2618,    -1,    -1,   280,   281,    -1,   283,   237,    -1,  2627,
      -1,  2629,    -1,  2631,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   254,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   409,    -1,
    2658,    -1,   319,   320,   321,  2663,    -1,    -1,    -1,    -1,
      -1,    26,    27,    -1,    -1,    -1,   409,    -1,   429,    -1,
     413,   338,   339,   340,    -1,    -1,   437,    -1,   345,    -1,
      -1,   348,  2690,    -1,   445,    -1,   429,    -1,    -1,    -1,
      -1,    -1,    -1,   313,   437,    -1,    -1,    62,   365,   366,
      -1,    -1,   445,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   331,   473,    78,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    86,    -1,    -1,    -1,   486,   487,    -1,     6,    -1,
     473,   398,   399,    11,    -1,    13,  1535,    -1,    -1,    -1,
      -1,    -1,    -1,   486,   487,   110,    -1,    -1,    26,    27,
      -1,    -1,    -1,  2761,    -1,    -1,   423,    -1,    -1,   124,
      -1,    -1,    -1,   128,    -1,   385,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,  2782,    -1,    -1,    -1,   539,    57,
      -1,    -1,    -1,    -1,    62,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   157,    -1,    -1,    -1,   539,    -1,  2806,    -1,
      78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    -1,
     477,    -1,    -1,    -1,   481,   576,    -1,    95,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   493,    -1,    -1,    -1,
      -1,    -1,   110,   576,  1633,  1634,  1635,   598,    -1,   600,
      -1,    -1,    -1,   463,    -1,    -1,   124,    -1,    -1,    -1,
     128,    -1,    -1,    -1,    -1,   598,    -1,   600,   136,    -1,
      -1,    -1,    -1,    -1,   229,   143,    -1,    -1,    -1,    -1,
      -1,    -1,   237,   151,    -1,  1674,    -1,    -1,    -1,   157,
      -1,    -1,    -1,    -1,  1683,    -1,  1685,    -1,   555,   254,
      -1,    -1,   559,    -1,    -1,   562,   563,   564,   565,    -1,
     520,   521,   522,    -1,    -1,    -1,    -1,    -1,    -1,   529,
     188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2929,  2930,    -1,    -1,   545,    -1,    -1,    -1,   549,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2951,   611,   612,    -1,    -1,   313,    -1,
      -1,   229,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   237,
      -1,    -1,    -1,    -1,    -1,    -1,   331,    -1,  1767,   636,
      -1,    -1,   592,    -1,    -1,    -1,   254,    -1,    -1,  1778,
      -1,  2989,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,
      -1,    -1,    -1,    -1,    -1,    -1,  3014,    -1,    -1,  1808,
    3018,  3019,    -1,  3021,    -1,    -1,    -1,    -1,    -1,    -1,
     385,    -1,  3030,    -1,    -1,    -1,    -1,  3035,   393,  1828,
    3038,    -1,  3040,  3041,    -1,   313,  1835,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   331,    -1,    -1,    -1,   335,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3073,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3092,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   463,    -1,
     378,    -1,    -1,    -1,    -1,    -1,    -1,   385,  3116,    -1,
      -1,    -1,    -1,    -1,    -1,   393,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   520,   521,   522,    -1,    -1,
      -1,   439,    -1,  3171,   529,    -1,    -1,    -1,    -1,    -1,
      -1,  3179,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     545,    -1,    -1,    -1,   549,   463,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    35,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   592,    -1,    -1,
      -1,    -1,    -1,    -1,    60,    61,    -1,  2036,    -1,    -1,
      -1,    67,   520,   521,   522,    -1,    -1,    73,    -1,    -1,
      -1,   529,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   545,    -1,    -1,
      96,   549,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   108,    -1,    -1,  2084,    -1,    -1,    -1,  2088,
      -1,    -1,    -1,    -1,  2093,  2094,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2102,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   592,    -1,  2115,  2116,    -1,  2118,
      -1,    -1,  2121,  2122,  2123,  2124,  2125,    -1,    -1,    -1,
     156,   157,    -1,    -1,    -1,    -1,   162,    -1,  2137,   165,
      -1,    -1,    -1,    -1,    -1,  2144,    -1,  2146,    -1,  2148,
    2149,    -1,  2151,    -1,    -1,    -1,    -1,  2156,  2157,  2158,
      -1,    -1,    -1,  2162,  2163,  2164,    -1,  2166,   194,  2168,
     196,  2170,    -1,  2172,    -1,  2174,    -1,   203,    -1,   205,
    2179,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3397,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2198,
      -1,    -1,   228,   229,   230,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2214,    -1,    -1,  2217,    -1,
      -1,    -1,    -1,    -1,    -1,  3433,  3434,   253,    -1,    -1,
      -1,    -1,    -1,    -1,  3442,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   274,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   307,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   397,    -1,  3581,    -1,    -1,    -1,  3585,    -1,    -1,
      -1,   407,   408,    -1,    -1,   411,   412,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3612,    -1,   432,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3627,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   478,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   491,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   523,    -1,    -1,
      -1,    -1,    -1,   529,    -1,    -1,    -1,    -1,    -1,  3717,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   547,   548,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   558,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3773,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3781,  2573,    -1,   602,    -1,  2577,  3787,
      -1,  3789,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
      -1,    -1,    -1,   619,    -1,    -1,    -1,    -1,  2597,  2598,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3825,    -1,  2618,
      -1,    -1,    -1,  3831,  3832,    -1,    -1,    -1,  2627,    -1,
    2629,    -1,  2631,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3895,    -1,    -1,
      -1,  2690,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3934,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3964,    -1,  3966,    -1,
      -1,    -1,  2761,    -1,    -1,    -1,    -1,    -1,  3976,    -1,
    3978,  3979,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2782,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4005,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2806,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4072,    -1,  4074,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4089,  4090,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4103,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4115,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2929,  2930,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4159,  4160,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4172,  4173,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4189,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2989,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4219,    -1,    -1,    -1,  3014,    -1,    -1,  4226,  3018,
    3019,  4229,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3030,    -1,    -1,    -1,    -1,  3035,    -1,    -1,  3038,
      -1,  3040,  3041,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4259,    -1,    -1,    -1,    -1,    -1,    -1,  4266,    -1,
    4268,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4278,    -1,    -1,    -1,  4282,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4295,    -1,  4297,
      -1,  4299,    -1,  3092,    -1,    -1,    -1,    -1,  4306,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4316,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3116,    -1,    -1,
      -1,    -1,  4330,  4331,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4347,
    4348,    -1,    -1,    -1,  4352,    -1,    -1,    -1,    -1,    -1,
    4358,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3171,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3179,    -1,    -1,  4391,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3397,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3433,  3434,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3442,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3581,    -1,    -1,    -1,  3585,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3612,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3627,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3781,    -1,    -1,    -1,    -1,    -1,  3787,    -1,
    3789,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3825,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3895,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3934,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3964,    -1,  3966,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3976,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4072,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4090,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4115,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    34,    35,    36,    37,    38,    39,    40,
    4159,    42,    43,    44,    45,    46,    -1,    48,    49,    -1,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    60,
      61,    62,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    -1,    73,    74,    -1,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    -1,    89,    90,
      91,    92,    93,    -1,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,    -1,   105,   106,   107,  4226,   109,   110,
     111,   112,   113,   114,    -1,    -1,    -1,    -1,   119,   120,
     121,    -1,    -1,   124,   125,   126,    -1,   128,    -1,    -1,
      -1,   132,    -1,   134,   135,   136,   137,   138,    -1,    -1,
    4259,   142,    -1,    -1,   145,   146,   147,    -1,    -1,    -1,
     151,    -1,   153,   154,    -1,   156,   157,   158,    -1,    -1,
     161,   162,    -1,   164,   165,   166,   167,   168,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,
     191,   192,    -1,   194,    -1,   196,    -1,   198,   199,   200,
     201,    -1,   203,    -1,   205,    -1,   207,    -1,   209,   210,
      -1,   212,   213,    -1,   215,   216,    -1,    -1,    -1,   220,
     221,   222,   223,   224,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,   236,   237,   238,   239,  4358,
      -1,   242,    -1,    -1,    -1,   246,   247,    -1,   249,   250,
      -1,    -1,    -1,   254,    -1,    -1,   257,   258,    -1,   260,
     261,    -1,   263,   264,   265,    -1,    -1,    -1,    -1,    -1,
     271,   272,  4391,   274,    -1,   276,    -1,   278,   279,    -1,
      -1,   282,    -1,    -1,    -1,    -1,   287,    -1,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,    -1,    -1,    -1,
      -1,   322,   323,   324,   325,   326,   327,    -1,    -1,   330,
     331,   332,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,    -1,   347,   348,   349,    -1,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
      -1,   362,   363,   364,    -1,   366,   367,   368,    -1,   370,
     371,   372,    -1,   374,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,   404,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,    -1,    -1,   420,
      -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,    -1,   440,
     441,   442,   443,   444,   445,    -1,   447,    -1,   449,   450,
      -1,   452,   453,   454,    -1,   456,    -1,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,    -1,
     471,   472,    -1,    -1,    -1,   476,   477,   478,   479,    -1,
      -1,    -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,
     511,    -1,    -1,   514,    -1,    -1,   517,   518,   519,   520,
     521,   522,   523,    -1,    -1,   526,   527,   528,   529,    -1,
     531,   532,   533,   534,   535,   536,   537,   538,   539,   540,
     541,   542,   543,   544,   545,    -1,    -1,   548,   549,   550,
     551,   552,    -1,   554,   555,   556,    -1,   558,   559,   560,
     561,   562,    -1,    -1,    -1,    -1,   567,   568,   569,   570,
     571,   572,   573,   574,   575,    -1,   577,   578,   579,   580,
     581,   582,   583,   584,   585,   586,   587,   588,    -1,   590,
     591,    -1,    -1,   594,    -1,    -1,   597,    -1,   599,    -1,
     601,   602,   603,    -1,    -1,   606,   607,   608,   609,   610,
      -1,    -1,   613,   614,    -1,   616,   617,   618,   619,   620,
     621,    -1,    -1,    -1,    -1,    -1,    -1,   628,   629,    -1,
     631,   632,   633,    -1,    -1,   636,    -1,    -1,    -1,   640,
     641,    -1,    -1,    -1,    -1,   646,   647,    -1,    -1,   650,
     651,    -1,    -1,   654,   655,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    14,    -1,    -1,    -1,    18,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    34,    35,    36,    37,    38,    39,
      40,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      60,    61,    62,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    -1,    73,    74,    -1,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    -1,    89,
      90,    91,    92,    93,    -1,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,    -1,   105,   106,   107,    -1,   109,
     110,   111,   112,   113,   114,    -1,    -1,    -1,    -1,   119,
     120,   121,    -1,    -1,   124,   125,   126,    -1,   128,    -1,
      -1,    -1,   132,    -1,   134,   135,   136,   137,   138,    -1,
      -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,    -1,
      -1,   151,    -1,   153,   154,    -1,   156,   157,   158,    -1,
      -1,   161,   162,    -1,   164,   165,   166,   167,   168,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,
      -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,   199,
     200,   201,    -1,   203,    -1,   205,    -1,   207,    -1,   209,
     210,    -1,   212,   213,    -1,   215,   216,    -1,    -1,    -1,
     220,   221,   222,   223,   224,    -1,   226,   227,   228,    -1,
     230,    -1,   232,    -1,    -1,    -1,   236,   237,   238,   239,
      -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,   249,
     250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,    -1,
      -1,   261,    -1,   263,   264,   265,    -1,    -1,    -1,    -1,
      -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,   279,
      -1,    -1,   282,    -1,    -1,    -1,    -1,   287,    -1,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,    -1,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,    -1,    -1,
      -1,    -1,   322,   323,   324,   325,   326,   327,    -1,    -1,
     330,   331,   332,   333,    -1,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,    -1,   347,   348,   349,
      -1,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,    -1,   362,   363,   364,    -1,   366,   367,   368,   369,
     370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   384,   385,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,   405,    -1,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,   417,    -1,    -1,
     420,    -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,    -1,   437,   438,    -1,
     440,   441,   442,   443,   444,   445,    -1,   447,    -1,   449,
     450,    -1,   452,   453,   454,    -1,   456,    -1,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
      -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,   479,
      -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,   489,
     490,   491,   492,    -1,   494,   495,   496,   497,   498,    -1,
      -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,
      -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,   519,
     520,   521,   522,   523,    -1,    -1,   526,   527,   528,   529,
      -1,   531,   532,   533,   534,   535,   536,   537,   538,   539,
     540,   541,   542,   543,   544,   545,    -1,    -1,   548,   549,
     550,   551,   552,    -1,   554,   555,   556,    -1,   558,   559,
     560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,   569,
     570,   571,   572,    -1,   574,   575,    -1,   577,   578,   579,
     580,   581,   582,   583,   584,   585,   586,   587,   588,    -1,
     590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,   599,
      -1,   601,   602,   603,    -1,    -1,   606,   607,   608,   609,
     610,    -1,    -1,   613,   614,    -1,   616,   617,   618,   619,
     620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,   629,
      -1,   631,   632,   633,    -1,    -1,   636,    -1,    -1,    -1,
     640,   641,    -1,    -1,    -1,    -1,   646,   647,    -1,    -1,
     650,   651,    -1,    -1,   654,   655,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    34,    35,    36,    37,    38,
      39,    40,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    60,    61,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,    -1,   105,   106,   107,    -1,
     109,   110,   111,   112,   113,   114,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,   124,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,   170,    -1,   172,   173,   174,   175,   176,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,   192,   193,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,   207,    -1,
     209,   210,    -1,   212,   213,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,   224,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,   236,   237,   238,
     239,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,   263,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,   282,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,   332,   333,    -1,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,   347,   348,
     349,    -1,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,    -1,   362,   363,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,   443,   444,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,   526,   527,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,   537,   538,
     539,   540,   541,   542,   543,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,   554,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,   577,   578,
     579,   580,   581,   582,   583,   584,   585,   586,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,   606,   607,   608,
     609,   610,    -1,    -1,   613,   614,    -1,   616,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,    -1,   636,    -1,    -1,
      -1,   640,   641,    -1,    -1,    -1,    -1,   646,   647,    -1,
      -1,   650,   651,    -1,    -1,   654,   655,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    34,    35,    36,    37,
      38,    39,    40,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    60,    61,    62,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    -1,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      -1,    89,    90,    91,    92,    93,    -1,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,    -1,   105,   106,   107,
      -1,   109,   110,   111,   112,   113,   114,    -1,    -1,    -1,
      -1,   119,   120,   121,    -1,    -1,   124,   125,   126,    -1,
     128,    -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,
     138,    -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,
      -1,    -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,
     158,    -1,    -1,   161,   162,    -1,   164,   165,   166,   167,
     168,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,    -1,   187,
      -1,    -1,    -1,   191,   192,   193,   194,    -1,   196,    -1,
     198,   199,   200,   201,    -1,   203,    -1,   205,    -1,   207,
      -1,   209,   210,    -1,   212,   213,    -1,   215,   216,    -1,
      -1,    -1,   220,   221,   222,   223,   224,    -1,   226,   227,
     228,    -1,   230,    -1,   232,    -1,    -1,    -1,   236,   237,
     238,   239,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,
      -1,   249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,
     258,    -1,    -1,   261,    -1,   263,   264,   265,    -1,    -1,
      -1,    -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,
     278,   279,    -1,    -1,   282,    -1,    -1,    -1,    -1,   287,
      -1,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,    -1,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
      -1,    -1,    -1,    -1,   322,   323,   324,   325,   326,   327,
      -1,    -1,   330,   331,   332,   333,    -1,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,    -1,   347,
     348,   349,    -1,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,    -1,   362,   363,   364,    -1,   366,   367,
     368,    -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   384,   385,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,   417,
      -1,    -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,    -1,   437,
     438,    -1,   440,   441,   442,   443,   444,   445,    -1,   447,
      -1,   449,   450,    -1,   452,   453,   454,    -1,   456,    -1,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,
     478,   479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,
      -1,   489,   490,   491,   492,    -1,   494,   495,   496,   497,
     498,    -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,
     508,   509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,
     518,   519,   520,   521,   522,   523,    -1,    -1,   526,   527,
     528,   529,    -1,   531,   532,   533,   534,   535,   536,   537,
     538,   539,   540,   541,   542,   543,   544,   545,    -1,    -1,
     548,   549,   550,   551,   552,    -1,   554,   555,   556,    -1,
     558,   559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,
     568,   569,   570,   571,   572,    -1,   574,   575,    -1,   577,
     578,   579,   580,   581,   582,   583,   584,   585,   586,   587,
     588,    -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,
      -1,   599,    -1,   601,   602,   603,    -1,    -1,   606,   607,
     608,   609,   610,    -1,    -1,   613,   614,    -1,   616,   617,
     618,   619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,
     628,   629,    -1,   631,   632,   633,    -1,    -1,   636,    -1,
      -1,    -1,   640,   641,    -1,    -1,    -1,    -1,   646,   647,
      -1,    -1,   650,   651,    -1,    -1,   654,   655,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    34,    35,    36,
      37,    38,    39,    40,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    60,    61,    62,    -1,    64,    65,    66,
      67,    68,    -1,    70,    71,    -1,    73,    74,    -1,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    -1,    89,    90,    91,    92,    93,    -1,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,    -1,   105,   106,
     107,    -1,   109,   110,   111,   112,   113,   114,    -1,    -1,
      -1,    -1,   119,   120,   121,    -1,    -1,   124,   125,   126,
      -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,   136,
     137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,   146,
     147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,   156,
     157,   158,    -1,    -1,   161,   162,    -1,   164,   165,   166,
     167,   168,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,    -1,
     187,    -1,    -1,    -1,   191,   192,   193,   194,    -1,   196,
      -1,   198,   199,   200,   201,    -1,   203,    -1,   205,    -1,
     207,    -1,   209,   210,    -1,   212,   213,    -1,   215,   216,
      -1,    -1,    -1,   220,   221,   222,   223,   224,    -1,   226,
     227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,   236,
     237,   238,   239,    -1,    -1,   242,    -1,    -1,    -1,   246,
     247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,    -1,
     257,   258,    -1,    -1,   261,    -1,   263,   264,   265,    -1,
      -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,   276,
      -1,   278,   279,    -1,    -1,   282,    -1,    -1,    -1,    -1,
     287,    -1,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,    -1,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,   326,
     327,    -1,    -1,   330,   331,   332,   333,    -1,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,    -1,
     347,   348,   349,    -1,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,    -1,   362,   363,   364,    -1,   366,
     367,   368,    -1,   370,   371,   372,    -1,   374,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,   404,   405,    -1,
     407,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
     417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
     437,   438,    -1,   440,   441,   442,   443,   444,   445,    -1,
     447,    -1,   449,   450,    -1,   452,   453,   454,    -1,   456,
      -1,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,   476,
     477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,    -1,
     487,    -1,   489,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,   506,
      -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,    -1,
     517,   518,   519,   520,   521,   522,   523,    -1,    -1,   526,
     527,   528,   529,    -1,   531,   532,   533,   534,   535,   536,
     537,   538,   539,   540,   541,   542,   543,   544,   545,    -1,
      -1,   548,   549,   550,   551,   552,    -1,   554,   555,   556,
      -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,    -1,
     567,   568,   569,   570,   571,   572,    -1,   574,   575,    -1,
     577,   578,   579,   580,   581,   582,   583,   584,   585,   586,
     587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,    -1,
     597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,   606,
     607,   608,   609,   610,    -1,    -1,   613,   614,    -1,   616,
     617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,    -1,
      -1,   628,   629,    -1,   631,   632,   633,    -1,    -1,   636,
      -1,    -1,    -1,   640,   641,    -1,    -1,    -1,    -1,   646,
     647,    -1,    -1,   650,   651,    -1,    -1,   654,   655,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    34,    35,
      36,    37,    38,    39,    40,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    60,    61,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    92,    93,    -1,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,    -1,   105,
     106,   107,    -1,   109,   110,   111,   112,   113,   114,    -1,
      -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,   207,    -1,   209,   210,    -1,   212,   213,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,   224,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
     236,   237,   238,   239,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,    -1,   261,    -1,   263,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,   282,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,   332,   333,    -1,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,   347,   348,   349,    -1,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,    -1,   362,   363,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,   443,   444,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
     526,   527,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,   537,   538,   539,   540,   541,   542,   543,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,   554,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,   577,   578,   579,   580,   581,   582,   583,   584,   585,
     586,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
     606,   607,   608,   609,   610,    -1,    -1,   613,   614,    -1,
     616,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,    -1,
     636,    -1,    -1,    -1,   640,   641,    -1,    -1,    -1,    -1,
     646,   647,    -1,    -1,   650,   651,    -1,    -1,   654,   655,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    34,
      35,    36,    37,    38,    39,    40,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    60,    61,    62,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    -1,    73,    74,
      -1,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    -1,    89,    90,    91,    92,    93,    -1,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,    -1,
     105,   106,   107,    -1,   109,   110,   111,   112,   113,   114,
      -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,
     125,   126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,
     135,   136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,
     145,   146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,
      -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,   164,
     165,   166,   167,   168,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,
      -1,   196,    -1,   198,   199,   200,   201,    -1,   203,    -1,
     205,    -1,   207,    -1,   209,   210,    -1,   212,   213,    -1,
     215,   216,    -1,    -1,    -1,   220,   221,   222,   223,   224,
      -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,
      -1,   236,   237,   238,   239,    -1,    -1,   242,    -1,    -1,
      -1,   246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,
      -1,    -1,   257,   258,    -1,    -1,   261,    -1,   263,   264,
     265,    -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,
      -1,   276,    -1,   278,   279,    -1,    -1,   282,    -1,    -1,
      -1,    -1,   287,    -1,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,    -1,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,
     325,   326,   327,    -1,    -1,   330,   331,   332,   333,    -1,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,    -1,   347,   348,   349,    -1,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,    -1,   362,   363,   364,
      -1,   366,   367,   368,    -1,   370,   371,   372,    -1,   374,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,
     385,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,
     425,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,   437,   438,    -1,   440,   441,   442,   443,   444,
     445,    -1,   447,    -1,   449,   450,    -1,   452,   453,   454,
      -1,   456,    -1,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,    -1,   471,   472,    -1,    -1,
      -1,   476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,
      -1,    -1,   487,    -1,   489,   490,   491,   492,    -1,   494,
     495,   496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,
     505,   506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,
      -1,    -1,   517,   518,   519,   520,   521,   522,   523,    -1,
      -1,   526,   527,   528,   529,    -1,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,    -1,    -1,   548,   549,   550,   551,   552,    -1,   554,
     555,   556,    -1,   558,   559,   560,   561,   562,    -1,    -1,
      -1,    -1,   567,   568,   569,   570,   571,   572,    -1,   574,
     575,    -1,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,    -1,   590,   591,    -1,    -1,   594,
      -1,    -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,
      -1,   606,   607,   608,   609,   610,    -1,    -1,   613,   614,
      -1,   616,   617,   618,   619,   620,   621,    -1,    -1,    -1,
      -1,    -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,
      -1,   636,    -1,    -1,    -1,   640,   641,    -1,    -1,    -1,
      -1,   646,   647,    -1,    -1,   650,   651,    -1,    -1,   654,
     655,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      14,    -1,    -1,    -1,    18,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      34,    35,    36,    37,    38,    39,    40,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    60,    61,    62,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    -1,    73,
      74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    -1,    89,    90,    91,    92,    93,
      -1,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
      -1,   105,   106,   107,    -1,   109,   110,   111,   112,   113,
     114,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,
     124,   125,   126,    -1,   128,    -1,    -1,    -1,   132,    -1,
     134,   135,   136,   137,   138,    -1,    -1,    -1,   142,    -1,
      -1,   145,   146,   147,    -1,    -1,    -1,   151,    -1,   153,
     154,    -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,
     164,   165,   166,   167,   168,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,
     194,    -1,   196,    -1,   198,   199,   200,   201,    -1,   203,
      -1,   205,    -1,   207,    -1,   209,   210,    -1,   212,   213,
      -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,   223,
     224,    -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,
      -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,    -1,
      -1,    -1,   246,   247,    -1,   249,   250,    -1,    -1,    -1,
     254,    -1,    -1,   257,   258,    -1,    -1,   261,    -1,   263,
     264,   265,    -1,    -1,    -1,    -1,    -1,   271,   272,    -1,
     274,    -1,   276,    -1,   278,   279,    -1,    -1,   282,    -1,
      -1,    -1,    -1,   287,    -1,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,    -1,    -1,    -1,    -1,   322,   323,
     324,   325,   326,   327,    -1,    -1,   330,   331,   332,   333,
      -1,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,    -1,   347,   348,   349,    -1,    -1,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,    -1,   362,   363,
     364,    -1,   366,   367,   368,    -1,   370,   371,   372,    -1,
     374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     384,   385,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,    -1,    -1,   420,    -1,    -1,    -1,
     424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,    -1,   437,   438,    -1,   440,   441,   442,   443,
     444,   445,    -1,   447,    -1,   449,   450,    -1,   452,   453,
     454,    -1,   456,    -1,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,    -1,   471,   472,    -1,
      -1,    -1,   476,   477,   478,   479,    -1,    -1,    -1,   483,
      -1,    -1,    -1,   487,    -1,   489,   490,   491,   492,    -1,
     494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,    -1,
     504,   505,   506,    -1,   508,   509,    -1,   511,    -1,    -1,
     514,    -1,    -1,   517,   518,   519,   520,   521,   522,   523,
      -1,    -1,   526,   527,   528,   529,    -1,   531,   532,   533,
     534,   535,   536,   537,   538,   539,   540,   541,   542,   543,
     544,   545,    -1,    -1,   548,   549,   550,   551,   552,    -1,
     554,   555,   556,    -1,   558,   559,   560,   561,   562,    -1,
      -1,    -1,    -1,   567,   568,   569,   570,   571,   572,    -1,
     574,   575,    -1,   577,   578,   579,   580,   581,   582,   583,
     584,   585,   586,   587,   588,    -1,   590,   591,    -1,    -1,
     594,    -1,    -1,   597,    -1,   599,    -1,   601,   602,   603,
      -1,    -1,   606,   607,   608,   609,   610,    -1,    -1,   613,
     614,    -1,   616,   617,   618,   619,   620,   621,    -1,    -1,
      -1,    -1,    -1,    -1,   628,   629,    -1,   631,   632,   633,
      -1,    -1,   636,    -1,    -1,    -1,   640,   641,    -1,    -1,
      -1,    -1,   646,   647,    -1,    -1,   650,   651,    -1,    -1,
     654,   655,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    34,    35,    36,    37,    38,    39,    40,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    60,    61,    62,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    -1,    89,    90,    91,    92,
      93,    -1,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,    -1,   105,   106,   107,    -1,   109,   110,   111,   112,
     113,   114,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,   125,   126,    -1,   128,    -1,    -1,    -1,   132,
      -1,   134,   135,   136,   137,   138,    -1,    -1,    -1,   142,
      -1,    -1,   145,   146,   147,    -1,    -1,    -1,   151,    -1,
     153,   154,    -1,   156,   157,   158,    -1,    -1,   161,   162,
      -1,   164,   165,   166,   167,   168,   169,   170,    -1,   172,
     173,   174,   175,   176,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,   192,
      -1,   194,    -1,   196,    -1,   198,   199,   200,   201,    -1,
     203,    -1,   205,    -1,   207,    -1,   209,   210,    -1,   212,
     213,    -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,
     223,   224,    -1,   226,   227,   228,    -1,   230,    -1,   232,
      -1,    -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,
      -1,    -1,    -1,   246,   247,    -1,   249,   250,    -1,    -1,
      -1,   254,    -1,    -1,   257,   258,    -1,    -1,   261,    -1,
     263,   264,   265,    -1,    -1,    -1,    -1,    -1,   271,   272,
      -1,   274,    -1,   276,    -1,   278,   279,    -1,    -1,   282,
      -1,    -1,    -1,    -1,   287,    -1,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,    -1,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,    -1,    -1,    -1,    -1,   322,
     323,   324,   325,   326,   327,    -1,    -1,   330,   331,   332,
     333,    -1,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,    -1,   347,   348,   349,    -1,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,    -1,   362,
     363,   364,    -1,   366,   367,   368,    -1,   370,   371,   372,
      -1,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   384,   385,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,   404,   405,    -1,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,    -1,    -1,   420,    -1,    -1,
      -1,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,   438,    -1,   440,   441,   442,
     443,   444,   445,    -1,   447,    -1,   449,   450,    -1,   452,
     453,   454,    -1,   456,    -1,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,    -1,   471,   472,
      -1,    -1,    -1,   476,   477,   478,   479,    -1,    -1,    -1,
     483,    -1,    -1,    -1,   487,    -1,   489,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,
      -1,   504,   505,   506,    -1,   508,   509,    -1,   511,    -1,
      -1,   514,    -1,    -1,   517,   518,   519,   520,   521,   522,
     523,    -1,    -1,   526,   527,   528,   529,    -1,   531,   532,
     533,   534,   535,   536,   537,   538,   539,   540,   541,   542,
     543,   544,   545,    -1,    -1,   548,   549,   550,   551,   552,
      -1,   554,   555,   556,    -1,   558,   559,   560,   561,   562,
      -1,    -1,    -1,    -1,   567,   568,   569,   570,   571,   572,
      -1,   574,   575,    -1,   577,   578,   579,   580,   581,   582,
     583,   584,   585,   586,   587,   588,    -1,   590,   591,    -1,
      -1,   594,    -1,    -1,   597,    -1,   599,    -1,   601,   602,
     603,    -1,    -1,   606,   607,   608,   609,   610,    -1,    -1,
     613,   614,    -1,   616,   617,   618,   619,   620,   621,    -1,
      -1,    -1,    -1,    -1,    -1,   628,   629,    -1,   631,   632,
     633,    -1,    -1,   636,    -1,    -1,    -1,   640,   641,    -1,
      -1,    -1,    -1,   646,   647,    -1,    -1,   650,   651,    -1,
      -1,   654,   655,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    34,    35,    36,    37,    38,    39,    40,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    60,    61,
      62,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      -1,    73,    74,    -1,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    -1,    89,    90,    91,
      92,    93,    -1,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,    -1,   105,   106,   107,    -1,   109,   110,   111,
     112,   113,   114,    -1,    -1,    -1,    -1,   119,   120,   121,
      -1,    -1,   124,   125,   126,    -1,   128,    -1,    -1,    -1,
     132,    -1,   134,   135,   136,   137,   138,    -1,    -1,    -1,
     142,    -1,    -1,   145,   146,   147,    -1,    -1,    -1,   151,
      -1,   153,   154,    -1,   156,   157,   158,    -1,    -1,   161,
     162,    -1,   164,   165,   166,   167,   168,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,
     192,    -1,   194,    -1,   196,    -1,   198,   199,   200,   201,
      -1,   203,    -1,   205,    -1,   207,    -1,   209,   210,    -1,
     212,   213,    -1,   215,   216,    -1,    -1,    -1,   220,   221,
     222,   223,   224,    -1,   226,   227,   228,    -1,   230,    -1,
     232,    -1,    -1,    -1,   236,   237,   238,   239,    -1,    -1,
     242,    -1,    -1,    -1,   246,   247,    -1,   249,   250,    -1,
      -1,    -1,   254,    -1,    -1,   257,   258,    -1,    -1,   261,
      -1,   263,   264,   265,    -1,    -1,    -1,    -1,    -1,   271,
     272,    -1,   274,    -1,   276,    -1,   278,   279,    -1,    -1,
     282,    -1,    -1,    -1,    -1,   287,    -1,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,    -1,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,    -1,    -1,    -1,    -1,
     322,   323,   324,   325,   326,   327,    -1,    -1,   330,   331,
     332,   333,    -1,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,    -1,   347,   348,   349,    -1,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,    -1,
     362,   363,   364,    -1,   366,   367,   368,    -1,   370,   371,
     372,    -1,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   384,   385,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,   405,    -1,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,    -1,    -1,   420,    -1,
      -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,    -1,   437,   438,    -1,   440,   441,
     442,   443,   444,   445,    -1,   447,    -1,   449,   450,    -1,
     452,   453,   454,    -1,   456,    -1,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,    -1,   471,
     472,    -1,    -1,    -1,   476,   477,   478,   479,    -1,    -1,
      -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,   491,
     492,    -1,   494,   495,   496,   497,   498,    -1,    -1,    -1,
      -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,   511,
      -1,    -1,   514,    -1,    -1,   517,   518,   519,   520,   521,
     522,   523,    -1,    -1,   526,   527,   528,   529,    -1,   531,
     532,   533,   534,   535,   536,   537,   538,   539,   540,   541,
     542,   543,   544,   545,    -1,    -1,   548,   549,   550,   551,
     552,    -1,   554,   555,   556,    -1,   558,   559,   560,   561,
     562,    -1,    -1,    -1,    -1,   567,   568,   569,   570,   571,
     572,    -1,   574,   575,    -1,   577,   578,   579,   580,   581,
     582,   583,   584,   585,   586,   587,   588,    -1,   590,   591,
      -1,    -1,   594,    -1,    -1,   597,    -1,   599,    -1,   601,
     602,   603,    -1,    -1,   606,   607,   608,   609,   610,    -1,
      -1,   613,   614,    -1,   616,   617,   618,   619,   620,   621,
      -1,    -1,    -1,    -1,    -1,    -1,   628,   629,    -1,   631,
     632,   633,    -1,    -1,   636,    -1,    -1,    -1,   640,   641,
      -1,    -1,    -1,    -1,   646,   647,    -1,    -1,   650,   651,
      -1,    -1,   654,   655,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    34,    35,    36,    37,    38,    39,    40,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    60,
      61,    62,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    -1,    73,    74,    -1,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    -1,    89,    90,
      91,    92,    93,    -1,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,    -1,   105,   106,   107,    -1,   109,   110,
     111,   112,   113,   114,    -1,    -1,    -1,    -1,   119,   120,
     121,    -1,    -1,   124,   125,   126,    -1,   128,    -1,    -1,
      -1,   132,    -1,   134,   135,   136,   137,   138,    -1,    -1,
      -1,   142,    -1,    -1,   145,   146,   147,    -1,    -1,    -1,
     151,    -1,   153,   154,    -1,   156,   157,   158,    -1,    -1,
     161,   162,    -1,   164,   165,   166,   167,   168,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,
     191,   192,    -1,   194,    -1,   196,    -1,   198,   199,   200,
     201,    -1,   203,    -1,   205,    -1,   207,    -1,   209,   210,
      -1,   212,   213,    -1,   215,   216,    -1,    -1,    -1,   220,
     221,   222,   223,   224,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,   236,   237,   238,   239,    -1,
      -1,   242,    -1,    -1,    -1,   246,   247,    -1,   249,   250,
      -1,    -1,    -1,   254,    -1,    -1,   257,   258,    -1,    -1,
     261,    -1,   263,   264,   265,    -1,    -1,    -1,    -1,    -1,
     271,   272,    -1,   274,    -1,   276,    -1,   278,   279,    -1,
      -1,   282,    -1,    -1,    -1,    -1,   287,    -1,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,    -1,    -1,    -1,
      -1,   322,   323,   324,   325,   326,   327,    -1,    -1,   330,
     331,   332,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,    -1,   347,   348,   349,    -1,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
      -1,   362,   363,   364,    -1,   366,   367,   368,    -1,   370,
     371,   372,    -1,   374,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,   404,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,    -1,    -1,   420,
      -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,    -1,   440,
     441,   442,   443,   444,   445,    -1,   447,    -1,   449,   450,
      -1,   452,   453,   454,    -1,   456,    -1,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,    -1,
     471,   472,    -1,    -1,    -1,   476,   477,   478,   479,    -1,
      -1,    -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,
     511,    -1,    -1,   514,    -1,    -1,   517,   518,   519,   520,
     521,   522,   523,    -1,    -1,   526,   527,   528,   529,    -1,
     531,   532,   533,   534,   535,   536,   537,   538,   539,   540,
     541,   542,   543,   544,   545,    -1,    -1,   548,   549,   550,
     551,   552,    -1,   554,   555,   556,    -1,   558,   559,   560,
     561,   562,    -1,    -1,    -1,    -1,   567,   568,   569,   570,
     571,   572,    -1,   574,   575,    -1,   577,   578,   579,   580,
     581,   582,   583,   584,   585,   586,   587,   588,    -1,   590,
     591,    -1,    -1,   594,    -1,    -1,   597,    -1,   599,    -1,
     601,   602,   603,    -1,    -1,   606,   607,   608,   609,   610,
      -1,    -1,   613,   614,    -1,   616,   617,   618,   619,   620,
     621,    -1,    -1,    -1,    -1,    -1,    -1,   628,   629,    -1,
     631,   632,   633,    -1,    -1,   636,    -1,    -1,    -1,   640,
     641,    -1,    -1,    -1,    -1,   646,   647,    -1,    -1,   650,
     651,    -1,    -1,   654,   655,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    34,    35,    36,    37,    38,    39,
      40,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      60,    61,    62,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    -1,    73,    74,    -1,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    -1,    89,
      90,    91,    92,    93,    -1,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,    -1,   105,   106,   107,    -1,   109,
     110,   111,   112,   113,   114,    -1,    -1,    -1,    -1,   119,
     120,   121,    -1,    -1,   124,   125,   126,    -1,   128,    -1,
      -1,    -1,   132,    -1,   134,   135,   136,   137,   138,    -1,
      -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,    -1,
      -1,   151,    -1,   153,   154,    -1,   156,   157,   158,    -1,
      -1,   161,   162,    -1,   164,   165,   166,   167,   168,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,
      -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,   199,
     200,   201,    -1,   203,    -1,   205,    -1,   207,    -1,   209,
     210,    -1,   212,   213,    -1,   215,   216,    -1,    -1,    -1,
     220,   221,   222,   223,   224,    -1,   226,   227,   228,    -1,
     230,    -1,   232,    -1,    -1,    -1,   236,   237,   238,   239,
      -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,   249,
     250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,    -1,
      -1,   261,    -1,   263,   264,   265,    -1,    -1,    -1,    -1,
      -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,   279,
      -1,    -1,   282,    -1,    -1,    -1,    -1,   287,    -1,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,    -1,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
      -1,    -1,   322,   323,   324,   325,   326,   327,    -1,    -1,
     330,   331,   332,   333,    -1,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,    -1,   347,   348,   349,
      -1,    -1,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,    -1,   362,   363,   364,    -1,   366,   367,   368,    -1,
     370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   384,   385,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,   405,    -1,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,   417,    -1,    -1,
     420,    -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,    -1,   437,   438,    -1,
     440,   441,   442,   443,   444,   445,    -1,   447,    -1,   449,
     450,    -1,   452,   453,   454,    -1,   456,    -1,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
      -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,   479,
      -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,   489,
     490,   491,   492,    -1,   494,   495,   496,   497,   498,    -1,
      -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,
      -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,   519,
     520,   521,   522,   523,    -1,    -1,   526,   527,   528,   529,
      -1,   531,   532,   533,   534,   535,   536,   537,   538,   539,
     540,   541,   542,   543,   544,   545,    -1,    -1,   548,   549,
     550,   551,   552,    -1,   554,   555,   556,    -1,   558,   559,
     560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,   569,
     570,   571,   572,    -1,   574,   575,    -1,   577,   578,   579,
     580,   581,   582,   583,   584,   585,   586,   587,   588,    -1,
     590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,   599,
      -1,   601,   602,   603,    -1,    -1,   606,   607,   608,   609,
     610,    -1,    -1,   613,   614,    -1,   616,   617,   618,   619,
     620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,   629,
      -1,   631,   632,   633,    -1,    -1,   636,    -1,    -1,    -1,
     640,   641,    -1,    -1,    -1,    -1,   646,   647,    -1,    -1,
     650,   651,    -1,    -1,   654,   655,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    34,    35,    36,    37,    38,
      39,    40,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    60,    61,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,    -1,   105,   106,   107,    -1,
     109,   110,   111,   112,   113,   114,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,   124,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,   170,    -1,   172,   173,   174,   175,   176,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,   207,    -1,
     209,   210,    -1,   212,   213,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,   224,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,   236,   237,   238,
     239,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,   263,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,   282,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,   332,   333,    -1,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,   347,   348,
     349,    -1,    -1,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,    -1,   362,   363,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,   443,   444,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,   526,   527,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,   537,   538,
     539,   540,   541,   542,   543,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,   554,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,   577,   578,
     579,   580,   581,   582,   583,   584,   585,   586,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,   606,   607,   608,
     609,   610,    -1,    -1,   613,   614,    -1,   616,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,    -1,   636,    -1,    -1,
      -1,   640,   641,    -1,    -1,    -1,    -1,   646,   647,    -1,
      -1,   650,   651,    -1,    -1,   654,   655,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    34,    35,    36,    37,
      38,    39,    40,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    60,    61,    62,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    -1,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      -1,    89,    90,    91,    92,    93,    -1,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,    -1,   105,   106,   107,
      -1,   109,   110,   111,   112,   113,   114,    -1,    -1,    -1,
      -1,   119,   120,   121,    -1,    -1,   124,   125,   126,    -1,
     128,    -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,
     138,    -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,
      -1,    -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,
     158,    -1,    -1,   161,   162,    -1,   164,   165,   166,   167,
     168,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,    -1,   187,
      -1,    -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,
     198,   199,   200,   201,    -1,   203,    -1,   205,    -1,   207,
      -1,   209,   210,    -1,   212,   213,    -1,   215,   216,    -1,
      -1,    -1,   220,   221,   222,   223,   224,    -1,   226,   227,
     228,    -1,   230,    -1,   232,    -1,    -1,    -1,   236,   237,
     238,   239,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,
      -1,   249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,
     258,    -1,    -1,   261,    -1,   263,   264,   265,    -1,    -1,
      -1,    -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,
     278,   279,    -1,    -1,   282,    -1,    -1,    -1,    -1,   287,
      -1,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,    -1,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
      -1,    -1,    -1,    -1,   322,   323,   324,   325,   326,   327,
      -1,    -1,   330,   331,   332,   333,    -1,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,    -1,   347,
     348,   349,    -1,    -1,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,    -1,   362,   363,   364,    -1,   366,   367,
     368,    -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   384,   385,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,   417,
      -1,    -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,    -1,   437,
     438,    -1,   440,   441,   442,   443,   444,   445,    -1,   447,
      -1,   449,   450,    -1,   452,   453,   454,    -1,   456,    -1,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,
     478,   479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,
      -1,   489,   490,   491,   492,    -1,   494,   495,   496,   497,
     498,    -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,
     508,   509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,
     518,   519,   520,   521,   522,   523,    -1,    -1,   526,   527,
     528,   529,    -1,   531,   532,   533,   534,   535,   536,   537,
     538,   539,   540,   541,   542,   543,   544,   545,    -1,    -1,
     548,   549,   550,   551,   552,    -1,   554,   555,   556,    -1,
     558,   559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,
     568,   569,   570,   571,   572,    -1,   574,   575,    -1,   577,
     578,   579,   580,   581,   582,   583,   584,   585,   586,   587,
     588,    -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,
      -1,   599,    -1,   601,   602,   603,    -1,    -1,   606,   607,
     608,   609,   610,    -1,    -1,   613,   614,    -1,   616,   617,
     618,   619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,
     628,   629,    -1,   631,   632,   633,    -1,    -1,   636,    -1,
      -1,    -1,   640,   641,    -1,    -1,    -1,    -1,   646,   647,
      -1,    -1,   650,   651,    -1,    -1,   654,   655,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    34,    35,    36,
      37,    38,    39,    40,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    60,    61,    62,    -1,    64,    65,    66,
      67,    68,    -1,    70,    71,    -1,    73,    74,    -1,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    -1,    89,    90,    91,    92,    93,    -1,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,    -1,   105,   106,
     107,    -1,   109,   110,   111,   112,   113,   114,    -1,    -1,
      -1,    -1,   119,   120,   121,    -1,    -1,   124,   125,   126,
      -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,   136,
     137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,   146,
     147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,   156,
     157,   158,    -1,    -1,   161,   162,    -1,   164,   165,   166,
     167,   168,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,    -1,
     187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,   196,
      -1,   198,   199,   200,   201,    -1,   203,    -1,   205,    -1,
     207,    -1,   209,   210,    -1,   212,   213,    -1,   215,   216,
      -1,    -1,    -1,   220,   221,   222,   223,   224,    -1,   226,
     227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,   236,
     237,   238,   239,    -1,    -1,   242,    -1,    -1,    -1,   246,
     247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,    -1,
     257,   258,    -1,    -1,   261,    -1,   263,   264,   265,    -1,
      -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,   276,
      -1,   278,   279,    -1,    -1,   282,    -1,    -1,    -1,    -1,
     287,    -1,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,    -1,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,   326,
     327,    -1,    -1,   330,   331,   332,   333,    -1,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,    -1,
     347,   348,   349,    -1,    -1,   352,   353,   354,   355,   356,
      -1,   358,   359,   360,    -1,   362,   363,   364,    -1,   366,
     367,   368,    -1,   370,   371,   372,    -1,   374,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,   404,   405,    -1,
     407,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
     417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
     437,   438,    -1,   440,   441,   442,   443,   444,   445,    -1,
     447,    -1,   449,   450,    -1,   452,   453,   454,    -1,   456,
      -1,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,   476,
     477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,    -1,
     487,    -1,   489,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,   506,
      -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,    -1,
     517,   518,   519,   520,   521,   522,   523,    -1,    -1,   526,
     527,   528,   529,    -1,   531,   532,   533,   534,   535,   536,
     537,   538,   539,   540,   541,   542,   543,   544,   545,    -1,
      -1,   548,   549,   550,   551,   552,    -1,   554,   555,   556,
      -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,    -1,
     567,   568,   569,   570,   571,   572,    -1,   574,   575,    -1,
     577,   578,   579,   580,   581,   582,   583,   584,   585,   586,
     587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,    -1,
     597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,   606,
     607,   608,   609,   610,    -1,    -1,   613,   614,    -1,   616,
     617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,    -1,
      -1,   628,   629,    -1,   631,   632,   633,    -1,    -1,   636,
      -1,    -1,    -1,   640,   641,    -1,    -1,    -1,    -1,   646,
     647,    -1,    -1,   650,   651,    -1,    -1,   654,   655,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    90,    91,    92,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,   195,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,   229,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,   255,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
      -1,   267,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,    -1,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,   473,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,   499,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,    -1,
     636,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    19,    -1,    -1,    22,   655,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    60,    -1,    62,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    -1,    73,
      74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    90,    91,    92,    93,
      -1,    -1,    -1,    97,    -1,    -1,   100,    -1,   102,    -1,
      -1,   105,    -1,    -1,    -1,   109,   110,   111,    -1,    -1,
     114,    -1,    -1,    -1,    -1,   119,   120,    -1,    -1,    -1,
      -1,   125,   126,    -1,   128,    -1,    -1,    -1,   132,    -1,
     134,   135,   136,   137,   138,    -1,    -1,    -1,   142,    -1,
      -1,   145,   146,   147,    -1,    -1,    -1,   151,    -1,   153,
     154,    -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,
     164,   165,   166,   167,   168,   169,    -1,    -1,   172,   173,
     174,   175,   176,    -1,    -1,   179,   180,    -1,   182,   183,
     184,    -1,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,
     194,   195,   196,    -1,   198,   199,   200,   201,    -1,   203,
      -1,   205,    -1,    -1,    -1,   209,   210,    -1,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,   223,
      -1,    -1,   226,   227,   228,   229,   230,    -1,   232,    -1,
      -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,
      -1,    -1,   246,   247,    -1,   249,   250,    -1,    -1,    -1,
     254,   255,    -1,   257,   258,    -1,    -1,   261,    -1,    -1,
     264,   265,    -1,    -1,    -1,    -1,    -1,   271,   272,    -1,
     274,    -1,   276,    -1,   278,   279,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   287,    -1,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,    -1,   311,   312,   313,
     314,    -1,   316,   317,    -1,    -1,    -1,    -1,   322,   323,
     324,   325,   326,   327,    -1,    -1,   330,   331,    -1,   333,
      -1,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,    -1,    -1,   348,   349,    -1,    -1,   352,   353,
     354,   355,    -1,    -1,    -1,   359,   360,    -1,    -1,    -1,
     364,    -1,   366,   367,   368,    -1,   370,   371,   372,    -1,
     374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     384,   385,   386,    -1,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,    -1,    -1,   403,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,    -1,    -1,   420,    -1,    -1,    -1,
     424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,    -1,   437,   438,    -1,   440,   441,   442,    -1,
      -1,   445,    -1,   447,    -1,   449,   450,    -1,   452,   453,
     454,    -1,   456,    -1,    -1,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,    -1,   471,   472,    -1,
      -1,    -1,   476,   477,   478,   479,    -1,    -1,    -1,   483,
      -1,    -1,    -1,   487,    -1,   489,   490,   491,   492,    -1,
     494,   495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,
     504,   505,   506,    -1,   508,   509,    -1,   511,    -1,    -1,
     514,    -1,    -1,   517,   518,   519,   520,   521,   522,   523,
      -1,    -1,    -1,    -1,   528,   529,    -1,   531,   532,   533,
     534,   535,   536,    -1,    -1,   539,   540,   541,   542,    -1,
     544,   545,    -1,    -1,   548,   549,   550,   551,   552,    -1,
      -1,   555,   556,    -1,   558,   559,   560,   561,   562,    -1,
      -1,    -1,    -1,   567,   568,   569,   570,   571,   572,    -1,
     574,   575,    -1,    -1,    -1,   579,   580,   581,   582,    -1,
     584,   585,    -1,   587,   588,    -1,   590,   591,    -1,    -1,
     594,    -1,    -1,   597,    -1,   599,    -1,   601,   602,   603,
      -1,    -1,    -1,    -1,    -1,    -1,   610,    -1,    -1,   613,
      -1,    -1,    -1,   617,   618,   619,   620,   621,    -1,    -1,
      -1,    -1,    -1,    -1,   628,   629,    -1,   631,   632,   633,
      -1,    -1,   636,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    19,    -1,    -1,
      22,   655,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    60,    -1,
      62,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      -1,    73,    74,    -1,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    -1,    89,    90,    91,
      92,    93,    -1,    -1,    -1,    97,    -1,    -1,   100,    -1,
     102,    -1,    -1,   105,    -1,    -1,    -1,   109,   110,   111,
      -1,    -1,   114,    -1,    -1,    -1,    -1,   119,   120,    -1,
      -1,    -1,    -1,   125,   126,    -1,   128,    -1,    -1,    -1,
     132,    -1,   134,   135,   136,   137,   138,    -1,    -1,    -1,
     142,    -1,    -1,   145,   146,   147,    -1,    -1,    -1,   151,
      -1,   153,   154,    -1,   156,   157,   158,    -1,    -1,   161,
     162,    -1,   164,   165,   166,   167,   168,   169,    -1,    -1,
     172,   173,   174,   175,   176,    -1,    -1,   179,   180,    -1,
     182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,
     192,    -1,   194,    -1,   196,    -1,   198,   199,   200,   201,
      -1,   203,    -1,   205,    -1,    -1,    -1,   209,   210,    -1,
     212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,   221,
     222,   223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,
     232,    -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,
     242,    -1,    -1,    -1,   246,   247,    -1,   249,   250,    -1,
      -1,    -1,   254,    -1,    -1,   257,   258,    -1,    -1,   261,
      -1,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,   271,
     272,    -1,   274,    -1,   276,    -1,   278,   279,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   287,    -1,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,    -1,   307,   308,   309,    -1,   311,
     312,   313,   314,    -1,   316,   317,    -1,    -1,    -1,    -1,
     322,   323,   324,   325,   326,   327,    -1,    -1,   330,   331,
      -1,   333,    -1,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,    -1,    -1,   348,   349,    -1,    -1,
     352,   353,   354,   355,    -1,    -1,    -1,   359,   360,    -1,
      -1,    -1,   364,    -1,   366,   367,   368,    -1,   370,   371,
     372,    -1,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   384,   385,   386,    -1,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,    -1,
      -1,   403,   404,   405,    -1,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,    -1,    -1,   420,    -1,
      -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,    -1,   437,   438,    -1,   440,   441,
     442,    -1,    -1,   445,    -1,   447,    -1,   449,   450,    -1,
     452,   453,   454,    -1,   456,    -1,    -1,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,    -1,   471,
     472,   473,    -1,    -1,   476,   477,   478,   479,    -1,    -1,
      -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,   491,
     492,    -1,   494,   495,   496,   497,   498,    -1,    -1,    -1,
      -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,   511,
      -1,    -1,   514,    -1,    -1,   517,   518,   519,   520,   521,
     522,   523,    -1,    -1,    -1,    -1,   528,   529,    -1,   531,
     532,   533,   534,   535,   536,    -1,    -1,   539,   540,   541,
     542,    -1,   544,   545,    -1,    -1,   548,   549,   550,   551,
     552,    -1,    -1,   555,   556,    -1,   558,   559,   560,   561,
     562,    -1,    -1,    -1,    -1,   567,   568,   569,   570,   571,
     572,    -1,   574,   575,    -1,    -1,    -1,   579,   580,   581,
     582,    -1,   584,   585,    -1,   587,   588,    -1,   590,   591,
      -1,    -1,   594,    -1,    -1,   597,    -1,   599,    -1,   601,
     602,   603,    -1,    -1,    -1,    -1,    -1,    -1,   610,    -1,
      -1,   613,    -1,    -1,    -1,   617,   618,   619,   620,   621,
      -1,    -1,    -1,    -1,    -1,    -1,   628,   629,    -1,   631,
     632,   633,    -1,    -1,   636,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,   648,    -1,    18,    19,
      -1,    -1,    22,   655,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      60,    -1,    62,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    -1,    73,    74,    -1,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    -1,    89,
      90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,    -1,
     100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,
     110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,   119,
     120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,    -1,
      -1,    -1,   132,    -1,   134,   135,   136,   137,   138,    -1,
      -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,    -1,
      -1,   151,    -1,   153,   154,    -1,   156,   157,   158,    -1,
      -1,   161,   162,    -1,   164,   165,   166,   167,   168,   169,
      -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,   179,
     180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,
      -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,   199,
     200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,   209,
     210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,
     220,   221,   222,   223,    -1,    -1,   226,   227,   228,    -1,
     230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,
      -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,   249,
     250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,    -1,
      -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,    -1,
      -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,   279,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,    -1,   307,   308,   309,
      -1,   311,   312,   313,   314,    -1,   316,   317,    -1,    -1,
      -1,    -1,   322,   323,   324,   325,   326,   327,    -1,    -1,
     330,   331,    -1,   333,    -1,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,    -1,    -1,   348,   349,
      -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,   359,
     360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,    -1,
     370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,   417,    -1,    -1,
     420,    -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,    -1,   437,   438,    -1,
     440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,   449,
     450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
      -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,   479,
      -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,   489,
     490,   491,   492,    -1,   494,   495,   496,   497,   498,    -1,
      -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,
      -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,   519,
     520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,   529,
      -1,   531,   532,   533,   534,   535,   536,    -1,    -1,   539,
     540,   541,   542,    -1,   544,   545,    -1,    -1,   548,   549,
     550,   551,   552,    -1,    -1,   555,   556,    -1,   558,   559,
     560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,   569,
     570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,   579,
     580,   581,   582,    -1,   584,   585,    -1,   587,   588,    -1,
     590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,   599,
      -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,    -1,
     610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,   619,
     620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,   629,
      -1,   631,   632,   633,    -1,    -1,   636,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,   648,     7,
       8,     9,    10,    11,   654,   655,    14,    -1,    -1,    -1,
      18,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    60,    -1,    62,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    -1,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      -1,    89,    90,    91,    92,    93,    -1,    -1,    -1,    97,
      -1,    -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,
      -1,   109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,
      -1,   119,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,
     128,    -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,
     138,    -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,
      -1,    -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,
     158,    -1,    -1,   161,   162,    -1,   164,   165,   166,   167,
     168,   169,    -1,    -1,   172,   173,   174,   175,   176,    -1,
      -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,   187,
      -1,    -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,
     198,   199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,
      -1,   209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,
      -1,    -1,   220,   221,   222,   223,    -1,    -1,   226,   227,
     228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,
     238,    -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,
      -1,   249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,
     258,    -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,
      -1,    -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,
     278,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,
      -1,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,    -1,   307,
     308,   309,    -1,   311,   312,   313,   314,    -1,   316,   317,
      -1,    -1,    -1,    -1,   322,   323,   324,   325,   326,   327,
      -1,    -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,    -1,    -1,
     348,   349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,
      -1,   359,   360,    -1,    -1,    -1,   364,    -1,   366,   367,
     368,    -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,    -1,    -1,   403,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,   417,
      -1,    -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,    -1,   437,
     438,    -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,
      -1,   449,   450,    -1,   452,   453,   454,    -1,   456,    -1,
      -1,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,
     478,   479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,
      -1,   489,   490,   491,   492,    -1,   494,   495,   496,   497,
     498,    -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,
     508,   509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,
     518,   519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,
     528,   529,    -1,   531,   532,   533,   534,   535,   536,    -1,
      -1,   539,   540,   541,   542,    -1,   544,   545,    -1,    -1,
     548,   549,   550,   551,   552,    -1,    -1,   555,   556,    -1,
     558,   559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,
     568,   569,   570,   571,   572,    -1,   574,   575,    -1,    -1,
      -1,   579,   580,   581,   582,    -1,   584,   585,    -1,   587,
     588,    -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,
      -1,   599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,
      -1,    -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,
     618,   619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,
     628,   629,    -1,   631,   632,   633,    -1,    -1,   636,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,   647,
      -1,    -1,    18,    19,    -1,    -1,    22,   655,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    92,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,   240,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,    -1,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,    -1,
     636,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    19,    -1,    -1,    22,   655,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    60,    -1,    62,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    -1,    73,
      74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    -1,    89,    90,    91,    92,    93,
      -1,    -1,    -1,    97,    -1,    -1,   100,    -1,   102,    -1,
      -1,   105,    -1,    -1,    -1,   109,   110,   111,    -1,    -1,
     114,    -1,    -1,    -1,    -1,   119,   120,    -1,    -1,    -1,
      -1,   125,   126,    -1,   128,    -1,    -1,    -1,   132,    -1,
     134,   135,   136,   137,   138,    -1,    -1,    -1,   142,    -1,
      -1,   145,   146,   147,    -1,    -1,    -1,   151,    -1,   153,
     154,    -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,
     164,   165,   166,   167,   168,   169,    -1,    -1,   172,   173,
     174,   175,   176,    -1,    -1,   179,   180,    -1,   182,   183,
     184,    -1,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,
     194,    -1,   196,    -1,   198,   199,   200,   201,    -1,   203,
      -1,   205,    -1,    -1,    -1,   209,   210,    -1,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,   223,
      -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,
      -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,
      -1,    -1,   246,   247,    -1,   249,   250,    -1,    -1,    -1,
     254,    -1,    -1,   257,   258,    -1,    -1,   261,    -1,    -1,
     264,   265,    -1,    -1,    -1,    -1,    -1,   271,   272,    -1,
     274,    -1,   276,    -1,   278,   279,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   287,    -1,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,    -1,   311,   312,   313,
     314,    -1,   316,   317,    -1,    -1,    -1,    -1,   322,   323,
     324,   325,   326,   327,    -1,    -1,   330,   331,    -1,   333,
      -1,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,    -1,    -1,   348,   349,    -1,    -1,   352,   353,
     354,   355,    -1,    -1,    -1,   359,   360,    -1,    -1,    -1,
     364,    -1,   366,   367,   368,    -1,   370,   371,   372,    -1,
     374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     384,   385,   386,    -1,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,    -1,    -1,   403,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,    -1,    -1,   420,    -1,    -1,    -1,
     424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,    -1,   437,   438,    -1,   440,   441,   442,    -1,
      -1,   445,    -1,   447,    -1,   449,   450,    -1,   452,   453,
     454,    -1,   456,    -1,    -1,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,    -1,   471,   472,    -1,
      -1,    -1,   476,   477,   478,   479,    -1,    -1,    -1,   483,
      -1,    -1,    -1,   487,    -1,   489,   490,   491,   492,    -1,
     494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,    -1,
     504,   505,   506,    -1,   508,   509,    -1,   511,    -1,    -1,
     514,    -1,    -1,   517,   518,   519,   520,   521,   522,   523,
      -1,    -1,    -1,    -1,   528,   529,    -1,   531,   532,   533,
     534,   535,   536,    -1,    -1,   539,   540,   541,   542,    -1,
     544,   545,    -1,    -1,   548,   549,   550,   551,   552,    -1,
      -1,   555,   556,    -1,   558,   559,   560,   561,   562,    -1,
      -1,    -1,    -1,   567,   568,   569,   570,   571,   572,    -1,
     574,   575,    -1,    -1,    -1,   579,   580,   581,   582,    -1,
     584,   585,    -1,   587,   588,    -1,   590,   591,    -1,    -1,
     594,    -1,    -1,   597,    -1,   599,    -1,   601,   602,   603,
      -1,    -1,    -1,    -1,    -1,    -1,   610,    -1,    -1,   613,
      -1,    -1,    -1,   617,   618,   619,   620,   621,    -1,    -1,
      -1,    -1,    -1,    -1,   628,   629,    -1,   631,   632,   633,
      -1,    -1,   636,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,   647,    -1,    -1,    18,    19,    -1,    -1,
      22,   655,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    60,    -1,
      62,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      -1,    73,    74,    -1,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    -1,    89,    90,    91,
      92,    93,    -1,    -1,    -1,    97,    -1,    -1,   100,    -1,
     102,    -1,    -1,   105,    -1,    -1,    -1,   109,   110,   111,
      -1,    -1,   114,    -1,    -1,    -1,    -1,   119,   120,    -1,
      -1,    -1,    -1,   125,   126,    -1,   128,    -1,    -1,    -1,
     132,    -1,   134,   135,   136,   137,   138,    -1,    -1,    -1,
     142,    -1,    -1,   145,   146,   147,    -1,    -1,    -1,   151,
      -1,   153,   154,    -1,   156,   157,   158,    -1,    -1,   161,
     162,    -1,   164,   165,   166,   167,   168,   169,    -1,    -1,
     172,   173,   174,   175,   176,    -1,    -1,   179,   180,    -1,
     182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,
     192,    -1,   194,    -1,   196,    -1,   198,   199,   200,   201,
      -1,   203,    -1,   205,    -1,    -1,    -1,   209,   210,    -1,
     212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,   221,
     222,   223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,
     232,    -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,
     242,    -1,    -1,    -1,   246,   247,    -1,   249,   250,    -1,
      -1,    -1,   254,    -1,    -1,   257,   258,    -1,    -1,   261,
      -1,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,   271,
     272,    -1,   274,    -1,   276,    -1,   278,   279,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   287,    -1,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,    -1,   307,   308,   309,    -1,   311,
     312,   313,   314,    -1,   316,   317,    -1,    -1,    -1,    -1,
     322,   323,   324,   325,   326,   327,    -1,    -1,   330,   331,
      -1,   333,    -1,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,    -1,    -1,   348,   349,    -1,    -1,
     352,   353,   354,   355,    -1,    -1,    -1,   359,   360,    -1,
      -1,    -1,   364,    -1,   366,   367,   368,    -1,   370,   371,
     372,    -1,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   384,   385,   386,    -1,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,    -1,
      -1,   403,   404,   405,    -1,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,    -1,    -1,   420,    -1,
      -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,    -1,   437,   438,    -1,   440,   441,
     442,    -1,    -1,   445,    -1,   447,    -1,   449,   450,    -1,
     452,   453,   454,    -1,   456,    -1,    -1,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,    -1,   471,
     472,    -1,    -1,    -1,   476,   477,   478,   479,    -1,    -1,
      -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,   491,
     492,    -1,   494,   495,   496,   497,   498,    -1,    -1,    -1,
      -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,   511,
      -1,    -1,   514,    -1,    -1,   517,   518,   519,   520,   521,
     522,   523,    -1,    -1,    -1,    -1,   528,   529,    -1,   531,
     532,   533,   534,   535,   536,    -1,    -1,   539,   540,   541,
     542,    -1,   544,   545,    -1,    -1,   548,   549,   550,   551,
     552,    -1,    -1,   555,   556,    -1,   558,   559,   560,   561,
     562,    -1,    -1,    -1,    -1,   567,   568,   569,   570,   571,
     572,    -1,   574,   575,    -1,    -1,    -1,   579,   580,   581,
     582,    -1,   584,   585,    -1,   587,   588,    -1,   590,   591,
      -1,    -1,   594,    -1,    -1,   597,    -1,   599,    -1,   601,
     602,   603,    -1,    -1,    -1,    -1,    -1,    -1,   610,    -1,
      -1,   613,    -1,    -1,    -1,   617,   618,   619,   620,   621,
      -1,    -1,    -1,    -1,    -1,    -1,   628,   629,    -1,   631,
     632,   633,    -1,    -1,   636,    -1,    -1,    -1,    -1,    -1,
     642,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,   655,    18,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    60,    -1,    62,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    -1,    73,
      74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    -1,    89,    90,    91,    92,    93,
      -1,    -1,    -1,    97,    -1,    -1,   100,    -1,   102,    -1,
      -1,   105,    -1,    -1,    -1,   109,   110,   111,    -1,    -1,
     114,    -1,    -1,    -1,    -1,   119,   120,    -1,    -1,    -1,
      -1,   125,   126,    -1,   128,    -1,    -1,    -1,   132,    -1,
     134,   135,   136,   137,   138,    -1,    -1,    -1,   142,    -1,
      -1,   145,   146,   147,    -1,    -1,    -1,   151,    -1,   153,
     154,    -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,
     164,   165,   166,   167,   168,   169,    -1,    -1,   172,   173,
     174,   175,   176,    -1,    -1,   179,   180,    -1,   182,   183,
     184,    -1,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,
     194,    -1,   196,    -1,   198,   199,   200,   201,    -1,   203,
      -1,   205,    -1,    -1,    -1,   209,   210,    -1,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,   223,
      -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,
      -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,
      -1,    -1,   246,   247,    -1,   249,   250,    -1,    -1,    -1,
     254,    -1,    -1,   257,   258,    -1,    -1,   261,    -1,    -1,
     264,   265,    -1,    -1,    -1,    -1,    -1,   271,   272,    -1,
     274,    -1,   276,    -1,   278,   279,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   287,    -1,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,    -1,   311,   312,   313,
     314,    -1,   316,   317,    -1,    -1,    -1,    -1,   322,   323,
     324,   325,   326,   327,    -1,    -1,   330,   331,    -1,   333,
      -1,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,    -1,    -1,   348,   349,    -1,    -1,   352,   353,
     354,   355,    -1,    -1,    -1,   359,   360,    -1,    -1,    -1,
     364,    -1,   366,   367,   368,    -1,   370,   371,   372,    -1,
     374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     384,   385,   386,    -1,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,    -1,    -1,   403,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,    -1,    -1,   420,    -1,    -1,    -1,
     424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,    -1,   437,   438,    -1,   440,   441,   442,    -1,
      -1,   445,    -1,   447,    -1,   449,   450,    -1,   452,   453,
     454,    -1,   456,    -1,    -1,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,    -1,   471,   472,    -1,
      -1,    -1,   476,   477,   478,   479,    -1,    -1,    -1,   483,
      -1,    -1,    -1,   487,    -1,   489,   490,   491,   492,    -1,
     494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,    -1,
     504,   505,   506,    -1,   508,   509,    -1,   511,    -1,    -1,
     514,    -1,    -1,   517,   518,   519,   520,   521,   522,   523,
      -1,    -1,    -1,    -1,   528,   529,    -1,   531,   532,   533,
     534,   535,   536,    -1,    -1,   539,   540,   541,   542,    -1,
     544,   545,    -1,    -1,   548,   549,   550,   551,   552,    -1,
      -1,   555,   556,    -1,   558,   559,   560,   561,   562,    -1,
      -1,    -1,    -1,   567,   568,   569,   570,   571,   572,    -1,
     574,   575,    -1,    -1,    -1,   579,   580,   581,   582,    -1,
     584,   585,    -1,   587,   588,    -1,   590,   591,    -1,    -1,
     594,    -1,    -1,   597,    -1,   599,    -1,   601,   602,   603,
      -1,    -1,    -1,    -1,    -1,    -1,   610,    -1,    -1,   613,
      -1,    -1,    -1,   617,   618,   619,   620,   621,    -1,    -1,
      -1,    -1,    -1,    -1,   628,   629,    -1,   631,   632,   633,
      -1,    -1,   636,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    19,
     654,   655,    22,    -1,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      60,    -1,    62,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    -1,    73,    74,    -1,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    -1,    89,
      90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,    -1,
     100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,
     110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,   119,
     120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,    -1,
      -1,    -1,   132,    -1,   134,   135,   136,   137,   138,    -1,
      -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,    -1,
      -1,   151,    -1,   153,   154,    -1,   156,   157,   158,    -1,
      -1,   161,   162,    -1,   164,   165,   166,   167,   168,   169,
      -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,   179,
     180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,
      -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,   199,
     200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,   209,
     210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,
     220,   221,   222,   223,    -1,    -1,   226,   227,   228,    -1,
     230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,
      -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,   249,
     250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,    -1,
      -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,    -1,
      -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,   279,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,    -1,   307,   308,   309,
      -1,   311,   312,   313,   314,    -1,   316,   317,    -1,    -1,
      -1,    -1,   322,   323,   324,   325,   326,   327,    -1,    -1,
     330,   331,    -1,   333,    -1,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,    -1,    -1,   348,   349,
      -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,   359,
     360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,    -1,
     370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,   417,    -1,    -1,
     420,    -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,    -1,   437,   438,    -1,
     440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,   449,
     450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
      -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,   479,
      -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,   489,
     490,   491,   492,    -1,   494,   495,   496,   497,   498,    -1,
      -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,
      -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,   519,
     520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,   529,
      -1,   531,   532,   533,   534,   535,   536,    -1,    -1,   539,
     540,   541,   542,    -1,   544,   545,    -1,    -1,   548,   549,
     550,   551,   552,    -1,    -1,   555,   556,    -1,   558,   559,
     560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,   569,
     570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,   579,
     580,   581,   582,    -1,   584,   585,    -1,   587,   588,    -1,
     590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,   599,
      -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,    -1,
     610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,   619,
     620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,   629,
      -1,   631,   632,   633,    -1,    -1,   636,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    19,    -1,    -1,    22,   655,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    60,    -1,    62,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    -1,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      -1,    89,    90,    91,    92,    93,    -1,    -1,    -1,    97,
      -1,    -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,
      -1,   109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,
      -1,   119,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,
     128,    -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,
     138,    -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,
      -1,    -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,
     158,    -1,    -1,   161,   162,    -1,   164,   165,   166,   167,
     168,   169,    -1,    -1,   172,   173,   174,   175,   176,    -1,
      -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,   187,
      -1,    -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,
     198,   199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,
      -1,   209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,
      -1,    -1,   220,   221,   222,   223,    -1,    -1,   226,   227,
     228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,
     238,    -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,
      -1,   249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,
     258,    -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,
      -1,    -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,
     278,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,
      -1,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,    -1,   307,
     308,   309,    -1,   311,   312,   313,   314,    -1,   316,   317,
      -1,    -1,    -1,    -1,   322,   323,   324,   325,   326,   327,
      -1,    -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,    -1,    -1,
     348,   349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,
      -1,   359,   360,    -1,    -1,    -1,   364,    -1,   366,   367,
     368,    -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,    -1,    -1,   403,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,   417,
      -1,    -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,    -1,   437,
     438,    -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,
      -1,   449,   450,    -1,   452,   453,   454,    -1,   456,    -1,
      -1,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,
     478,   479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,
      -1,   489,   490,   491,   492,    -1,   494,   495,   496,   497,
     498,    -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,
     508,   509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,
     518,   519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,
     528,   529,    -1,   531,   532,   533,   534,   535,   536,    -1,
      -1,   539,   540,   541,   542,    -1,   544,   545,    -1,    -1,
     548,   549,   550,   551,   552,    -1,    -1,   555,   556,    -1,
     558,   559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,
     568,   569,   570,   571,   572,    -1,   574,   575,    -1,    -1,
      -1,   579,   580,   581,   582,    -1,   584,   585,    -1,   587,
     588,    -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,
      -1,   599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,
      -1,    -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,
     618,   619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,
     628,   629,    -1,   631,   632,   633,    -1,    -1,   636,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,   655,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    92,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,    -1,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,    -1,
     636,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    19,    -1,    -1,    22,   655,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    60,    -1,    62,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    -1,    73,
      74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    -1,    89,    90,    91,    92,    93,
      -1,    -1,    -1,    97,    -1,    -1,   100,    -1,   102,    -1,
      -1,   105,    -1,    -1,    -1,   109,   110,   111,    -1,    -1,
     114,    -1,    -1,    -1,    -1,   119,   120,    -1,    -1,    -1,
      -1,   125,   126,    -1,   128,    -1,    -1,    -1,   132,    -1,
     134,   135,   136,   137,   138,    -1,    -1,    -1,   142,    -1,
      -1,   145,   146,   147,    -1,    -1,    -1,   151,    -1,   153,
     154,    -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,
     164,   165,   166,   167,   168,   169,    -1,    -1,   172,   173,
     174,   175,   176,    -1,    -1,   179,   180,    -1,   182,   183,
     184,    -1,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,
     194,    -1,   196,    -1,   198,   199,   200,   201,    -1,   203,
      -1,   205,    -1,    -1,    -1,   209,   210,    -1,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,   223,
      -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,
      -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,
      -1,    -1,   246,   247,    -1,   249,   250,    -1,    -1,    -1,
     254,    -1,    -1,   257,   258,    -1,    -1,   261,    -1,    -1,
     264,   265,    -1,    -1,    -1,    -1,    -1,   271,   272,    -1,
     274,    -1,   276,    -1,   278,   279,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   287,    -1,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,    -1,   311,   312,   313,
     314,    -1,   316,   317,    -1,    -1,    -1,    -1,   322,   323,
     324,   325,   326,   327,    -1,    -1,   330,   331,    -1,   333,
      -1,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,    -1,    -1,   348,   349,    -1,    -1,   352,   353,
     354,   355,    -1,    -1,    -1,   359,   360,    -1,    -1,    -1,
     364,    -1,   366,   367,   368,    -1,   370,   371,   372,    -1,
     374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     384,   385,   386,    -1,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,    -1,    -1,   403,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,    -1,    -1,   420,    -1,    -1,    -1,
     424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,    -1,   437,   438,    -1,   440,   441,   442,    -1,
      -1,   445,    -1,   447,    -1,   449,   450,    -1,   452,   453,
     454,    -1,   456,    -1,    -1,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,    -1,   471,   472,    -1,
      -1,    -1,   476,   477,   478,   479,    -1,    -1,    -1,   483,
      -1,    -1,    -1,   487,    -1,   489,   490,   491,   492,    -1,
     494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,    -1,
     504,   505,   506,    -1,   508,   509,    -1,   511,    -1,    -1,
     514,    -1,    -1,   517,   518,   519,   520,   521,   522,   523,
      -1,    -1,    -1,    -1,   528,   529,    -1,   531,   532,   533,
     534,   535,   536,    -1,    -1,   539,   540,   541,   542,    -1,
     544,   545,    -1,    -1,   548,   549,   550,   551,   552,    -1,
      -1,   555,   556,    -1,   558,   559,   560,   561,   562,    -1,
      -1,    -1,    -1,   567,   568,   569,   570,   571,   572,    -1,
     574,   575,    -1,    -1,    -1,   579,   580,   581,   582,    -1,
     584,   585,    -1,   587,   588,    -1,   590,   591,    -1,    -1,
     594,    -1,    -1,   597,    -1,   599,    -1,   601,   602,   603,
      -1,    -1,    -1,    -1,    -1,    -1,   610,    -1,    -1,   613,
      -1,    -1,    -1,   617,   618,   619,   620,   621,    -1,    -1,
      -1,    -1,    -1,    -1,   628,   629,    -1,   631,   632,   633,
      -1,    -1,   636,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    19,    -1,    -1,
      22,   655,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    60,    61,
      62,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      -1,    73,    74,    -1,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    -1,    89,    90,    91,
      92,    93,    -1,    -1,    -1,    97,    -1,    -1,   100,    -1,
     102,    -1,    -1,   105,    -1,    -1,    -1,   109,   110,   111,
      -1,    -1,   114,    -1,    -1,    -1,    -1,   119,   120,    -1,
      -1,    -1,   124,   125,   126,    -1,   128,    -1,    -1,    -1,
     132,    -1,   134,   135,   136,   137,   138,    -1,    -1,    -1,
     142,    -1,    -1,   145,   146,   147,    -1,    -1,    -1,   151,
      -1,   153,   154,    -1,   156,   157,   158,    -1,    -1,   161,
     162,    -1,   164,   165,   166,   167,   168,   169,    -1,    -1,
     172,   173,   174,   175,   176,    -1,    -1,   179,   180,    -1,
     182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,
     192,    -1,   194,    -1,   196,    -1,   198,   199,   200,   201,
      -1,   203,    -1,   205,    -1,    -1,    -1,   209,   210,    -1,
     212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,   221,
     222,   223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,
     232,    -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,
     242,    -1,    -1,    -1,   246,   247,    -1,   249,   250,    -1,
      -1,    -1,   254,    -1,    -1,   257,   258,    -1,    -1,   261,
      -1,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,   271,
     272,    -1,   274,    -1,   276,    -1,   278,   279,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   287,    -1,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,    -1,   307,   308,   309,    -1,   311,
     312,   313,   314,    -1,   316,   317,    -1,    -1,    -1,    -1,
     322,   323,   324,   325,   326,   327,    -1,    -1,   330,   331,
      -1,   333,    -1,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,    -1,    -1,   348,   349,    -1,    -1,
     352,   353,   354,   355,    -1,    -1,    -1,   359,   360,    -1,
      -1,    -1,   364,    -1,   366,   367,   368,    -1,   370,   371,
     372,    -1,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   384,   385,   386,    -1,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,    -1,
      -1,   403,   404,   405,    -1,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,    -1,    -1,   420,    -1,
      -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,    -1,   437,   438,    -1,   440,   441,
     442,    -1,    -1,   445,    -1,   447,    -1,   449,   450,    -1,
     452,   453,   454,    -1,   456,    -1,    -1,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,    -1,   471,
     472,    -1,    -1,    -1,   476,   477,   478,   479,    -1,    -1,
      -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,   491,
     492,    -1,   494,   495,   496,   497,   498,    -1,    -1,    -1,
      -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,   511,
      -1,    -1,   514,    -1,    -1,   517,   518,   519,   520,   521,
     522,   523,    -1,    -1,    -1,    -1,   528,   529,    -1,   531,
     532,   533,   534,   535,   536,    -1,    -1,   539,   540,   541,
     542,    -1,   544,   545,    -1,    -1,   548,   549,   550,   551,
     552,    -1,    -1,   555,   556,    -1,   558,   559,   560,   561,
     562,    -1,    -1,    -1,    -1,   567,   568,   569,   570,   571,
     572,    -1,   574,   575,    -1,    -1,    -1,   579,   580,   581,
     582,    -1,   584,   585,    -1,   587,   588,    -1,   590,   591,
      -1,    -1,   594,    -1,    -1,   597,    -1,   599,    -1,   601,
     602,   603,    -1,    -1,    -1,    -1,    -1,    -1,   610,    -1,
      -1,   613,    -1,    -1,    -1,   617,   618,   619,   620,   621,
      -1,    -1,    -1,    -1,    -1,    -1,   628,   629,    -1,   631,
     632,   633,    -1,    -1,   636,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,   654,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,   266,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
     359,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,   554,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
     579,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,    -1,   636,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,   654,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    92,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
     266,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,    -1,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,   554,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,    -1,
     636,    -1,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    19,    -1,   654,    22,
      -1,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    60,    61,    62,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    -1,    89,    90,    91,    92,
      93,    -1,    -1,    -1,    97,    -1,    -1,   100,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,   110,   111,    -1,
      -1,   114,    -1,    -1,    -1,    -1,   119,   120,    -1,    -1,
      -1,   124,   125,   126,    -1,   128,    -1,    -1,    -1,   132,
      -1,   134,   135,   136,   137,   138,    -1,    -1,    -1,   142,
      -1,    -1,   145,   146,   147,    -1,    -1,    -1,   151,    -1,
     153,   154,    -1,   156,   157,   158,    -1,    -1,   161,   162,
      -1,   164,   165,   166,   167,   168,   169,    -1,    -1,   172,
     173,   174,   175,   176,    -1,    -1,   179,   180,    -1,   182,
     183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,   192,
      -1,   194,    -1,   196,    -1,   198,   199,   200,   201,    -1,
     203,    -1,   205,    -1,    -1,    -1,   209,   210,    -1,   212,
      -1,    -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,
     223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,
      -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,    -1,    -1,   246,   247,    -1,   249,   250,    -1,    -1,
      -1,   254,    -1,    -1,   257,   258,    -1,    -1,   261,    -1,
      -1,   264,   265,    -1,    -1,    -1,    -1,    -1,   271,   272,
      -1,   274,    -1,   276,    -1,   278,   279,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   287,    -1,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,    -1,   307,   308,   309,    -1,   311,   312,
     313,   314,    -1,   316,   317,    -1,    -1,    -1,    -1,   322,
     323,   324,   325,   326,   327,    -1,    -1,   330,   331,    -1,
     333,    -1,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,    -1,    -1,   348,   349,    -1,    -1,   352,
     353,   354,   355,    -1,    -1,    -1,   359,   360,    -1,    -1,
      -1,   364,    -1,   366,   367,   368,    -1,   370,   371,   372,
      -1,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   384,   385,   386,    -1,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,    -1,    -1,
     403,   404,   405,    -1,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,    -1,    -1,   420,    -1,    -1,
      -1,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,   438,    -1,   440,   441,   442,
      -1,    -1,   445,    -1,   447,    -1,   449,   450,    -1,   452,
     453,   454,    -1,   456,    -1,    -1,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,    -1,   471,   472,
      -1,    -1,    -1,   476,   477,   478,   479,    -1,    -1,    -1,
     483,    -1,    -1,    -1,   487,    -1,   489,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,
      -1,   504,   505,   506,    -1,   508,   509,    -1,   511,    -1,
      -1,   514,    -1,    -1,   517,   518,   519,   520,   521,   522,
     523,    -1,    -1,    -1,    -1,   528,   529,    -1,   531,   532,
     533,   534,   535,   536,    -1,    -1,   539,   540,   541,   542,
      -1,   544,   545,    -1,    -1,   548,   549,   550,   551,   552,
      -1,    -1,   555,   556,    -1,   558,   559,   560,   561,   562,
      -1,    -1,    -1,    -1,   567,   568,   569,   570,   571,   572,
      -1,   574,   575,    -1,    -1,    -1,   579,   580,   581,   582,
      -1,   584,   585,    -1,   587,   588,    -1,   590,   591,    -1,
      -1,   594,    -1,    -1,   597,    -1,   599,    -1,   601,   602,
     603,    -1,    -1,    -1,    -1,    -1,    -1,   610,    -1,    -1,
     613,    -1,    -1,    -1,   617,   618,   619,   620,   621,    -1,
      -1,    -1,    -1,    -1,    -1,   628,   629,    -1,   631,   632,
     633,    -1,    -1,   636,    -1,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    19,
      -1,   654,    22,    -1,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      60,    -1,    62,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    -1,    73,    74,    -1,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    -1,    89,
      90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,    -1,
     100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,
     110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,   119,
     120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,    -1,
      -1,    -1,   132,    -1,   134,   135,   136,   137,   138,    -1,
      -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,    -1,
      -1,   151,    -1,   153,   154,    -1,   156,   157,   158,    -1,
      -1,   161,   162,    -1,   164,   165,   166,   167,   168,   169,
      -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,   179,
     180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,
      -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,   199,
     200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,   209,
     210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,
     220,   221,   222,   223,    -1,    -1,   226,   227,   228,    -1,
     230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,
      -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,   249,
     250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,    -1,
      -1,   261,    -1,    -1,   264,   265,   266,    -1,    -1,    -1,
      -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,   279,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,    -1,   307,   308,   309,
      -1,   311,   312,   313,   314,    -1,   316,   317,    -1,    -1,
      -1,    -1,   322,   323,   324,   325,   326,   327,    -1,    -1,
     330,   331,    -1,   333,    -1,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,    -1,    -1,   348,   349,
      -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,   359,
     360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,    -1,
     370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,   417,    -1,    -1,
     420,    -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,    -1,   437,   438,    -1,
     440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,   449,
     450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
      -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,   479,
      -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,   489,
     490,   491,   492,    -1,   494,   495,   496,   497,   498,    -1,
      -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,
      -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,   519,
     520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,   529,
      -1,   531,   532,   533,   534,   535,   536,    -1,    -1,   539,
     540,   541,   542,    -1,   544,   545,    -1,    -1,   548,   549,
     550,   551,   552,    -1,   554,   555,   556,    -1,   558,   559,
     560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,   569,
     570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,   579,
     580,   581,   582,    -1,   584,   585,    -1,   587,   588,    -1,
     590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,   599,
      -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,    -1,
     610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,   619,
     620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,   629,
      -1,   631,   632,   633,    -1,    -1,   636,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    19,    -1,    -1,   654,    -1,    24,    25,    26,    27,
      28,    -1,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    52,    53,    -1,    55,    56,    -1,
      58,    59,    -1,    -1,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    -1,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    -1,    86,    87,
      -1,    89,    90,    91,    -1,    93,    -1,    -1,    -1,    97,
      -1,    -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,
      -1,   109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,
      -1,   119,    -1,    -1,    -1,    -1,    -1,   125,   126,    -1,
     128,    -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,
     138,    -1,    -1,    -1,    -1,    -1,    -1,   145,   146,   147,
      -1,    -1,    -1,   151,    -1,    -1,   154,    -1,   156,   157,
     158,    -1,    -1,   161,   162,    -1,   164,   165,   166,   167,
     168,    -1,    -1,    -1,   172,   173,   174,   175,   176,    -1,
      -1,   179,   180,   181,   182,   183,   184,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   192,    -1,   194,    -1,   196,    -1,
     198,   199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,
      -1,    -1,   210,    -1,    -1,    -1,    -1,    -1,   216,    -1,
      -1,    -1,   220,   221,   222,   223,   224,    -1,   226,   227,
     228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,
      -1,    -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,
      -1,   249,   250,   251,    -1,    -1,   254,    -1,    -1,    -1,
     258,    -1,    -1,   261,   262,    -1,   264,   265,    -1,    -1,
      -1,    -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,
     278,   279,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,
      -1,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,    -1,   307,
     308,   309,    -1,   311,   312,   313,   314,    -1,   316,   317,
      -1,    -1,    -1,    -1,   322,   323,   324,   325,   326,   327,
      -1,    -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,    -1,    -1,
     348,   349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,
      -1,    -1,   360,    -1,    -1,    -1,   364,    -1,   366,   367,
     368,    -1,   370,   371,   372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,   386,    -1,
      -1,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,    -1,    -1,    -1,    -1,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,   417,
      -1,    -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,    -1,   437,
      -1,    -1,   440,    -1,   442,   443,    -1,   445,    -1,    -1,
      -1,   449,    -1,    -1,   452,   453,   454,   455,   456,    -1,
      -1,    -1,   460,   461,   462,   463,   464,   465,   466,    -1,
     468,   469,    -1,   471,    -1,    -1,    -1,    -1,   476,   477,
     478,    -1,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,
      -1,    -1,   490,    -1,   492,    -1,   494,    -1,    -1,   497,
     498,    -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,
     508,   509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,
      -1,   519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,
      -1,   529,    -1,   531,   532,   533,   534,   535,   536,    -1,
      -1,   539,   540,   541,   542,    -1,   544,   545,    -1,    -1,
     548,   549,   550,   551,   552,    -1,    -1,   555,   556,    -1,
     558,   559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,
     568,   569,   570,   571,   572,    -1,   574,   575,    -1,    -1,
      -1,    -1,   580,   581,   582,    -1,   584,   585,    -1,   587,
     588,    -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,   597,
      -1,    -1,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,
      -1,    -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,
     618,   619,   620,   621,    -1,    -1,   624,    -1,    -1,    -1,
     628,    -1,    -1,   631,    -1,   633,    -1,    -1,   636,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,   649,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    92,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,    -1,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,   642,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    92,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,    -1,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,   642,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    92,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,    -1,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,   642,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    92,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,    -1,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,   642,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    92,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,   120,   121,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,   185,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,    -1,   212,   213,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,   282,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
     356,   357,    -1,   359,   360,    -1,    -1,   363,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,    -1,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,   501,   502,   503,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,   579,   580,   581,   582,   583,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    34,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    92,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,   124,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,   159,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
     266,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,    -1,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,   482,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,   554,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    34,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    92,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,   124,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
     266,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,    -1,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,   554,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    92,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,   282,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,   359,   360,    -1,    -1,   363,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,   579,   580,   581,   582,   583,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    34,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    92,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,   124,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
     266,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,    -1,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,   554,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    92,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,   103,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
     266,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,    -1,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,   554,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,    12,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    92,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
     266,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,    -1,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,   554,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      36,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    92,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,    -1,   212,   213,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,    -1,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,   554,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    92,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,   124,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
     266,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,    -1,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,   554,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    34,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    92,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
     266,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,    -1,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,   554,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    92,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
     266,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,    -1,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,   554,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    20,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    92,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,    -1,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,   554,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    92,    93,    94,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,    -1,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    92,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,   192,   193,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,    -1,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    92,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,   124,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,    -1,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    92,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,   124,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,    -1,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    92,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,   124,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,    -1,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    92,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,   124,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,    -1,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,    12,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    92,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,    -1,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    92,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,   124,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,    -1,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    92,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,    -1,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,   403,   404,   405,
     406,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    92,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,    -1,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,   554,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    92,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,    -1,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    92,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,    -1,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    -1,    -1,    24,    25,
      26,    27,    28,    -1,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,    55,
      56,    -1,    58,    59,    -1,    -1,    -1,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    -1,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,    -1,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,    -1,    -1,    -1,   145,
     146,   147,    -1,   149,   150,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,    -1,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,   183,   184,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,    -1,   210,    -1,    -1,    -1,    -1,    -1,
     216,    -1,    -1,    -1,   220,   221,   222,   223,   224,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,    -1,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,   251,    -1,    -1,   254,    -1,
      -1,    -1,   258,    -1,    -1,   261,   262,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,   284,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,
     386,    -1,    -1,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,    -1,    -1,    -1,    -1,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,    -1,    -1,   440,    -1,   442,   443,    -1,   445,
      -1,    -1,    -1,   449,    -1,    -1,   452,   453,   454,   455,
     456,    -1,    -1,    -1,   460,   461,   462,   463,   464,   465,
     466,    -1,   468,   469,    -1,   471,    -1,    -1,    -1,    -1,
     476,   477,   478,    -1,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,    -1,   490,    -1,   492,    -1,   494,    -1,
      -1,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,    -1,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,    -1,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,    -1,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,    -1,    -1,    -1,    -1,   594,    -1,
      -1,   597,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,   624,    -1,
      -1,    -1,   628,    -1,    -1,   631,    -1,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    -1,    -1,    24,    25,
      26,    27,    28,    -1,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,    55,
      56,    -1,    58,    59,    -1,    -1,    -1,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    -1,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,    -1,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,    -1,    -1,    -1,   145,
     146,   147,    -1,   149,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,    -1,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,   183,   184,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,    -1,   210,    -1,    -1,    -1,    -1,    -1,
     216,    -1,    -1,    -1,   220,   221,   222,   223,   224,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,    -1,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,   251,    -1,    -1,   254,    -1,
      -1,    -1,   258,    -1,    -1,   261,   262,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,   284,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,
     386,    -1,    -1,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,    -1,    -1,    -1,    -1,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,    -1,    -1,   440,    -1,   442,   443,    -1,   445,
      -1,    -1,    -1,   449,    -1,    -1,   452,   453,   454,   455,
     456,    -1,    -1,    -1,   460,   461,   462,   463,   464,   465,
     466,    -1,   468,   469,    -1,   471,    -1,    -1,    -1,    -1,
     476,   477,   478,    -1,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,    -1,   490,    -1,   492,    -1,   494,    -1,
      -1,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,    -1,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,    -1,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,    -1,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,    -1,    -1,    -1,    -1,   594,    -1,
      -1,   597,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,   622,    -1,   624,    -1,
      -1,    -1,   628,    -1,    -1,   631,    -1,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    -1,    -1,    24,    25,
      26,    27,    28,    -1,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,    55,
      56,    -1,    58,    59,    -1,    -1,    -1,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    -1,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,    -1,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,    -1,    -1,    -1,   145,
     146,   147,    -1,   149,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,    -1,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,   183,   184,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,    -1,   210,    -1,    -1,    -1,    -1,    -1,
     216,    -1,    -1,    -1,   220,   221,   222,   223,   224,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,    -1,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,   251,    -1,    -1,   254,    -1,
      -1,    -1,   258,    -1,    -1,   261,   262,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,   284,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,
     386,    -1,    -1,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,    -1,    -1,    -1,    -1,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,    -1,    -1,   440,    -1,   442,   443,    -1,   445,
      -1,    -1,    -1,   449,    -1,    -1,   452,   453,   454,   455,
     456,    -1,    -1,    -1,   460,   461,   462,   463,   464,   465,
     466,    -1,   468,   469,    -1,   471,    -1,    -1,    -1,    -1,
     476,   477,   478,    -1,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,    -1,   490,    -1,   492,    -1,   494,    -1,
      -1,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,    -1,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,    -1,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,    -1,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,    -1,    -1,    -1,    -1,   594,    -1,
      -1,   597,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,   622,    -1,   624,    -1,
      -1,    -1,   628,    -1,    -1,   631,    -1,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    -1,    -1,    24,    25,
      26,    27,    28,    -1,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,    55,
      56,    -1,    58,    59,    -1,    -1,    -1,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    -1,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,    -1,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,    -1,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,    -1,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,   183,   184,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,    -1,   210,    -1,    -1,    -1,    -1,    -1,
     216,    -1,    -1,    -1,   220,   221,   222,   223,   224,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,    -1,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,   251,    -1,    -1,   254,    -1,
      -1,    -1,   258,    -1,    -1,   261,   262,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,   284,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,
     386,    -1,    -1,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,    -1,    -1,    -1,    -1,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,    -1,    -1,   440,    -1,   442,   443,    -1,   445,
      -1,    -1,    -1,   449,    -1,    -1,   452,   453,   454,   455,
     456,    -1,    -1,    -1,   460,   461,   462,   463,   464,   465,
     466,    -1,   468,   469,    -1,   471,    -1,    -1,    -1,    -1,
     476,   477,   478,    -1,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,    -1,   490,    -1,   492,    -1,   494,    -1,
      -1,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,    -1,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,    -1,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,    -1,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,    -1,    -1,    -1,    -1,   594,    -1,
      -1,   597,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,   624,    -1,
      -1,    -1,   628,    -1,    -1,   631,    -1,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    -1,    -1,    24,    25,
      26,    27,    28,    -1,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,    55,
      56,    -1,    58,    59,    -1,    -1,    -1,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    -1,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,    -1,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,    -1,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,    -1,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,   183,   184,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,    -1,   210,    -1,    -1,    -1,    -1,    -1,
     216,    -1,    -1,    -1,   220,   221,   222,   223,   224,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,    -1,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,   251,    -1,    -1,   254,    -1,
      -1,    -1,   258,    -1,    -1,   261,   262,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,   284,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,
     386,    -1,    -1,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,    -1,    -1,    -1,    -1,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,    -1,    -1,   440,    -1,   442,   443,    -1,   445,
      -1,    -1,    -1,   449,    -1,    -1,   452,   453,   454,   455,
     456,    -1,    -1,    -1,   460,   461,   462,   463,   464,   465,
     466,    -1,   468,   469,    -1,   471,    -1,    -1,    -1,    -1,
     476,   477,   478,    -1,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,    -1,   490,    -1,   492,    -1,   494,    -1,
      -1,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,    -1,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,    -1,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,    -1,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,    -1,    -1,    -1,    -1,   594,    -1,
      -1,   597,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,   624,    -1,
      -1,    -1,   628,    -1,    -1,   631,    -1,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    -1,    -1,    24,    25,
      26,    27,    28,    -1,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,    55,
      56,    -1,    58,    59,    -1,    -1,    -1,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    -1,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,    -1,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,    -1,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,    -1,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,   183,   184,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,    -1,   210,    -1,    -1,    -1,    -1,    -1,
     216,    -1,    -1,    -1,   220,   221,   222,   223,   224,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,    -1,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,   251,    -1,    -1,   254,    -1,
      -1,    -1,   258,    -1,    -1,   261,   262,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,   284,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,
     386,    -1,    -1,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,    -1,    -1,    -1,    -1,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,    -1,    -1,   440,    -1,   442,   443,    -1,   445,
      -1,    -1,    -1,   449,    -1,    -1,   452,   453,   454,   455,
     456,    -1,    -1,    -1,   460,   461,   462,   463,   464,   465,
     466,    -1,   468,   469,    -1,   471,    -1,    -1,    -1,    -1,
     476,   477,   478,    -1,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,    -1,   490,    -1,   492,    -1,   494,    -1,
      -1,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,    -1,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,    -1,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,    -1,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,    -1,    -1,    -1,    -1,   594,    -1,
      -1,   597,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,   624,    -1,
      -1,    -1,   628,    -1,    -1,   631,    -1,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    -1,    -1,    24,    25,
      26,    27,    28,    -1,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,    55,
      56,    -1,    58,    59,    -1,    -1,    -1,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    -1,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,    -1,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,    -1,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,    -1,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,   183,   184,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,    -1,   210,    -1,    -1,    -1,    -1,    -1,
     216,    -1,    -1,    -1,   220,   221,   222,   223,   224,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,    -1,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,   251,    -1,    -1,   254,    -1,
      -1,    -1,   258,    -1,    -1,   261,   262,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,   284,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,
     386,    -1,    -1,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,    -1,    -1,    -1,    -1,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,    -1,    -1,   440,    -1,   442,   443,    -1,   445,
      -1,    -1,    -1,   449,    -1,    -1,   452,   453,   454,   455,
     456,    -1,    -1,    -1,   460,   461,   462,   463,   464,   465,
     466,    -1,   468,   469,    -1,   471,    -1,    -1,    -1,    -1,
     476,   477,   478,    -1,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,    -1,   490,    -1,   492,    -1,   494,    -1,
      -1,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,    -1,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,    -1,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,    -1,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,    -1,    -1,    -1,    -1,   594,    -1,
      -1,   597,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,   624,    -1,
      -1,    -1,   628,    -1,    -1,   631,    -1,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    -1,    -1,    24,    25,
      26,    27,    28,    -1,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,    55,
      56,    -1,    58,    59,    -1,    -1,    -1,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    -1,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,    -1,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,    -1,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,    -1,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,   183,   184,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,    -1,   210,    -1,    -1,    -1,    -1,    -1,
     216,    -1,    -1,    -1,   220,   221,   222,   223,   224,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,    -1,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,   251,    -1,    -1,   254,    -1,
      -1,    -1,   258,    -1,    -1,   261,   262,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,   284,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,
     386,    -1,    -1,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,    -1,    -1,    -1,    -1,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,    -1,    -1,   440,    -1,   442,   443,    -1,   445,
      -1,    -1,    -1,   449,    -1,    -1,   452,   453,   454,   455,
     456,    -1,    -1,    -1,   460,   461,   462,   463,   464,   465,
     466,    -1,   468,   469,    -1,   471,    -1,    -1,    -1,    -1,
     476,   477,   478,    -1,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,    -1,   490,    -1,   492,    -1,   494,    -1,
      -1,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,    -1,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,    -1,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,    -1,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,    -1,    -1,    -1,    -1,   594,    -1,
      -1,   597,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,   624,    -1,
      -1,    -1,   628,    -1,    -1,   631,    -1,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    -1,    -1,    24,    25,
      26,    27,    28,    -1,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,    55,
      56,    -1,    58,    59,    -1,    -1,    -1,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    -1,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,    -1,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,    -1,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,    -1,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,    -1,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,   183,   184,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,    -1,   210,    -1,    -1,    -1,    -1,    -1,
     216,    -1,    -1,    -1,   220,   221,   222,   223,   224,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,    -1,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,   251,    -1,    -1,   254,    -1,
      -1,    -1,   258,    -1,    -1,   261,   262,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,   284,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,
     386,    -1,    -1,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,    -1,    -1,    -1,    -1,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,    -1,    -1,   440,    -1,   442,   443,    -1,   445,
      -1,    -1,    -1,   449,    -1,    -1,   452,   453,   454,   455,
     456,    -1,    -1,    -1,   460,   461,   462,   463,   464,   465,
     466,    -1,   468,   469,    -1,   471,    -1,    -1,    -1,    -1,
     476,   477,   478,    -1,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,    -1,   490,    -1,   492,    -1,   494,    -1,
      -1,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,    -1,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,    -1,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,    -1,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,    -1,    -1,    -1,    -1,   594,    -1,
      -1,   597,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,   624,    -1,
      -1,    -1,   628,    -1,    -1,   631,    -1,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    -1,    -1,    24,    25,
      26,    27,    28,    -1,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,    55,
      56,    -1,    58,    59,    -1,    -1,    -1,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    -1,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,    -1,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,    -1,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,    -1,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,    -1,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,   183,   184,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,    -1,   210,    -1,    -1,    -1,    -1,    -1,
     216,    -1,    -1,    -1,   220,   221,   222,   223,   224,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,    -1,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,   251,    -1,    -1,   254,    -1,
      -1,    -1,   258,    -1,    -1,   261,   262,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,   284,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,
     386,    -1,    -1,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,    -1,    -1,    -1,    -1,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,    -1,    -1,   440,    -1,   442,   443,    -1,   445,
      -1,    -1,    -1,   449,    -1,    -1,   452,   453,   454,   455,
     456,    -1,    -1,    -1,   460,   461,   462,   463,   464,   465,
     466,    -1,   468,   469,    -1,   471,    -1,    -1,    -1,    -1,
     476,   477,   478,    -1,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,    -1,   490,    -1,   492,    -1,   494,    -1,
      -1,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,    -1,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,    -1,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,    -1,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,    -1,    -1,    -1,    -1,   594,    -1,
      -1,   597,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,   624,    -1,
      -1,    -1,   628,    -1,    -1,   631,    -1,   633,    -1,     5,
     636,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    -1,    -1,    24,    25,
      26,    27,    28,    -1,    -1,    -1,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    -1,    -1,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    -1,    -1,    -1,    64,    65,
      66,    67,    -1,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    -1,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,    -1,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,    -1,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,    -1,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,    -1,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,    -1,   210,    -1,    -1,    -1,    -1,    -1,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,    -1,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,    -1,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,
     386,    -1,    -1,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,    -1,    -1,    -1,    -1,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,    -1,    -1,   440,    -1,   442,    -1,    -1,   445,
      -1,    -1,    -1,   449,    -1,    -1,   452,   453,   454,    -1,
     456,    -1,    -1,    -1,   460,   461,   462,   463,   464,   465,
     466,    -1,   468,   469,    -1,   471,    -1,    -1,    -1,    -1,
     476,   477,   478,    -1,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,    -1,   490,    -1,   492,    -1,   494,    -1,
      -1,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,    -1,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,    -1,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,    -1,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,    -1,    -1,    -1,    -1,   594,    -1,
      -1,   597,    -1,    -1,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,    -1,    -1,   631,    -1,   633,    -1,    -1,
     636
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    13,    15,    31,    35,    49,    50,    62,    63,    80,
      98,   120,   129,   130,   131,   142,   143,   155,   169,   187,
     204,   209,   212,   236,   238,   256,   273,   277,   373,   390,
     403,   414,   436,   439,   441,   444,   447,   457,   459,   467,
     473,   481,   486,   518,   579,   591,   595,   598,   604,   632,
     647,   658,   661,   662,   663,   664,   665,   667,   672,   674,
     707,   842,  1011,  1053,  1057,  1060,  1065,  1067,  1068,  1073,
    1076,  1081,  1088,  1100,  1101,  1259,  1261,  1276,  1279,  1304,
    1312,  1323,  1330,  1344,  1348,  1351,  1361,  1367,  1372,  1374,
    1375,  1426,  1456,  1463,  1465,  1472,  1475,  1502,  1508,  1509,
    1510,  1511,  1568,  1576,  1577,    11,   107,   126,   196,   225,
     278,   408,   479,   545,   601,  1049,  1533,  1534,  1535,  1538,
     274,   361,  1075,  1503,   554,  1417,   229,     5,     7,     8,
       9,    10,    11,    14,    18,    19,    22,    24,    25,    26,
      27,    28,    29,    31,    35,    39,    42,    43,    44,    46,
      48,    49,    52,    55,    56,    58,    59,    60,    62,    64,
      65,    66,    67,    68,    70,    71,    73,    74,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    86,    87,    89,
      90,    91,    92,    93,    97,   100,   102,   105,   109,   110,
     111,   114,   119,   120,   125,   126,   128,   132,   134,   135,
     136,   137,   138,   142,   145,   146,   147,   151,   153,   154,
     156,   157,   158,   161,   162,   164,   165,   166,   167,   168,
     169,   172,   173,   174,   175,   176,   179,   180,   182,   183,
     184,   187,   191,   192,   194,   196,   198,   199,   200,   201,
     203,   205,   209,   210,   212,   215,   216,   220,   221,   222,
     223,   226,   227,   228,   230,   232,   237,   238,   242,   246,
     247,   249,   250,   254,   257,   258,   261,   264,   265,   271,
     272,   274,   276,   278,   279,   287,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   307,   308,   309,   311,   312,   313,   314,
     316,   317,   322,   323,   324,   325,   326,   327,   330,   331,
     333,   335,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   348,   349,   352,   353,   354,   355,   359,   360,   364,
     366,   367,   368,   370,   371,   372,   374,   384,   385,   386,
     388,   389,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   403,   404,   405,   407,   409,   410,   411,   412,
     413,   415,   416,   417,   420,   424,   425,   426,   427,   428,
     431,   432,   433,   434,   435,   437,   438,   440,   441,   442,
     445,   447,   449,   450,   452,   453,   454,   456,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   471,
     472,   476,   477,   478,   479,   483,   487,   489,   490,   491,
     492,   494,   495,   496,   497,   498,   504,   505,   506,   508,
     509,   511,   514,   517,   518,   519,   520,   521,   522,   523,
     528,   529,   531,   532,   533,   534,   535,   536,   539,   540,
     541,   542,   544,   545,   548,   549,   550,   551,   552,   555,
     556,   558,   559,   560,   561,   562,   567,   568,   569,   570,
     571,   572,   574,   575,   579,   580,   581,   582,   584,   585,
     587,   588,   590,   591,   594,   597,   599,   601,   602,   603,
     610,   613,   617,   618,   619,   620,   621,   628,   629,   631,
     632,   633,   636,   701,  1416,  1420,  1424,  1425,   544,   547,
    1459,  1459,   628,  1504,    69,   107,   195,   278,   479,   499,
     545,   551,   593,   601,   683,   684,   894,   895,   896,   985,
     986,   987,   988,   989,   990,   991,  1313,  1260,   107,   166,
     196,   229,   278,   408,   479,   545,   551,   576,   601,   617,
    1272,  1420,  1075,   700,   655,  1413,  1415,  1420,   673,  1277,
     396,    86,   416,  1373,   110,   229,   633,  1380,    35,   544,
    1457,  1459,  1075,   843,  1420,  1368,   467,   601,  1459,  1075,
    1280,  1362,   700,  1504,  1420,  1104,  1106,  1107,   519,  1427,
    1331,   574,   547,  1325,   396,    35,  1459,  1464,  1305,  1420,
      31,    80,   153,   403,   425,   459,   518,  1570,   473,   647,
    1102,     0,   155,   659,   403,   175,   191,   391,  1349,  1413,
    1420,   159,  1023,  1420,   159,   701,   206,   701,   266,  1417,
    1420,  1422,   790,   791,   794,   817,  1420,   700,   547,   166,
    1017,  1533,  1459,  1504,  1082,   708,   655,  1058,  1069,    17,
    1505,   224,   897,   206,  1422,   792,   817,   700,   380,  1530,
    1534,  1535,  1536,  1537,  1538,   547,   895,   229,   989,   988,
     229,   229,   225,   285,   417,  1321,  1322,     7,    22,    28,
      34,    36,    37,    38,    40,    53,    54,    60,    61,    70,
      73,    92,    95,    96,   101,   103,   106,   107,   112,   113,
     114,   119,   121,   124,   170,   177,   178,   185,   191,   199,
     201,   207,   213,   220,   224,   236,   239,   263,   271,   282,
     310,   315,   326,   330,   332,   336,   337,   338,   339,   340,
     347,   356,   357,   358,   362,   363,   368,   387,   393,   398,
     399,   401,   415,   443,   444,   456,   458,   464,   465,   471,
     526,   527,   533,   537,   538,   543,   554,   559,   560,   561,
     562,   577,   578,   579,   583,   586,   601,   606,   607,   608,
     609,   614,   616,   620,   621,   636,   640,   641,   646,   647,
     650,   651,   654,   655,   946,  1121,  1122,  1123,  1124,  1128,
    1131,  1132,  1133,  1134,  1135,  1136,  1144,  1148,  1160,  1399,
    1401,  1403,  1404,  1405,  1409,  1411,  1416,  1420,   224,  1271,
    1271,  1271,  1420,   206,  1271,  1271,   817,  1271,   700,  1271,
    1459,   668,  1352,  1476,  1420,   372,    68,   421,   655,  1422,
     127,   214,   285,  1282,  1420,  1121,   240,  1376,   190,   190,
    1458,  1459,    47,   844,   193,    19,    34,    59,   307,  1336,
    1369,  1420,   700,  1077,  1459,   127,   285,  1283,  1311,    59,
     307,   416,   491,  1363,  1364,  1473,   566,  1505,  1105,    12,
     139,   214,   507,   508,   509,   510,   511,   512,   530,  1111,
    1112,  1113,  1529,  1428,    60,    61,   124,   203,   274,   343,
     393,   478,   574,   654,   948,  1420,  1430,  1442,  1446,  1448,
      35,    60,    67,    73,    96,    98,   108,   157,   162,   165,
     194,   196,   203,   205,   228,   229,   230,   253,   274,   307,
     372,   397,   407,   408,   411,   412,   432,   478,   491,   529,
     547,   548,   558,   602,   619,   948,   984,  1332,  1336,  1337,
    1339,  1443,   421,   625,  1054,  1055,  1056,  1324,  1420,  1311,
      36,   213,   554,  1400,  1418,  1569,  1569,  1569,  1569,  1569,
    1106,  1102,   648,   653,  1420,   159,  1346,  1345,   324,   552,
     585,  1013,   599,   103,  1422,  1423,  1015,   796,   818,  1420,
    1014,   374,     6,    57,   143,   357,   420,   422,   819,  1019,
    1423,  1413,   701,   513,  1539,  1540,  1016,  1066,  1083,  1084,
    1085,  1086,  1413,   647,   709,  1420,  1266,  1267,  1413,  1266,
      56,   359,   359,   436,  1506,   356,   357,  1127,  1420,   795,
     818,   189,     6,  1423,  1492,  1493,   444,    10,   408,   576,
     687,  1117,  1532,  1540,  1552,  1556,  1557,  1563,   687,  1117,
    1531,  1540,  1552,  1557,  1563,  1533,  1538,   897,  1420,  1420,
    1420,   193,  1314,  1318,  1319,  1420,  1321,   647,   647,   647,
    1131,   647,   647,   647,  1121,  1163,   647,   647,   647,   647,
     647,   647,   647,   647,   647,  1120,  1120,   647,   935,   647,
     647,   647,   554,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,  1121,   647,   647,   647,
    1161,  1162,  1409,  1420,   647,   647,   647,   647,   647,   647,
     647,   647,   647,  1121,   935,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   935,   554,   647,   647,   647,   554,   647,
     647,   647,    36,   213,   554,   647,  1120,   935,   935,   647,
     647,   647,   647,   647,   647,  1131,  1131,  1131,  1121,  1524,
    1525,  1420,  1149,  1420,    16,    17,   377,   380,   634,  1125,
    1126,   159,   160,   197,   208,   248,   259,   286,   350,  1129,
      32,   140,   243,   267,   336,   430,   484,   485,   497,   638,
     639,   640,   641,   642,   643,   644,   645,  1127,  1131,    72,
     379,   649,  1418,   647,   655,   170,  1420,   701,  1420,   369,
     818,   701,  1422,   360,   618,   828,   829,  1273,  1274,  1275,
    1337,   701,  1423,  1491,  1265,  1271,   605,   669,    34,    59,
      67,   132,   157,   161,   198,   216,   230,   279,   407,   416,
     431,   449,   492,   523,   548,   558,   602,  1353,  1358,  1359,
    1459,    12,    13,    98,   129,   143,   166,   169,   182,   204,
     229,   236,   277,   409,   413,   429,   437,   445,   473,   486,
     487,   539,   576,   598,   600,  1477,  1479,  1481,  1482,    20,
     159,  1215,  1216,  1466,  1420,  1049,   496,    49,    84,   285,
    1382,    29,    29,  1413,  1460,  1461,  1074,   269,   272,   418,
     845,   847,   654,   666,  1417,   279,    30,   279,  1078,  1423,
    1079,  1080,  1413,  1061,   240,  1268,  1284,  1285,  1413,    49,
    1365,   649,    12,   413,  1474,  1479,   467,  1507,  1506,   592,
    1512,  1513,   642,  1115,  1116,  1117,  1113,  1429,  1445,  1448,
     481,   655,    34,   124,   159,   482,   949,   950,  1295,  1422,
     190,  1295,  1432,   654,  1422,    34,   124,   952,   953,  1422,
     655,  1433,  1431,  1295,   165,   267,   623,  1343,  1343,   647,
     107,   166,   196,   408,   547,   576,   617,  1343,    12,   906,
    1422,   268,  1234,  1236,   193,   243,  1338,  1340,    71,   523,
     190,  1343,   523,   544,    71,   523,    12,    42,    93,    97,
     247,   323,   386,   498,   541,  1326,  1327,  1328,   165,   216,
     523,   523,  1343,  1343,  1343,  1234,  1343,  1340,   279,   156,
      74,   410,   544,   575,   523,   613,   371,   630,    87,   649,
    1267,  1049,   649,   370,  1572,   540,  1573,   252,   452,  1571,
     648,  1513,  1515,  1517,  1518,   155,   660,  1422,  1100,  1276,
    1279,  1304,  1312,  1347,  1350,  1400,  1420,   124,   892,   893,
     903,   904,   957,   110,  1120,   654,   702,     6,   797,   702,
     647,   109,   814,   814,   814,     4,   649,   393,  1012,  1018,
     472,   617,  1540,  1266,   243,   649,   390,  1094,  1096,  1097,
     710,   711,  1121,   175,   417,   649,  1059,    58,   175,   179,
     190,   322,   417,  1070,  1071,  1072,    56,   436,   170,   682,
     797,   110,   814,   222,   649,  1117,  1117,  1117,   166,   196,
     196,  1540,  1413,   992,   993,   992,   992,  1269,  1270,  1413,
    1414,  1420,   649,  1316,   655,  1320,  1121,  1121,    12,   139,
    1156,  1217,  1156,  1156,  1156,   622,  1165,  1121,  1121,  1160,
    1160,  1121,  1121,  1121,   139,  1156,  1217,   648,   363,   648,
     648,  1121,  1121,  1121,  1121,  1409,  1524,   115,   116,   117,
     118,   119,   217,   218,   219,   220,   326,   328,   329,   330,
     337,   415,   470,   471,   620,   635,   636,  1212,  1213,  1121,
    1160,   111,   114,   559,   562,  1214,   139,  1151,  1121,  1121,
    1121,  1121,  1212,  1121,  1160,  1162,     9,   649,   655,   139,
    1156,  1121,  1121,   139,  1156,  1121,  1121,  1160,  1160,  1160,
    1121,  1121,  1121,  1160,  1124,  1121,  1121,  1121,  1121,  1121,
    1121,   648,  1121,  1156,  1156,  1121,  1121,   139,  1156,  1121,
    1213,  1213,  1121,    45,   260,   573,  1121,  1121,   648,  1410,
    1411,  1420,  1156,  1156,  1121,  1121,  1121,   648,   649,   648,
     473,   647,  1521,  1522,  1121,   654,  1150,  1422,   655,  1121,
    1121,  1121,  1123,   178,   362,   578,   594,  1127,    12,    18,
    1123,  1130,  1124,  1124,   647,  1131,  1124,  1124,  1124,  1124,
     267,  1124,  1124,   239,  1124,   239,  1124,  1124,  1124,  1124,
    1124,    32,   243,   267,   430,  1422,  1131,  1121,  1137,  1420,
     655,  1413,  1273,   649,  1275,   157,   649,  1266,  1262,   654,
     670,   671,   279,   279,   279,   279,    49,   279,   279,   649,
    1354,   407,  1480,   461,   461,   545,   551,   601,   617,   375,
    1484,   544,   369,  1486,    66,   491,  1483,   108,   617,  1485,
     369,   649,  1420,   183,   353,  1420,  1467,  1468,  1284,  1417,
    1089,   274,  1381,  1216,   649,  1266,    74,   647,   852,   853,
     852,   853,   391,   855,   210,   255,  1422,    30,   566,  1371,
     121,   185,   282,   363,   583,  1243,  1244,  1245,    30,   566,
    1370,   649,   566,   649,   566,  1266,  1285,  1281,   390,  1179,
    1180,    12,  1366,  1364,  1480,   369,   369,  1420,    12,   139,
    1520,   649,  1108,  1121,  1407,  1420,   190,   649,  1295,  1420,
      72,   955,  1121,  1423,   368,   393,   554,  1454,   249,   421,
    1449,  1450,  1451,  1452,   203,   274,   478,  1444,  1295,  1420,
     574,  1434,  1445,   649,  1436,  1447,   243,  1341,  1417,  1121,
     642,   897,   701,   701,   701,  1413,   701,  1413,   279,   341,
     523,  1335,  1335,   282,   363,   583,  1237,  1238,  1401,  1420,
    1343,  1420,   701,  1343,  1423,  1338,   701,  1343,   246,   542,
     180,   190,  1329,   649,  1341,   524,   525,  1338,  1413,  1340,
    1338,  1338,  1343,  1343,   494,  1056,   473,   647,   651,  1166,
    1167,  1168,  1169,  1170,  1181,  1182,  1196,  1400,   394,  1574,
     378,  1230,  1236,  1519,   893,    72,   948,   135,  1422,    78,
      92,   257,   334,   359,   419,   513,   704,   706,   426,   587,
     815,   816,   232,   811,   812,   813,   820,   828,   829,   107,
     215,   384,   393,   400,   495,   601,   685,   686,  1417,    25,
     314,   805,   806,   807,   820,   821,   822,   828,   829,   798,
     799,   805,  1423,   173,     6,    11,    13,    15,    26,    27,
      57,    62,    63,    70,    78,    86,    95,   110,   128,   136,
     137,   143,   151,   157,   168,   188,   227,   229,   237,   254,
     277,   313,   331,   335,   373,   378,   385,   390,   393,   424,
     438,   439,   440,   441,   463,   520,   521,   522,   529,   545,
     549,   579,   592,   839,   899,   901,   903,   904,  1024,  1028,
    1030,  1033,  1039,  1040,  1041,  1046,  1047,  1226,   369,   695,
    1020,   126,   242,  1413,   124,  1087,  1420,  1085,  1413,   841,
    1096,   229,   255,   982,  1098,   648,   649,  1267,   599,  1071,
     891,   892,    78,   354,   427,   588,   808,   809,   810,   820,
     824,   825,   826,   827,   828,   829,   629,   604,   793,    47,
     625,  1493,   196,   701,   701,   897,   701,  1420,   675,   581,
     605,  1000,   369,   369,   369,   649,  1317,  1179,   655,  1320,
    1319,   193,   642,  1420,   649,   648,  1156,   648,  1157,   648,
     648,   648,  1121,   149,   622,  1164,    20,   648,   605,   648,
     648,   648,   649,   605,   649,  1145,   648,   642,   648,   649,
     649,   648,   648,   648,   648,   193,   649,   648,   649,  1147,
     648,   649,   649,   649,   641,   649,   648,   648,   647,  1409,
    1420,  1156,   648,   648,   648,  1156,   648,   649,   648,   648,
     648,   648,   648,   648,   649,   648,   243,   648,   649,   649,
     648,   649,   649,   648,   648,   648,   649,   193,   649,  1156,
     648,   648,   649,   649,   649,   648,   193,  1121,   193,  1121,
     193,  1121,   193,   648,   649,   648,   648,   648,   648,   649,
      20,   265,   649,   972,   648,  1160,  1186,  1187,  1188,   473,
     647,  1103,  1516,  1517,   592,  1526,   652,  1444,   482,  1420,
     178,   362,   578,   594,   647,    17,  1121,  1524,   164,  1222,
    1124,  1121,  1121,  1124,   647,  1131,  1124,  1117,  1141,  1142,
    1143,   647,   655,  1420,  1263,  1275,  1295,  1296,  1423,    51,
     451,  1050,  1266,  1422,   649,  1359,  1266,  1360,   544,   647,
    1494,  1423,  1494,  1494,  1494,   196,   408,   547,  1478,  1482,
     159,   183,   197,   208,   258,   259,   286,   353,   405,  1469,
    1471,   623,  1218,  1278,  1090,  1091,  1092,  1093,  1413,   231,
     285,   421,   630,  1462,  1461,   647,  1117,   213,   282,   363,
     583,  1241,  1244,   536,   856,   846,    11,   848,  1121,  1417,
    1121,  1417,  1423,  1423,  1080,  1413,   175,   417,   603,  1062,
    1063,  1064,   473,   481,   609,   610,   647,   887,  1286,  1289,
     647,   649,  1423,   196,   408,  1478,  1514,  1116,   193,   240,
    1109,  1110,  1229,  1230,  1254,  1118,  1118,   655,   662,  1445,
      12,    34,   124,   369,  1121,  1455,   124,   954,   956,  1422,
    1295,   647,   647,   265,   371,   630,   649,   649,   655,   655,
     655,  1448,  1121,  1449,  1435,  1437,  1438,  1455,  1417,   193,
    1342,   648,  1420,   367,   649,  1343,   416,  1234,  1328,  1342,
    1343,  1338,  1413,  1343,  1343,   193,  1195,  1420,    99,   233,
     252,   263,   346,   458,   530,  1178,   481,   649,  1413,  1195,
     649,   190,  1575,    47,  1234,  1296,  1296,   344,  1417,   513,
     513,   513,   513,   513,   472,  1417,  1417,  1296,   649,   813,
    1417,  1417,  1417,  1417,   121,   185,   213,   282,   363,   583,
    1240,  1417,  1417,   648,   649,  1296,  1296,   649,   807,   800,
     801,   820,   821,   822,   393,    75,    88,   390,   915,   918,
     919,   980,   982,   990,   991,  1048,  1296,  1048,   390,  1296,
    1296,  1048,  1296,   390,   390,  1296,  1296,   566,   135,  1296,
     253,   545,   189,   390,   406,   982,  1048,   253,  1296,   390,
     545,   135,  1296,  1296,  1296,  1296,  1296,  1048,   390,    47,
    1296,   841,  1296,   390,   392,    20,   159,   566,  1052,   390,
     390,  1296,  1296,  1296,  1296,   138,   323,  1420,  1296,   390,
    1296,   899,   649,   838,   839,  1028,   647,   655,   914,   920,
    1412,  1420,    82,   468,   439,  1021,  1541,  1095,   647,  1121,
    1296,  1296,  1296,  1296,   649,   810,  1422,   278,   176,   802,
     803,   804,   820,   821,   822,   823,   826,   827,   828,   829,
     393,   554,  1422,  1420,  1564,     8,    30,   788,   701,   647,
     454,   267,   647,   831,   898,   900,   901,    46,   210,   466,
    1005,  1005,  1413,  1413,  1413,  1270,  1420,   605,  1315,  1420,
    1167,   655,  1320,   239,  1121,   648,  1121,   557,  1121,  1121,
     153,    34,    61,   111,   114,   122,   348,   489,   562,   596,
    1158,   949,  1121,   949,  1158,  1160,   648,   239,   239,  1121,
    1121,  1121,  1160,  1121,  1121,  1121,  1121,  1121,  1124,   648,
     648,  1121,  1121,  1121,  1121,  1121,  1121,  1160,   239,  1121,
    1121,  1121,   648,  1121,  1121,  1121,  1121,   193,  1121,   193,
    1121,   193,  1121,  1121,  1121,    34,    61,   967,   968,   969,
     970,   971,  1241,  1240,   648,   648,  1527,  1528,  1529,  1187,
    1103,   648,  1520,  1422,  1121,  1524,  1123,   648,   649,   648,
    1131,  1212,  1212,    17,  1121,  1524,  1222,  1121,   648,   649,
    1159,  1160,  1420,  1264,   905,  1422,  1050,   671,  1355,  1420,
    1495,  1496,   566,   642,  1413,  1420,  1490,  1490,  1490,  1470,
    1219,  1235,  1236,  1286,   649,  1094,  1096,   554,  1419,   630,
     274,   849,   850,   851,  1420,   861,  1124,    47,   647,   863,
     853,   159,   647,   566,  1063,   888,  1287,   647,  1292,  1297,
    1292,   648,   887,  1288,  1406,  1407,  1410,  1420,  1290,  1211,
    1420,   204,   193,  1490,  1490,  1490,  1101,   144,  1167,  1255,
     190,   277,  1114,  1254,  1235,  1110,    20,  1119,  1417,  1420,
     642,  1420,  1454,   554,   554,   421,   442,   476,  1453,  1451,
    1450,  1295,  1436,   649,  1440,  1442,  1446,   121,   185,   282,
     363,   583,  1242,  1333,   162,   619,  1238,  1238,   363,  1334,
    1218,  1338,   478,  1183,  1190,  1195,  1166,   252,   252,   381,
    1197,   252,   263,   458,  1197,  1181,  1166,  1307,  1308,  1410,
    1168,  1179,  1192,  1193,  1240,   327,  1231,   956,   950,   110,
     110,   126,   242,   830,  1243,  1416,   813,   686,   830,   830,
     807,   649,   801,   173,  1008,  1412,  1075,    63,   189,   406,
     917,   981,   986,  1008,   982,   983,   983,   124,  1420,  1412,
    1075,  1242,  1240,  1412,  1240,    12,  1029,  1037,  1038,  1420,
    1075,  1417,  1417,   948,  1296,  1240,   255,  1037,   255,  1412,
    1412,   905,  1038,  1296,   183,   258,   359,   908,  1240,   124,
    1420,  1242,  1242,  1412,  1075,  1227,  1228,  1410,   124,  1240,
     840,  1417,  1075,   841,  1413,  1075,  1075,    81,    83,   124,
     147,   184,   428,   567,   568,   569,   570,   571,   572,   907,
     124,  1240,   124,  1240,   124,  1240,  1240,  1029,   902,     6,
     143,  1041,   911,   912,   913,   914,   915,  1420,     8,   183,
    1051,   429,   916,   917,   974,   921,   655,   357,   404,    24,
     167,   689,   566,   136,   151,   691,   647,  1542,   647,   406,
    1208,  1209,  1210,  1420,  1417,  1241,   830,   830,   810,   374,
     206,  1296,   649,   804,   554,    20,   454,   647,   129,   236,
     598,   789,   688,  1558,   122,   241,   423,   531,   910,  1413,
     267,   832,   837,   838,   911,   837,   649,   900,   676,   678,
     680,   655,  1167,  1218,  1320,  1218,  1121,   648,  1121,   557,
     647,   939,   940,   940,   647,   934,   647,   932,   933,   939,
     940,   241,   934,   241,   648,   648,   648,   648,   648,  1146,
    1121,  1121,   648,   648,   649,   648,   378,  1153,   649,   649,
     648,   649,   648,   243,  1138,  1139,   648,   648,   648,   648,
     649,   648,   648,  1121,   648,   190,   648,   648,   649,   648,
     649,   649,   648,  1121,   648,  1121,   648,  1121,   648,   648,
     648,   647,   962,   962,    21,   130,   456,   640,   964,   965,
     966,   649,   649,  1115,  1529,   648,  1523,   655,  1009,   648,
    1160,  1123,   648,   649,   648,  1118,  1143,   648,  1045,  1046,
    1047,   190,   625,  1356,   648,   649,  1492,   655,   655,   566,
     566,   566,   647,  1121,   369,  1302,  1092,  1413,  1096,   225,
    1099,  1377,   648,   649,  1118,   847,   390,   864,   865,  1241,
     849,  1423,  1111,  1293,  1294,  1410,  1298,   649,   647,  1289,
     648,   648,   649,   655,  1512,   648,   649,   375,  1492,   193,
     193,   193,  1218,  1218,   145,   382,  1250,  1251,  1256,   598,
     243,  1417,  1420,   655,   648,   648,    79,   584,   421,  1455,
    1439,  1441,  1234,  1234,  1343,  1121,   592,   648,  1516,  1191,
     652,   252,  1181,  1197,  1197,   252,   369,   369,   605,   649,
    1306,  1295,  1216,  1111,  1121,  1232,  1408,   801,  1031,   647,
     255,   255,  1008,   983,   993,  1008,  1008,   143,   481,  1029,
    1042,  1026,   649,  1241,   950,  1417,  1412,  1050,   625,  1417,
    1043,  1029,   649,    21,   130,  1233,   844,  1029,  1034,  1029,
     647,   648,   649,  1420,  1413,    33,    34,    39,    41,    43,
      44,    61,   111,   114,   122,   141,   158,   184,   186,   199,
     200,   241,   271,   280,   281,   283,   319,   320,   321,   338,
     339,   340,   345,   348,   365,   366,   398,   399,   423,   477,
     481,   493,   555,   559,   562,   563,   564,   565,   611,   612,
     636,   922,   925,   926,   927,   928,   929,   930,   931,  1420,
     404,  1121,  1121,   369,   695,   701,   369,    78,   696,  1420,
    1543,    20,  1029,   648,   649,   647,  1420,   830,   804,  1417,
     910,  1565,   369,   369,   712,   713,   715,  1420,   496,  1413,
     887,   648,   225,   444,   834,  1383,   900,   647,   647,   647,
    1420,  1218,  1229,  1212,  1121,   121,   282,   363,   583,    22,
      34,    48,   590,   948,   958,   959,   960,   363,   363,   648,
    1212,  1212,  1121,    47,   475,  1152,  1121,  1121,  1160,    43,
     346,   648,   625,  1140,  1121,  1212,  1121,  1121,  1121,  1121,
     648,   648,   648,  1241,   648,   972,   967,   965,   967,   968,
    1240,  1189,  1521,  1420,   648,  1160,  1119,  1047,  1046,  1357,
     421,  1496,   625,  1499,   642,   642,  1492,  1492,  1492,   124,
    1121,  1300,  1301,   146,  1099,   261,  1383,   851,   648,   210,
     255,   866,   648,   649,   648,  1115,   649,  1295,  1299,  1300,
    1297,  1291,  1289,  1406,  1420,   841,  1420,   193,  1492,  1492,
    1492,  1235,   206,  1223,  1419,  1419,   654,  1252,  1253,  1422,
     483,   642,  1440,  1445,  1520,  1216,  1169,  1166,  1181,   252,
     252,  1166,  1181,  1172,  1171,  1173,  1308,  1218,  1301,  1206,
    1207,  1115,   649,  1233,   391,   647,  1032,  1121,  1008,   993,
     647,   992,   992,   124,   124,   920,  1070,  1038,   955,   547,
     922,  1025,  1228,  1035,  1037,  1027,  1360,   913,   647,   975,
     939,   939,   940,   934,   932,   402,   923,   932,   932,   960,
      61,   611,   926,   928,   960,   960,    61,   612,   612,   615,
     932,   924,   940,   934,   934,   960,   939,   940,    26,    72,
      76,    78,   124,   362,   369,   406,   477,   529,   942,   943,
     944,   973,   986,  1127,   615,   939,   960,    34,   939,   961,
     939,   939,   940,   647,   933,   941,   655,  1212,   491,  1417,
     142,  1022,   648,   649,  1544,  1545,   648,  1209,   685,   496,
     234,   243,   383,   716,   717,   718,   719,  1117,   468,   648,
     649,   714,  1417,   648,   648,   898,    20,   890,  1006,  1007,
    1420,  1006,  1006,   268,  1239,   648,   648,   648,   648,   648,
      34,    22,   590,   948,    34,   949,   648,   649,   648,   648,
     648,  1154,  1400,   648,   648,   649,   648,   333,   257,   416,
     648,   648,   648,   648,   648,   648,   963,   648,   649,   909,
    1110,  1235,  1516,   648,   174,   277,   204,   446,  1497,  1497,
    1497,   648,   649,  1303,   240,   647,   854,   848,   867,  1420,
     865,   889,  1294,  1301,   648,  1515,  1492,    47,   211,  1220,
    1257,  1422,   649,   333,  1184,   369,  1175,  1181,  1181,   369,
    1177,  1121,  1121,   647,  1229,  1204,  1205,  1194,  1408,  1241,
     864,   648,   647,   647,  1006,   647,   647,   114,   559,   562,
     640,   641,  1402,  1403,  1051,  1413,   942,  1075,  1036,  1062,
     648,   976,  1420,   310,   977,   489,   596,   637,   936,   937,
     938,   647,   936,   936,   960,   615,   936,   647,   960,   936,
     954,   124,   147,   184,  1417,   946,   947,  1402,   598,   124,
     124,   138,   323,   944,   255,   255,   362,   960,   961,   960,
     961,   936,   363,   936,  1420,   690,   697,   698,  1420,   473,
     647,  1546,  1549,   648,  1417,   648,   649,   714,  1553,   689,
    1559,   715,   922,   945,   833,   837,   647,   887,   648,   649,
    1233,   647,   648,   648,  1238,   949,   961,   363,  1155,  1408,
    1121,   333,   172,   648,  1240,  1114,  1114,   375,    64,   250,
     355,   515,   534,   631,  1488,  1489,   625,  1498,  1498,  1498,
    1301,   255,   547,  1117,   857,   647,   609,   868,   909,  1224,
    1408,  1221,  1229,   948,   951,  1253,  1521,  1174,   605,  1176,
     605,  1211,  1239,   188,   225,   604,  1199,  1200,  1203,   909,
    1233,   648,  1006,  1006,   648,  1006,  1006,  1404,  1404,   841,
    1044,   240,   648,   649,   194,   389,   490,   369,   978,   938,
    1010,  1400,  1010,   946,   610,   517,   692,    53,    68,   181,
     224,   251,   262,   372,   455,   699,   738,   740,   741,   742,
     744,   745,   746,   747,   748,   749,   751,   759,   760,   763,
     774,   777,   779,   780,  1416,  1421,  1425,  1550,   647,  1548,
    1549,   625,  1551,  1547,  1566,   718,  1420,  1413,   694,   695,
     454,   955,  1515,   834,   887,   835,    78,   254,   994,   997,
    1000,  1001,  1002,  1007,   363,   625,   995,   999,  1001,  1004,
     996,   998,  1001,  1003,   648,   649,  1233,   648,   648,   554,
     554,   554,    17,  1487,   204,   311,   312,   316,   317,  1500,
    1501,   598,  1413,   861,   535,   862,   859,   860,  1420,   243,
     264,    78,   110,   229,   313,   331,   354,   545,   884,   885,
     886,  1337,   626,   627,   649,  1225,  1233,  1121,  1235,   950,
    1258,  1185,  1121,   647,  1121,   647,   648,   982,   982,  1200,
     648,   648,   994,   648,   648,  1051,   647,  1420,   129,   598,
     648,   649,   648,  1121,   154,   693,   761,   764,  1420,   193,
     353,   752,   739,  1421,  1421,  1420,   743,   662,   284,   443,
     624,   783,    31,   781,   656,  1106,  1548,   648,    52,    63,
     274,  1512,   703,   945,   190,   691,  1560,   648,  1512,  1417,
    1296,   677,  1002,  1233,   648,   388,   679,  1004,   681,  1003,
    1408,  1488,   375,  1240,  1240,  1240,  1240,  1501,  1309,  1310,
    1410,  1179,  1118,  1241,   648,   649,   870,   556,  1296,   135,
     135,  1296,  1296,  1296,  1296,   647,   879,   886,   157,  1408,
     408,  1246,    74,  1384,  1516,  1211,  1211,   190,  1198,  1198,
     974,   994,   995,   996,   864,    51,   359,   451,   481,   979,
     979,   960,  1400,   960,  1121,  1121,   622,   766,   770,   193,
    1420,   754,   755,  1121,   721,   737,   738,   740,   742,   744,
     746,   747,   748,   749,   751,   759,   774,   777,   779,   721,
     784,   782,   775,   778,   648,  1515,    63,   375,    63,   133,
     704,   705,  1127,  1567,  1117,   696,   945,   836,  1240,  1045,
    1416,  1045,  1045,  1233,   649,  1295,  1378,   648,   858,   860,
     647,   872,   874,   869,  1417,  1296,  1296,  1243,  1243,  1241,
    1422,   536,   880,   881,  1296,  1233,    14,   152,   163,   376,
     553,  1385,  1386,   270,  1387,   648,   648,   206,   252,   378,
    1202,  1201,   648,     5,   124,   362,   369,   369,   762,   771,
     149,   770,   773,   240,   153,  1121,   153,   737,   653,   597,
    1121,   722,   783,   781,   375,   375,   133,   737,  1554,   142,
    1561,  1515,  1310,  1301,   951,   862,   647,   873,   874,   875,
     318,   871,   874,  1417,  1417,   882,   648,   649,   905,  1247,
      47,    47,   152,    47,  1386,   516,   553,  1388,  1389,    47,
      47,   647,   647,   598,   129,   622,   765,   767,  1121,   721,
     153,   750,   224,   756,   284,   653,   786,   785,   123,   720,
     723,   776,  1421,   776,   148,   697,   703,  1379,   648,   649,
     318,   877,   878,  1124,   883,  1422,   881,   647,  1400,  1400,
      47,  1400,    47,    47,  1389,  1208,  1210,   979,   979,   768,
     767,   773,   772,    53,   753,  1420,   557,  1121,   142,    94,
     171,   727,   734,  1420,   153,   737,   653,   464,  1562,   462,
    1390,   874,   649,   876,   884,   363,  1248,  1249,  1400,  1400,
    1400,   648,   648,  1121,   153,   557,   649,   721,   787,   721,
     209,   649,   724,    85,   104,   653,  1555,   737,   222,  1384,
     878,   648,   648,   649,   769,    53,   721,  1420,   757,   153,
     153,   190,  1420,   945,   190,   190,   737,    47,  1387,  1249,
     557,   149,   150,   758,   443,   624,   725,   124,   735,   502,
     730,   731,  1240,   726,  1400,   225,  1391,   721,   721,   754,
     501,   503,   728,   729,   730,   733,  1127,  1420,   736,   610,
     732,  1100,   363,   647,  1393,   649,   737,   192,  1121,  1418,
     270,   462,  1392,   648,   654,  1394,  1395,  1410,   481,  1396,
     729,  1422,   648,   649,  1397,  1398,  1410,  1395,   649,  1295,
    1398,  1117,  1301,  1118
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YYTHD, YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, YYTHD)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, YYTHD); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, class THD *YYTHD)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, YYTHD)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    class THD *YYTHD;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (YYTHD);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, class THD *YYTHD)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, YYTHD)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    class THD *YYTHD;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, YYTHD);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule, class THD *YYTHD)
#else
static void
yy_reduce_print (yyvsp, yyrule, YYTHD)
    YYSTYPE *yyvsp;
    int yyrule;
    class THD *YYTHD;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       , YYTHD);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule, YYTHD); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, class THD *YYTHD)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, YYTHD)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    class THD *YYTHD;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (YYTHD);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (class THD *YYTHD);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */





/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (class THD *YYTHD)
#else
int
yyparse (YYTHD)
    class THD *YYTHD;
#endif
#endif
{
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1455 of yacc.c  */
#line 1899 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:

/* Line 1455 of yacc.c  */
#line 1911 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((YYTHD->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:

/* Line 1455 of yacc.c  */
#line 1936 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 57:

/* Line 1455 of yacc.c  */
#line 2005 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 60:

/* Line 1455 of yacc.c  */
#line 2020 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
            /*
              We don't know know at this time whether there's a password
              in prepare_src, so we err on the side of caution.  Setting
              the flag will force a rewrite which will obscure all of
              prepare_src in the "Query" log line.  We'll see the actual
              query (with just the passwords obscured, if any) immediately
              afterwards in the "Prepare" log lines anyway, and then again
              in the "Execute" log line if and when prepare_src is executed.
            */
            lex->contains_plaintext_password= true;
          }
    break;

  case 61:

/* Line 1455 of yacc.c  */
#line 2040 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 62:

/* Line 1455 of yacc.c  */
#line 2047 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 63:

/* Line 1455 of yacc.c  */
#line 2057 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 64:

/* Line 1455 of yacc.c  */
#line 2064 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 69:

/* Line 1455 of yacc.c  */
#line 2079 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
    break;

  case 70:

/* Line 1455 of yacc.c  */
#line 2091 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
    break;

  case 71:

/* Line 1455 of yacc.c  */
#line 2099 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 72:

/* Line 1455 of yacc.c  */
#line 2110 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            /*
              Instruct open_table() to acquire SHARED lock to check the
              existance of table. If the table does not exist then
              it will be upgraded EXCLUSIVE MDL lock. If table exist
              then open_table() will return with an error or warning.
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_FOR_CREATE;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            memset(&lex->create_info, 0, sizeof(lex->create_info));
            lex->create_info.options=(yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num);
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->create_last_non_select_table= lex->last_table();
          }
    break;

  case 73:

/* Line 1455 of yacc.c  */
#line 2135 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->current_select= &lex->select_lex;
            create_table_set_open_action_and_adjust_tables(lex);
          }
    break;

  case 74:

/* Line 1455 of yacc.c  */
#line 2142 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 75:

/* Line 1455 of yacc.c  */
#line 2147 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 76:

/* Line 1455 of yacc.c  */
#line 2151 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { }
    break;

  case 77:

/* Line 1455 of yacc.c  */
#line 2154 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 78:

/* Line 1455 of yacc.c  */
#line 2159 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 79:

/* Line 1455 of yacc.c  */
#line 2163 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { }
    break;

  case 80:

/* Line 1455 of yacc.c  */
#line 2166 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 81:

/* Line 1455 of yacc.c  */
#line 2171 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 82:

/* Line 1455 of yacc.c  */
#line 2175 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { }
    break;

  case 83:

/* Line 1455 of yacc.c  */
#line 2177 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 84:

/* Line 1455 of yacc.c  */
#line 2182 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[(4) - (6)].lex_str);
            lex->create_info.options=(yyvsp[(3) - (6)].num);
          }
    break;

  case 85:

/* Line 1455 of yacc.c  */
#line 2189 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->create_view_mode= VIEW_CREATE_NEW;
            Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 86:

/* Line 1455 of yacc.c  */
#line 2195 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 87:

/* Line 1455 of yacc.c  */
#line 2197 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 88:

/* Line 1455 of yacc.c  */
#line 2201 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 89:

/* Line 1455 of yacc.c  */
#line 2205 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 90:

/* Line 1455 of yacc.c  */
#line 2209 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
    break;

  case 91:

/* Line 1455 of yacc.c  */
#line 2220 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->server_options.server_name= (yyvsp[(2) - (10)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(2) - (10)].lex_str).length;
            Lex->server_options.scheme= (yyvsp[(6) - (10)].lex_str).str;
          }
    break;

  case 94:

/* Line 1455 of yacc.c  */
#line 2234 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 95:

/* Line 1455 of yacc.c  */
#line 2238 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 96:

/* Line 1455 of yacc.c  */
#line 2242 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 97:

/* Line 1455 of yacc.c  */
#line 2246 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 98:

/* Line 1455 of yacc.c  */
#line 2250 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str).str;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 99:

/* Line 1455 of yacc.c  */
#line 2255 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 100:

/* Line 1455 of yacc.c  */
#line 2259 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 101:

/* Line 1455 of yacc.c  */
#line 2266 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->create_info.options= (yyvsp[(3) - (4)].num);
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 102:

/* Line 1455 of yacc.c  */
#line 2286 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 103:

/* Line 1455 of yacc.c  */
#line 2297 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 105:

/* Line 1455 of yacc.c  */
#line 2304 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 106:

/* Line 1455 of yacc.c  */
#line 2310 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 107:

/* Line 1455 of yacc.c  */
#line 2312 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 108:

/* Line 1455 of yacc.c  */
#line 2318 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
    break;

  case 109:

/* Line 1455 of yacc.c  */
#line 2324 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 110:

/* Line 1455 of yacc.c  */
#line 2333 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local(0);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 111:

/* Line 1455 of yacc.c  */
#line 2340 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 113:

/* Line 1455 of yacc.c  */
#line 2348 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 114:

/* Line 1455 of yacc.c  */
#line 2354 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 116:

/* Line 1455 of yacc.c  */
#line 2360 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 117:

/* Line 1455 of yacc.c  */
#line 2366 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
    break;

  case 118:

/* Line 1455 of yacc.c  */
#line 2374 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 119:

/* Line 1455 of yacc.c  */
#line 2376 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 120:

/* Line 1455 of yacc.c  */
#line 2383 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }

            sp_head *sp= sp_start_parsing(thd,
                                          SP_TYPE_PROCEDURE,
                                          lex->event_parse_data->identifier);

            if (!sp)
              MYSQL_YYABORT;

            lex->sphead= sp;

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
            sp->m_chistics= &lex->sp_chistics;

            sp->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 121:

/* Line 1455 of yacc.c  */
#line 2426 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            sp_finish_parsing(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!
            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 135:

/* Line 1455 of yacc.c  */
#line 2455 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           memset(&(lex->mqh), 0, sizeof(lex->mqh));
         }
    break;

  case 136:

/* Line 1455 of yacc.c  */
#line 2470 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str ||
                (check_and_convert_db_name(&(yyvsp[(1) - (3)].lex_str), FALSE) != IDENT_NAME_OK))
              MYSQL_YYABORT;
            if (sp_check_name(&(yyvsp[(3) - (3)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(YYTHD);
          }
    break;

  case 137:

/* Line 1455 of yacc.c  */
#line 2484 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (sp_check_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 138:

/* Line 1455 of yacc.c  */
#line 2502 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 139:

/* Line 1455 of yacc.c  */
#line 2503 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 140:

/* Line 1455 of yacc.c  */
#line 2507 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 141:

/* Line 1455 of yacc.c  */
#line 2508 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 142:

/* Line 1455 of yacc.c  */
#line 2514 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 143:

/* Line 1455 of yacc.c  */
#line 2516 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 144:

/* Line 1455 of yacc.c  */
#line 2518 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 145:

/* Line 1455 of yacc.c  */
#line 2520 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 146:

/* Line 1455 of yacc.c  */
#line 2522 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 147:

/* Line 1455 of yacc.c  */
#line 2524 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 148:

/* Line 1455 of yacc.c  */
#line 2526 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 149:

/* Line 1455 of yacc.c  */
#line 2531 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { }
    break;

  case 150:

/* Line 1455 of yacc.c  */
#line 2532 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 151:

/* Line 1455 of yacc.c  */
#line 2533 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 152:

/* Line 1455 of yacc.c  */
#line 2538 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 153:

/* Line 1455 of yacc.c  */
#line 2542 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 154:

/* Line 1455 of yacc.c  */
#line 2549 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
          }
    break;

  case 155:

/* Line 1455 of yacc.c  */
#line 2556 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 160:

/* Line 1455 of yacc.c  */
#line 2572 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item));
          }
    break;

  case 161:

/* Line 1455 of yacc.c  */
#line 2576 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 166:

/* Line 1455 of yacc.c  */
#line 2594 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
          }
    break;

  case 167:

/* Line 1455 of yacc.c  */
#line 2614 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(1) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_variable *spvar= pctx->add_variable(thd,
                                                   (yyvsp[(1) - (3)].lex_str),
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   sp_variable::MODE_IN);

            if (fill_field_definition(thd, sp,
                                      (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                      &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 172:

/* Line 1455 of yacc.c  */
#line 2655 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(3) - (4)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable *spvar= pctx->add_variable(thd,
                                                   (yyvsp[(3) - (4)].lex_str),
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   (sp_variable::enum_mode) (yyvsp[(1) - (4)].num));

            if (fill_field_definition(thd, sp,
                                      (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                      &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 173:

/* Line 1455 of yacc.c  */
#line 2683 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_IN; }
    break;

  case 174:

/* Line 1455 of yacc.c  */
#line 2684 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_IN; }
    break;

  case 175:

/* Line 1455 of yacc.c  */
#line 2685 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_OUT; }
    break;

  case 176:

/* Line 1455 of yacc.c  */
#line 2686 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_INOUT; }
    break;

  case 177:

/* Line 1455 of yacc.c  */
#line 2690 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 179:

/* Line 1455 of yacc.c  */
#line 2695 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 181:

/* Line 1455 of yacc.c  */
#line 2701 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 182:

/* Line 1455 of yacc.c  */
#line 2705 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 183:

/* Line 1455 of yacc.c  */
#line 2731 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp->reset_lex(thd);
            pctx->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 184:

/* Line 1455 of yacc.c  */
#line 2742 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            LEX_STRING dflt_value_query= EMPTY_STR;

            if (dflt_value_item)
            {
              // sp_opt_default only pushes start ptr for DEFAULT clause.
              const char *expr_start_ptr=
                sp->m_parser_data.pop_expr_start_ptr();
              if (lex->is_metadata_used())
              {
                dflt_value_query= make_string(thd, expr_start_ptr,
                                              YY_TOKEN_END);
                if (!dflt_value_query.str)
                  MYSQL_YYABORT;
              }
            }
            else
            {
              dflt_value_item= new (thd->mem_root) Item_null();

              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
            }

            // We can have several variables in DECLARE statement.
            // We need to create an sp_instr_set instruction for each variable.

            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable *spvar= pctx->find_variable(var_idx);

              if (!spvar)
                MYSQL_YYABORT;

              spvar->type= var_type;
              spvar->default_value= dflt_value_item;

              if (fill_field_definition(thd, sp, var_type, &spvar->field_def))
                MYSQL_YYABORT;

              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;

              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is=
                new (thd->mem_root)
                  sp_instr_set(sp->instructions(),
                               lex,
                               var_idx,
                               dflt_value_item,
                               dflt_value_query,
                               (i == num_vars - 1));

              if (!is || sp->add_instr(thd, is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 185:

/* Line 1455 of yacc.c  */
#line 2815 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_condition((yyvsp[(2) - (5)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if(pctx->add_condition(thd, (yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondvalue)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 186:

/* Line 1455 of yacc.c  */
#line 2831 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp_pcontext *parent_pctx= lex->get_sp_current_parsing_ctx();

            sp_pcontext *handler_pctx=
              parent_pctx->push_context(thd, sp_pcontext::HANDLER_SCOPE);

            sp_handler *h=
              parent_pctx->add_handler(thd, (sp_handler::enum_type) (yyvsp[(2) - (4)].num));

            lex->set_sp_current_parsing_ctx(handler_pctx);

            sp_instr_hpush_jump *i=
              new (thd->mem_root)
                sp_instr_hpush_jump(sp->instructions(), handler_pctx, h);
            
            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;

            if ((yyvsp[(2) - (4)].num) == sp_handler::CONTINUE)
            {
              // Mark the end of CONTINUE handler scope.

              if (sp->m_parser_data.add_backpatch_entry(
                    i, handler_pctx->last_label()))
              {
                MYSQL_YYABORT;
              }
            }

            if (sp->m_parser_data.add_backpatch_entry(
                  i, handler_pctx->push_label(thd, EMPTY_STR, 0)))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 187:

/* Line 1455 of yacc.c  */
#line 2871 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *hlab= pctx->pop_label(); /* After this hdlr */

            if ((yyvsp[(2) - (7)].num) == sp_handler::CONTINUE)
            {
              sp_instr_hreturn *i=
                new (thd->mem_root) sp_instr_hreturn(sp->instructions(), pctx);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              sp_instr_hreturn *i=
                new (thd->mem_root) sp_instr_hreturn(sp->instructions(), pctx);

              if (i == NULL ||
                  sp->add_instr(thd, i) ||
                  sp->m_parser_data.add_backpatch_entry(i, pctx->last_label()))
                MYSQL_YYABORT;
            }

            sp->m_parser_data.do_backpatch(hlab, sp->instructions());

            lex->set_sp_current_parsing_ctx(pctx->pop_context());

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= 1;
          }
    break;

  case 188:

/* Line 1455 of yacc.c  */
#line 2905 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.set_current_stmt_start_ptr(YY_TOKEN_END);
          }
    break;

  case 189:

/* Line 1455 of yacc.c  */
#line 2914 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *cursor_lex= Lex;
            sp_head *sp= cursor_lex->sphead;

            DBUG_ASSERT(cursor_lex->sql_command == SQLCOM_SELECT);

            if (cursor_lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }

            cursor_lex->sp_lex_in_use= true;

            if (sp->restore_lex(thd))
              MYSQL_YYABORT;

            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            uint offp;

            if (pctx->find_cursor((yyvsp[(2) - (6)].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (6)].lex_str).str);
              delete cursor_lex;
              MYSQL_YYABORT;
            }

            LEX_STRING cursor_query= EMPTY_STR;

            if (cursor_lex->is_metadata_used())
            {
              cursor_query=
                make_string(thd,
                            sp->m_parser_data.get_current_stmt_start_ptr(),
                            YY_TOKEN_END);

              if (!cursor_query.str)
                MYSQL_YYABORT;
            }

            sp_instr_cpush *i=
              new (thd->mem_root)
                sp_instr_cpush(sp->instructions(), pctx,
                               cursor_lex, cursor_query,
                               pctx->current_cursor_count());

            if (i == NULL ||
                sp->add_instr(thd, i) ||
                pctx->add_cursor((yyvsp[(2) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 190:

/* Line 1455 of yacc.c  */
#line 2977 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= sp_handler::EXIT; }
    break;

  case 191:

/* Line 1455 of yacc.c  */
#line 2978 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= sp_handler::CONTINUE; }
    break;

  case 192:

/* Line 1455 of yacc.c  */
#line 2984 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 193:

/* Line 1455 of yacc.c  */
#line 2986 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 194:

/* Line 1455 of yacc.c  */
#line 2991 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_pcontext *parent_pctx= pctx->parent_context();

            if (parent_pctx->check_duplicate_handler((yyvsp[(1) - (1)].spcondvalue)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[(1) - (1)].spcondvalue));
            }
          }
    break;

  case 195:

/* Line 1455 of yacc.c  */
#line 3014 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { /* mysql errno */
            if ((yyvsp[(1) - (1)].ulong_num) == 0)
            {
              my_error(ER_WRONG_VALUE, MYF(0), "CONDITION", "0");
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value((yyvsp[(1) - (1)].ulong_num));
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 197:

/* Line 1455 of yacc.c  */
#line 3029 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { /* SQLSTATE */

            /*
              An error is triggered:
                - if the specified string is not a valid SQLSTATE,
                - or if it represents the completion condition -- it is not
                  allowed to SIGNAL, or declare a handler for the completion
                  condition.
            */
            if (!is_sqlstate_valid(&(yyvsp[(3) - (3)].lex_str)) || is_sqlstate_completion((yyvsp[(3) - (3)].lex_str).str))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value((yyvsp[(3) - (3)].lex_str).str);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 198:

/* Line 1455 of yacc.c  */
#line 3050 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 199:

/* Line 1455 of yacc.c  */
#line 3051 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 200:

/* Line 1455 of yacc.c  */
#line 3056 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue);
          }
    break;

  case 201:

/* Line 1455 of yacc.c  */
#line 3060 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            (yyval.spcondvalue)= pctx->find_condition((yyvsp[(1) - (1)].lex_str), false);

            if ((yyval.spcondvalue) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 202:

/* Line 1455 of yacc.c  */
#line 3073 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::WARNING);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 203:

/* Line 1455 of yacc.c  */
#line 3079 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::NOT_FOUND);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 204:

/* Line 1455 of yacc.c  */
#line 3085 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::EXCEPTION);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 205:

/* Line 1455 of yacc.c  */
#line 3095 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(1) - (1)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            pctx->add_variable(thd,
                               (yyvsp[(1) - (1)].lex_str),
                               MYSQL_TYPE_DECIMAL,
                               sp_variable::MODE_IN);
            (yyval.num)= 1;
          }
    break;

  case 206:

/* Line 1455 of yacc.c  */
#line 3115 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(3) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            pctx->add_variable(thd,
                               (yyvsp[(3) - (3)].lex_str),
                               MYSQL_TYPE_DECIMAL,
                               sp_variable::MODE_IN);
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 207:

/* Line 1455 of yacc.c  */
#line 3138 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 208:

/* Line 1455 of yacc.c  */
#line 3140 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->sphead->m_parser_data.push_expr_start_ptr(YY_TOKEN_END); }
    break;

  case 209:

/* Line 1455 of yacc.c  */
#line 3142 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(3) - (3)].item); }
    break;

  case 223:

/* Line 1455 of yacc.c  */
#line 3163 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->sphead->m_parser_data.new_cont_backpatch(); }
    break;

  case 224:

/* Line 1455 of yacc.c  */
#line 3165 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;

            sp->m_parser_data.do_cont_backpatch(sp->instructions());
          }
    break;

  case 225:

/* Line 1455 of yacc.c  */
#line 3173 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.set_current_stmt_start_ptr(lip->get_tok_start());
          }
    break;

  case 226:

/* Line 1455 of yacc.c  */
#line 3183 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              /* Extract the query statement from the tokenizer. */

              LEX_STRING query=
                make_string(thd,
                            sp->m_parser_data.get_current_stmt_start_ptr(),
                            YY_TOKEN_END);

              if (!query.str)
                MYSQL_YYABORT;

              /* Add instruction. */

              sp_instr_stmt *i=
                new (thd->mem_root)
                  sp_instr_stmt(sp->instructions(), lex, query);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }

            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 227:

/* Line 1455 of yacc.c  */
#line 3230 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);

            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 228:

/* Line 1455 of yacc.c  */
#line 3240 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            /* Check that this is a stored function. */

            if (sp->m_type != SP_TYPE_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }

            /* Indicate that we've reached RETURN statement. */

            sp->m_flags|= sp_head::HAS_RETURN;

            /* Add instruction. */

            sp_instr_freturn *i=
              new (thd->mem_root)
                sp_instr_freturn(sp->instructions(), lex, (yyvsp[(3) - (3)].item), expr_query,
                                 sp->m_return_field_def.sql_type);

            if (i == NULL ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 229:

/* Line 1455 of yacc.c  */
#line 3286 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            pctx->push_label(thd,
                             EMPTY_STR,
                             sp->instructions());
          }
    break;

  case 230:

/* Line 1455 of yacc.c  */
#line 3297 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp->m_parser_data.do_backpatch(pctx->pop_label(),
                                           sp->instructions());
          }
    break;

  case 231:

/* Line 1455 of yacc.c  */
#line 3309 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            uint ip= sp->instructions();

            /*
              When jumping to a BEGIN-END block end, the target jump
              points to the block hpop/cpop cleanup instructions,
              so we should exclude the block context here.
              When jumping to something else (i.e., sp_label::ITERATION),
              there are no hpop/cpop at the jump destination,
              so we should include the block context here for cleanup.
            */
            bool exclusive= (lab->type == sp_label::BEGIN);

            uint n= pctx->diff_handlers(lab->ctx, exclusive);

            if (n)
            {
              sp_instr_hpop *hpop=
                new (thd->mem_root) sp_instr_hpop(ip++, pctx);

              if (!hpop || sp->add_instr(thd, hpop))
                MYSQL_YYABORT;
            }

            n= pctx->diff_cursors(lab->ctx, exclusive);

            if (n)
            {
              sp_instr_cpop *cpop=
                new (thd->mem_root) sp_instr_cpop(ip++, pctx, n);

              if (!cpop || sp->add_instr(thd, cpop))
                MYSQL_YYABORT;
            }

            sp_instr_jump *i= new (thd->mem_root) sp_instr_jump(ip, pctx);

            if (!i ||
                /* Jumping forward */
                sp->m_parser_data.add_backpatch_entry(i, lab) ||
                sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 232:

/* Line 1455 of yacc.c  */
#line 3368 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab || lab->type != sp_label::ITERATION)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            uint ip= sp->instructions();

            /* Inclusive the dest. */
            uint n= pctx->diff_handlers(lab->ctx, FALSE);

            if (n)
            {
              sp_instr_hpop *hpop=
                new (thd->mem_root) sp_instr_hpop(ip++, pctx);

              if (!hpop || sp->add_instr(thd, hpop))
                MYSQL_YYABORT;
            }

            /* Inclusive the dest. */
            n= pctx->diff_cursors(lab->ctx, FALSE);

            if (n)
            {
              sp_instr_cpop *cpop=
                new (thd->mem_root) sp_instr_cpop(ip++, pctx, n);

              if (!cpop || sp->add_instr(thd, cpop))
                MYSQL_YYABORT;
            }

            /* Jump back */
            sp_instr_jump *i=
              new (thd->mem_root) sp_instr_jump(ip, pctx, lab->ip);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 233:

/* Line 1455 of yacc.c  */
#line 3418 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint offset;

            if (! pctx->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_instr_copen *i=
              new (thd->mem_root)
                sp_instr_copen(sp->instructions(), pctx, offset);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 234:

/* Line 1455 of yacc.c  */
#line 3442 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint offset;

            if (! pctx->find_cursor((yyvsp[(3) - (4)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_instr_cfetch *i=
              new (thd->mem_root)
                sp_instr_cfetch(sp->instructions(), pctx, offset);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 235:

/* Line 1455 of yacc.c  */
#line 3463 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 236:

/* Line 1455 of yacc.c  */
#line 3468 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint offset;

            if (! pctx->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_instr_cclose *i=
              new (thd->mem_root)
                sp_instr_cclose(sp->instructions(), pctx, offset);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 240:

/* Line 1455 of yacc.c  */
#line 3498 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (!pctx || !(spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            /* An SP local variable */
            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

            i->add_to_varlist(spv);
          }
    break;

  case 241:

/* Line 1455 of yacc.c  */
#line 3516 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (!pctx || !(spv= pctx->find_variable((yyvsp[(3) - (3)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            /* An SP local variable */
            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

            i->add_to_varlist(spv);
          }
    break;

  case 242:

/* Line 1455 of yacc.c  */
#line 3536 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 243:

/* Line 1455 of yacc.c  */
#line 3545 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            sp_instr_jump_if_not *i =
              new (thd->mem_root)
                sp_instr_jump_if_not(sp->instructions(), lex,
                                     (yyvsp[(2) - (2)].item), expr_query);

            /* Add jump instruction. */

            if (i == NULL ||
                sp->m_parser_data.add_backpatch_entry(
                  i, pctx->push_label(thd, EMPTY_STR, 0)) ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 244:

/* Line 1455 of yacc.c  */
#line 3581 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_jump *i =
              new (thd->mem_root) sp_instr_jump(sp->instructions(), pctx);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;

            sp->m_parser_data.do_backpatch(pctx->pop_label(),
                                           sp->instructions());

            sp->m_parser_data.add_backpatch_entry(
              i, pctx->push_label(thd, EMPTY_STR, 0));
          }
    break;

  case 245:

/* Line 1455 of yacc.c  */
#line 3600 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp->m_parser_data.do_backpatch(pctx->pop_label(),
                                           sp->instructions());
          }
    break;

  case 251:

/* Line 1455 of yacc.c  */
#line 3623 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            case_stmt_action_case(thd);

            sp->reset_lex(thd); /* For CASE-expr $3 */
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 252:

/* Line 1455 of yacc.c  */
#line 3634 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            /* Extract CASE-expression string. */

            LEX_STRING case_expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              case_expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!case_expr_query.str)
                MYSQL_YYABORT;
            }

            /* Register new CASE-expression and get its id. */

            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            int case_expr_id= pctx->push_case_expr_id();

            if (case_expr_id < 0)
              MYSQL_YYABORT;

            /* Add CASE-set instruction. */

            sp_instr_set_case_expr *i=
              new (thd->mem_root)
                sp_instr_set_case_expr(sp->instructions(), lex,
                                       case_expr_id, (yyvsp[(3) - (3)].item), case_expr_query);

            if (i == NULL ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 253:

/* Line 1455 of yacc.c  */
#line 3678 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            case_stmt_action_end_case(Lex, true);
          }
    break;

  case 254:

/* Line 1455 of yacc.c  */
#line 3685 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            case_stmt_action_case(YYTHD);
          }
    break;

  case 255:

/* Line 1455 of yacc.c  */
#line 3692 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            case_stmt_action_end_case(Lex, false);
          }
    break;

  case 260:

/* Line 1455 of yacc.c  */
#line 3709 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 261:

/* Line 1455 of yacc.c  */
#line 3718 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING when_expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              when_expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!when_expr_query.str)
                MYSQL_YYABORT;
            }

            /* Add CASE-when-jump instruction. */

            sp_instr_jump_case_when *i =
              new (thd->mem_root)
                sp_instr_jump_case_when(sp->instructions(), lex,
                                        pctx->get_current_case_expr_id(),
                                        (yyvsp[(3) - (3)].item), when_expr_query);

            if (i == NULL ||
                i->on_after_expr_parsing(thd) ||
                sp->m_parser_data.add_backpatch_entry(
                  i, pctx->push_label(thd, EMPTY_STR, 0)) ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 262:

/* Line 1455 of yacc.c  */
#line 3759 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (case_stmt_action_then(YYTHD, Lex))
              MYSQL_YYABORT;
          }
    break;

  case 263:

/* Line 1455 of yacc.c  */
#line 3767 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 264:

/* Line 1455 of yacc.c  */
#line 3776 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING when_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              when_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!when_query.str)
                MYSQL_YYABORT;
            }

            /* Add jump instruction. */

            sp_instr_jump_if_not *i=
              new (thd->mem_root)
                sp_instr_jump_if_not(sp->instructions(), lex, (yyvsp[(3) - (3)].item), when_query);

            if (i == NULL ||
                sp->m_parser_data.add_backpatch_entry(
                  i, pctx->push_label(thd, EMPTY_STR, 0)) ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 265:

/* Line 1455 of yacc.c  */
#line 3812 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (case_stmt_action_then(YYTHD, Lex))
              MYSQL_YYABORT;
          }
    break;

  case 266:

/* Line 1455 of yacc.c  */
#line 3820 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_error *i=
              new (thd->mem_root)
                sp_instr_error(sp->instructions(), pctx, ER_SP_CASE_NOT_FOUND);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 268:

/* Line 1455 of yacc.c  */
#line 3838 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(1) - (2)].lex_str));

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= pctx->push_label(YYTHD, (yyvsp[(1) - (2)].lex_str), sp->instructions());
              lab->type= sp_label::ITERATION;
            }
          }
    break;

  case 269:

/* Line 1455 of yacc.c  */
#line 3856 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name.str) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            sp->m_parser_data.do_backpatch(lab, sp->instructions());
          }
    break;

  case 270:

/* Line 1455 of yacc.c  */
#line 3875 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 271:

/* Line 1455 of yacc.c  */
#line 3876 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 272:

/* Line 1455 of yacc.c  */
#line 3881 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(1) - (2)].lex_str));

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= pctx->push_label(YYTHD, (yyvsp[(1) - (2)].lex_str), sp->instructions());
            lab->type= sp_label::BEGIN;
          }
    break;

  case 273:

/* Line 1455 of yacc.c  */
#line 3897 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name.str) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 274:

/* Line 1455 of yacc.c  */
#line 3914 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_label *lab=
              pctx->push_label(YYTHD, EMPTY_STR, sp->instructions());

            lab->type= sp_label::BEGIN;
          }
    break;

  case 275:

/* Line 1455 of yacc.c  */
#line 3925 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->get_sp_current_parsing_ctx()->pop_label();
          }
    break;

  case 276:

/* Line 1455 of yacc.c  */
#line 3933 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *parent_pctx= lex->get_sp_current_parsing_ctx();

            sp_pcontext *child_pctx=
              parent_pctx->push_context(thd, sp_pcontext::REGULAR_SCOPE);

            lex->set_sp_current_parsing_ctx(child_pctx);
          }
    break;

  case 277:

/* Line 1455 of yacc.c  */
#line 3948 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            // We always have a label.
            sp->m_parser_data.do_backpatch(pctx->last_label(),
                                           sp->instructions());

            if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              sp_instr *i=
                new (thd->mem_root) sp_instr_hpop(sp->instructions(), pctx);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }

            if ((yyvsp[(3) - (5)].spblock).curs)
            {
              sp_instr *i=
                new (thd->mem_root)
                  sp_instr_cpop(sp->instructions(), pctx, (yyvsp[(3) - (5)].spblock).curs);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }

            lex->set_sp_current_parsing_ctx(pctx->pop_context());
          }
    break;

  case 278:

/* Line 1455 of yacc.c  */
#line 3984 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_jump *i=
                new (thd->mem_root)
                  sp_instr_jump(sp->instructions(), pctx,
                                pctx->last_label()->ip);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 279:

/* Line 1455 of yacc.c  */
#line 3999 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 280:

/* Line 1455 of yacc.c  */
#line 4008 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            /* Add jump instruction. */

            sp_instr_jump_if_not *i=
              new (thd->mem_root)
                sp_instr_jump_if_not(sp->instructions(), lex, (yyvsp[(3) - (3)].item), expr_query);

            if (i == NULL ||
                /* Jumping forward */
                sp->m_parser_data.add_backpatch_entry(i, pctx->last_label()) ||
                sp->m_parser_data.new_cont_backpatch() ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 281:

/* Line 1455 of yacc.c  */
#line 4046 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_jump *i=
              new (thd->mem_root)
                sp_instr_jump(sp->instructions(), pctx, pctx->last_label()->ip);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;

            sp->m_parser_data.do_cont_backpatch(sp->instructions());
          }
    break;

  case 282:

/* Line 1455 of yacc.c  */
#line 4062 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 283:

/* Line 1455 of yacc.c  */
#line 4071 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint ip= sp->instructions();

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            /* Add jump instruction. */

            sp_instr_jump_if_not *i=
              new (thd->mem_root)
                sp_instr_jump_if_not(ip, lex, (yyvsp[(5) - (5)].item), expr_query,
                                     pctx->last_label()->ip);

            if (i == NULL ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }

            /* We can shortcut the cont_backpatch here */
            i->set_cont_dest(ip + 1);
          }
    break;

  case 285:

/* Line 1455 of yacc.c  */
#line 4112 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= TRG_ACTION_BEFORE; }
    break;

  case 286:

/* Line 1455 of yacc.c  */
#line 4114 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= TRG_ACTION_AFTER; }
    break;

  case 287:

/* Line 1455 of yacc.c  */
#line 4119 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= TRG_EVENT_INSERT; }
    break;

  case 288:

/* Line 1455 of yacc.c  */
#line 4121 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= TRG_EVENT_UPDATE; }
    break;

  case 289:

/* Line 1455 of yacc.c  */
#line 4123 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= TRG_EVENT_DELETE; }
    break;

  case 293:

/* Line 1455 of yacc.c  */
#line 4157 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 294:

/* Line 1455 of yacc.c  */
#line 4159 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 295:

/* Line 1455 of yacc.c  */
#line 4169 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 296:

/* Line 1455 of yacc.c  */
#line 4175 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 301:

/* Line 1455 of yacc.c  */
#line 4198 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 352:

/* Line 1455 of yacc.c  */
#line 4296 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 353:

/* Line 1455 of yacc.c  */
#line 4304 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 354:

/* Line 1455 of yacc.c  */
#line 4312 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 355:

/* Line 1455 of yacc.c  */
#line 4320 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 356:

/* Line 1455 of yacc.c  */
#line 4332 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 357:

/* Line 1455 of yacc.c  */
#line 4344 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 358:

/* Line 1455 of yacc.c  */
#line 4349 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 359:

/* Line 1455 of yacc.c  */
#line 4354 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 360:

/* Line 1455 of yacc.c  */
#line 4362 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 361:

/* Line 1455 of yacc.c  */
#line 4370 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 362:

/* Line 1455 of yacc.c  */
#line 4378 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 363:

/* Line 1455 of yacc.c  */
#line 4386 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 364:

/* Line 1455 of yacc.c  */
#line 4394 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 365:

/* Line 1455 of yacc.c  */
#line 4402 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 366:

/* Line 1455 of yacc.c  */
#line 4410 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 367:

/* Line 1455 of yacc.c  */
#line 4423 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 368:

/* Line 1455 of yacc.c  */
#line 4436 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 369:

/* Line 1455 of yacc.c  */
#line 4450 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 370:

/* Line 1455 of yacc.c  */
#line 4455 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 371:

/* Line 1455 of yacc.c  */
#line 4467 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulonglong_number);}
    break;

  case 372:

/* Line 1455 of yacc.c  */
#line 4469 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
    break;

  case 373:

/* Line 1455 of yacc.c  */
#line 4519 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 374:

/* Line 1455 of yacc.c  */
#line 4522 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 375:

/* Line 1455 of yacc.c  */
#line 4524 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(2) - (2)].table), NULL, 0);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 376:

/* Line 1455 of yacc.c  */
#line 4537 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (4)].table), NULL, 0);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 377:

/* Line 1455 of yacc.c  */
#line 4554 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 378:

/* Line 1455 of yacc.c  */
#line 4557 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 379:

/* Line 1455 of yacc.c  */
#line 4558 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 380:

/* Line 1455 of yacc.c  */
#line 4562 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 381:

/* Line 1455 of yacc.c  */
#line 4564 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 382:

/* Line 1455 of yacc.c  */
#line 4565 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 383:

/* Line 1455 of yacc.c  */
#line 4567 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 384:

/* Line 1455 of yacc.c  */
#line 4568 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 385:

/* Line 1455 of yacc.c  */
#line 4573 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
    break;

  case 386:

/* Line 1455 of yacc.c  */
#line 4609 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 388:

/* Line 1455 of yacc.c  */
#line 4615 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= Alter_info::ALTER_PARTITION;
            }
          }
    break;

  case 390:

/* Line 1455 of yacc.c  */
#line 4633 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
          }
    break;

  case 391:

/* Line 1455 of yacc.c  */
#line 4639 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 392:

/* Line 1455 of yacc.c  */
#line 4651 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 394:

/* Line 1455 of yacc.c  */
#line 4660 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
    break;

  case 395:

/* Line 1455 of yacc.c  */
#line 4667 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 396:

/* Line 1455 of yacc.c  */
#line 4668 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 397:

/* Line 1455 of yacc.c  */
#line 4670 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 398:

/* Line 1455 of yacc.c  */
#line 4672 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 399:

/* Line 1455 of yacc.c  */
#line 4674 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 400:

/* Line 1455 of yacc.c  */
#line 4676 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 401:

/* Line 1455 of yacc.c  */
#line 4680 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 402:

/* Line 1455 of yacc.c  */
#line 4682 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 403:

/* Line 1455 of yacc.c  */
#line 4687 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_NONE;}
    break;

  case 404:

/* Line 1455 of yacc.c  */
#line 4689 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            switch ((yyvsp[(3) - (3)].ulong_num)) {
            case 1:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_51;
              break;
            case 2:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_55;
              break;
            default:
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 405:

/* Line 1455 of yacc.c  */
#line 4705 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 406:

/* Line 1455 of yacc.c  */
#line 4706 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 407:

/* Line 1455 of yacc.c  */
#line 4710 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 408:

/* Line 1455 of yacc.c  */
#line 4711 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 409:

/* Line 1455 of yacc.c  */
#line 4716 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of partition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 410:

/* Line 1455 of yacc.c  */
#line 4735 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
    break;

  case 411:

/* Line 1455 of yacc.c  */
#line 4745 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
    break;

  case 412:

/* Line 1455 of yacc.c  */
#line 4756 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (Lex->part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
    break;

  case 413:

/* Line 1455 of yacc.c  */
#line 4764 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 414:

/* Line 1455 of yacc.c  */
#line 4766 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { 
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 415:

/* Line 1455 of yacc.c  */
#line 4781 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 416:

/* Line 1455 of yacc.c  */
#line 4783 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 417:

/* Line 1455 of yacc.c  */
#line 4784 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 418:

/* Line 1455 of yacc.c  */
#line 4787 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 419:

/* Line 1455 of yacc.c  */
#line 4792 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 420:

/* Line 1455 of yacc.c  */
#line 4796 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 421:

/* Line 1455 of yacc.c  */
#line 4797 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 422:

/* Line 1455 of yacc.c  */
#line 4802 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of subpartition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 423:

/* Line 1455 of yacc.c  */
#line 4820 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 424:

/* Line 1455 of yacc.c  */
#line 4835 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 425:

/* Line 1455 of yacc.c  */
#line 4837 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
    break;

  case 426:

/* Line 1455 of yacc.c  */
#line 4852 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "RANGE");
              MYSQL_YYABORT;
            }
            else if (part_info->part_type == LIST_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "LIST");
              MYSQL_YYABORT;
            }
          }
    break;

  case 427:

/* Line 1455 of yacc.c  */
#line 4868 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 428:

/* Line 1455 of yacc.c  */
#line 4889 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 429:

/* Line 1455 of yacc.c  */
#line 4890 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 430:

/* Line 1455 of yacc.c  */
#line 4895 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 431:

/* Line 1455 of yacc.c  */
#line 4914 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 432:

/* Line 1455 of yacc.c  */
#line 4919 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 433:

/* Line 1455 of yacc.c  */
#line 4928 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
    break;

  case 434:

/* Line 1455 of yacc.c  */
#line 4950 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 435:

/* Line 1455 of yacc.c  */
#line 4965 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 436:

/* Line 1455 of yacc.c  */
#line 4967 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                               "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
    break;

  case 437:

/* Line 1455 of yacc.c  */
#line 4982 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 438:

/* Line 1455 of yacc.c  */
#line 4987 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 439:

/* Line 1455 of yacc.c  */
#line 5008 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 440:

/* Line 1455 of yacc.c  */
#line 5013 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST [COLUMNS] partitions.
              */
              if (part_info->reorganize_into_single_field_col_val())
              {
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 441:

/* Line 1455 of yacc.c  */
#line 5042 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              my_parse_error(ER(ER_ROW_SINGLE_PARTITION_FIELD_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 442:

/* Line 1455 of yacc.c  */
#line 5053 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 443:

/* Line 1455 of yacc.c  */
#line 5054 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 444:

/* Line 1455 of yacc.c  */
#line 5059 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 445:

/* Line 1455 of yacc.c  */
#line 5070 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 446:

/* Line 1455 of yacc.c  */
#line 5072 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
    break;

  case 447:

/* Line 1455 of yacc.c  */
#line 5095 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 448:

/* Line 1455 of yacc.c  */
#line 5096 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 449:

/* Line 1455 of yacc.c  */
#line 5101 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              my_parse_error(ER(ER_MAXVALUE_IN_VALUES_IN));
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 450:

/* Line 1455 of yacc.c  */
#line 5114 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[(1) - (1)].item);

            if (!lex->safe_to_cache_query)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(YYTHD, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 451:

/* Line 1455 of yacc.c  */
#line 5134 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 452:

/* Line 1455 of yacc.c  */
#line 5148 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 453:

/* Line 1455 of yacc.c  */
#line 5173 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 454:

/* Line 1455 of yacc.c  */
#line 5174 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 455:

/* Line 1455 of yacc.c  */
#line 5179 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 456:

/* Line 1455 of yacc.c  */
#line 5211 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 457:

/* Line 1455 of yacc.c  */
#line 5216 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 458:

/* Line 1455 of yacc.c  */
#line 5220 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 459:

/* Line 1455 of yacc.c  */
#line 5221 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 460:

/* Line 1455 of yacc.c  */
#line 5225 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 461:

/* Line 1455 of yacc.c  */
#line 5226 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 462:

/* Line 1455 of yacc.c  */
#line 5231 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 463:

/* Line 1455 of yacc.c  */
#line 5233 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 464:

/* Line 1455 of yacc.c  */
#line 5239 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 465:

/* Line 1455 of yacc.c  */
#line 5241 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 466:

/* Line 1455 of yacc.c  */
#line 5243 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 467:

/* Line 1455 of yacc.c  */
#line 5245 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 468:

/* Line 1455 of yacc.c  */
#line 5247 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 469:

/* Line 1455 of yacc.c  */
#line 5249 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 470:

/* Line 1455 of yacc.c  */
#line 5258 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 471:

/* Line 1455 of yacc.c  */
#line 5273 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 472:

/* Line 1455 of yacc.c  */
#line 5277 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 473:

/* Line 1455 of yacc.c  */
#line 5287 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 474:

/* Line 1455 of yacc.c  */
#line 5288 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 475:

/* Line 1455 of yacc.c  */
#line 5292 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 476:

/* Line 1455 of yacc.c  */
#line 5293 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 477:

/* Line 1455 of yacc.c  */
#line 5297 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 478:

/* Line 1455 of yacc.c  */
#line 5298 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 479:

/* Line 1455 of yacc.c  */
#line 5302 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 480:

/* Line 1455 of yacc.c  */
#line 5303 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 481:

/* Line 1455 of yacc.c  */
#line 5307 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 482:

/* Line 1455 of yacc.c  */
#line 5308 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 483:

/* Line 1455 of yacc.c  */
#line 5312 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 484:

/* Line 1455 of yacc.c  */
#line 5313 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 485:

/* Line 1455 of yacc.c  */
#line 5317 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 486:

/* Line 1455 of yacc.c  */
#line 5321 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 487:

/* Line 1455 of yacc.c  */
#line 5322 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS; }
    break;

  case 495:

/* Line 1455 of yacc.c  */
#line 5343 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 496:

/* Line 1455 of yacc.c  */
#line 5348 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 497:

/* Line 1455 of yacc.c  */
#line 5353 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 498:

/* Line 1455 of yacc.c  */
#line 5358 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 499:

/* Line 1455 of yacc.c  */
#line 5363 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 500:

/* Line 1455 of yacc.c  */
#line 5368 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 501:

/* Line 1455 of yacc.c  */
#line 5373 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 502:

/* Line 1455 of yacc.c  */
#line 5378 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 503:

/* Line 1455 of yacc.c  */
#line 5393 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 504:

/* Line 1455 of yacc.c  */
#line 5399 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_OFF;
                break;
            case 1:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_ON;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 505:

/* Line 1455 of yacc.c  */
#line 5414 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_DEFAULT;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 506:

/* Line 1455 of yacc.c  */
#line 5419 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_STATS_PERSISTENT;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_STATS_PERSISTENT;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 507:

/* Line 1455 of yacc.c  */
#line 5434 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_STATS_PERSISTENT | HA_OPTION_NO_STATS_PERSISTENT);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 508:

/* Line 1455 of yacc.c  */
#line 5440 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            /* From user point of view STATS_SAMPLE_PAGES can be specified as
            STATS_SAMPLE_PAGES=N (where 0<N<=65535, it does not make sense to
            scan 0 pages) or STATS_SAMPLE_PAGES=default. Internally we record
            =default as 0. See create_frm() in sql/table.cc, we use only two
            bytes for stats_sample_pages and this is why we do not allow
            larger values. 65535 pages, 16kb each means to sample 1GB, which
            is impractical. If at some point this needs to be extended, then
            we can store the higher bits from stats_sample_pages in .frm too. */
            if ((yyvsp[(3) - (3)].ulong_num) == 0 || (yyvsp[(3) - (3)].ulong_num) > 0xffff)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            Lex->create_info.stats_sample_pages=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 509:

/* Line 1455 of yacc.c  */
#line 5458 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->create_info.stats_sample_pages=0;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 510:

/* Line 1455 of yacc.c  */
#line 5463 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 511:

/* Line 1455 of yacc.c  */
#line 5468 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 512:

/* Line 1455 of yacc.c  */
#line 5473 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 513:

/* Line 1455 of yacc.c  */
#line 5478 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 514:

/* Line 1455 of yacc.c  */
#line 5483 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 515:

/* Line 1455 of yacc.c  */
#line 5487 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list.first);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 518:

/* Line 1455 of yacc.c  */
#line 5511 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 519:

/* Line 1455 of yacc.c  */
#line 5516 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 520:

/* Line 1455 of yacc.c  */
#line 5521 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 521:

/* Line 1455 of yacc.c  */
#line 5526 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 522:

/* Line 1455 of yacc.c  */
#line 5528 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 523:

/* Line 1455 of yacc.c  */
#line 5530 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 524:

/* Line 1455 of yacc.c  */
#line 5532 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 525:

/* Line 1455 of yacc.c  */
#line 5538 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 526:

/* Line 1455 of yacc.c  */
#line 5546 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                       "CHARACTER SET ", cinfo->default_table_charset->csname,
                       "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 527:

/* Line 1455 of yacc.c  */
#line 5564 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !((yyvsp[(4) - (4)].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[(4) - (4)].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 528:

/* Line 1455 of yacc.c  */
#line 5581 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
          }
    break;

  case 529:

/* Line 1455 of yacc.c  */
#line 5587 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
          }
    break;

  case 530:

/* Line 1455 of yacc.c  */
#line 5592 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 531:

/* Line 1455 of yacc.c  */
#line 5593 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 532:

/* Line 1455 of yacc.c  */
#line 5594 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 533:

/* Line 1455 of yacc.c  */
#line 5595 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 534:

/* Line 1455 of yacc.c  */
#line 5596 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 535:

/* Line 1455 of yacc.c  */
#line 5597 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 536:

/* Line 1455 of yacc.c  */
#line 5598 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_TOKU_UNCOMPRESSED; }
    break;

  case 537:

/* Line 1455 of yacc.c  */
#line 5599 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_TOKU_ZLIB; }
    break;

  case 538:

/* Line 1455 of yacc.c  */
#line 5600 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_TOKU_QUICKLZ; }
    break;

  case 539:

/* Line 1455 of yacc.c  */
#line 5601 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_TOKU_LZMA; }
    break;

  case 540:

/* Line 1455 of yacc.c  */
#line 5602 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_TOKU_FAST; }
    break;

  case 541:

/* Line 1455 of yacc.c  */
#line 5603 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_TOKU_SMALL; }
    break;

  case 542:

/* Line 1455 of yacc.c  */
#line 5607 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 543:

/* Line 1455 of yacc.c  */
#line 5608 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 544:

/* Line 1455 of yacc.c  */
#line 5609 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 545:

/* Line 1455 of yacc.c  */
#line 5613 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 547:

/* Line 1455 of yacc.c  */
#line 5618 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 548:

/* Line 1455 of yacc.c  */
#line 5619 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 549:

/* Line 1455 of yacc.c  */
#line 5620 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 550:

/* Line 1455 of yacc.c  */
#line 5621 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 551:

/* Line 1455 of yacc.c  */
#line 5627 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
    break;

  case 557:

/* Line 1455 of yacc.c  */
#line 5645 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 558:

/* Line 1455 of yacc.c  */
#line 5652 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (7)].key_type), (yyvsp[(2) - (7)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 559:

/* Line 1455 of yacc.c  */
#line 5658 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(3) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 560:

/* Line 1455 of yacc.c  */
#line 5664 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(3) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 561:

/* Line 1455 of yacc.c  */
#line 5670 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (((yyvsp[(1) - (8)].lex_str).length != 0)
                 && ((enum Key::Keytype)(yyvsp[(2) - (8)].key_type) == (Key::CLUSTERING | Key::MULTIPLE)))
            {
              /* Forbid "CONSTRAINT c CLUSTERING" */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (add_create_index (Lex, (yyvsp[(2) - (8)].key_type), (yyvsp[(3) - (8)].lex_str).str ? (yyvsp[(3) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 562:

/* Line 1455 of yacc.c  */
#line 5682 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Key *key= new Foreign_key((yyvsp[(4) - (8)].lex_str).str ? (yyvsp[(4) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str), lex->col_list,
                                      (yyvsp[(8) - (8)].table)->db,
                                      (yyvsp[(8) - (8)].table)->table,
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            if (add_create_index (lex, Key::MULTIPLE, (yyvsp[(1) - (8)].lex_str).str ? (yyvsp[(1) - (8)].lex_str) : (yyvsp[(4) - (8)].lex_str),
                                  &default_key_create_info, 1))
              MYSQL_YYABORT;
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= Alter_info::ADD_FOREIGN_KEY;
          }
    break;

  case 563:

/* Line 1455 of yacc.c  */
#line 5701 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 567:

/* Line 1455 of yacc.c  */
#line 5716 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 568:

/* Line 1455 of yacc.c  */
#line 5717 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 569:

/* Line 1455 of yacc.c  */
#line 5721 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 570:

/* Line 1455 of yacc.c  */
#line 5726 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
          }
    break;

  case 571:

/* Line 1455 of yacc.c  */
#line 5735 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[(1) - (4)].lex_str), (enum enum_field_types) (yyvsp[(3) - (4)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value, 
                                  &lex->comment,
                                  lex->change,&lex->interval_list,lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 572:

/* Line 1455 of yacc.c  */
#line 5748 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 573:

/* Line 1455 of yacc.c  */
#line 5749 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 574:

/* Line 1455 of yacc.c  */
#line 5750 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
    break;

  case 575:

/* Line 1455 of yacc.c  */
#line 5752 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 576:

/* Line 1455 of yacc.c  */
#line 5757 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 577:

/* Line 1455 of yacc.c  */
#line 5761 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 578:

/* Line 1455 of yacc.c  */
#line 5766 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 579:

/* Line 1455 of yacc.c  */
#line 5771 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 580:

/* Line 1455 of yacc.c  */
#line 5775 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 581:

/* Line 1455 of yacc.c  */
#line 5780 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 582:

/* Line 1455 of yacc.c  */
#line 5785 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 583:

/* Line 1455 of yacc.c  */
#line 5791 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 584:

/* Line 1455 of yacc.c  */
#line 5796 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 585:

/* Line 1455 of yacc.c  */
#line 5802 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 586:

/* Line 1455 of yacc.c  */
#line 5806 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
    break;

  case 587:

/* Line 1455 of yacc.c  */
#line 5811 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 588:

/* Line 1455 of yacc.c  */
#line 5816 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (Lex->length)
            {
              errno= 0;
              ulong length= strtoul(Lex->length, NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                /* Reset unsupported positive column width to default value */
                Lex->length= NULL;
                push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                    ER_INVALID_YEAR_COLUMN_LENGTH,
                                    ER(ER_INVALID_YEAR_COLUMN_LENGTH),
                                    length);
              }
            }
            (yyval.num)=MYSQL_TYPE_YEAR;
          }
    break;

  case 589:

/* Line 1455 of yacc.c  */
#line 5834 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATE; }
    break;

  case 590:

/* Line 1455 of yacc.c  */
#line 5836 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= MYSQL_TYPE_TIME2; }
    break;

  case 591:

/* Line 1455 of yacc.c  */
#line 5838 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (YYTHD->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME2;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
                This behavior is deprecated now.
              */
              if (!YYTHD->variables.explicit_defaults_for_timestamp)
                Lex->type|= NOT_NULL_FLAG;

              (yyval.num)=MYSQL_TYPE_TIMESTAMP2;
            }
          }
    break;

  case 592:

/* Line 1455 of yacc.c  */
#line 5854 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= MYSQL_TYPE_DATETIME2; }
    break;

  case 593:

/* Line 1455 of yacc.c  */
#line 5856 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 594:

/* Line 1455 of yacc.c  */
#line 5861 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
    break;

  case 595:

/* Line 1455 of yacc.c  */
#line 5866 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[(1) - (1)].num);
            (yyval.num)=MYSQL_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 596:

/* Line 1455 of yacc.c  */
#line 5878 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 597:

/* Line 1455 of yacc.c  */
#line 5883 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 598:

/* Line 1455 of yacc.c  */
#line 5888 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 599:

/* Line 1455 of yacc.c  */
#line 5893 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 600:

/* Line 1455 of yacc.c  */
#line 5895 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 601:

/* Line 1455 of yacc.c  */
#line 5897 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_BLOB; }
    break;

  case 602:

/* Line 1455 of yacc.c  */
#line 5899 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 603:

/* Line 1455 of yacc.c  */
#line 5901 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 604:

/* Line 1455 of yacc.c  */
#line 5903 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 605:

/* Line 1455 of yacc.c  */
#line 5905 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 606:

/* Line 1455 of yacc.c  */
#line 5907 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 607:

/* Line 1455 of yacc.c  */
#line 5909 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {Lex->interval_list.empty();}
    break;

  case 608:

/* Line 1455 of yacc.c  */
#line 5911 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_ENUM; }
    break;

  case 609:

/* Line 1455 of yacc.c  */
#line 5913 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->interval_list.empty();}
    break;

  case 610:

/* Line 1455 of yacc.c  */
#line 5915 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SET; }
    break;

  case 611:

/* Line 1455 of yacc.c  */
#line 5917 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 612:

/* Line 1455 of yacc.c  */
#line 5919 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 613:

/* Line 1455 of yacc.c  */
#line 5927 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= GEOM_GEOMETRY; }
    break;

  case 614:

/* Line 1455 of yacc.c  */
#line 5928 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= GEOM_GEOMETRYCOLLECTION; }
    break;

  case 615:

/* Line 1455 of yacc.c  */
#line 5930 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->length= const_cast<char*>(STRINGIFY_ARG
                                           (MAX_LEN_GEOM_POINT_FIELD));
            (yyval.num)= GEOM_POINT;
          }
    break;

  case 616:

/* Line 1455 of yacc.c  */
#line 5935 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= GEOM_MULTIPOINT; }
    break;

  case 617:

/* Line 1455 of yacc.c  */
#line 5936 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= GEOM_LINESTRING; }
    break;

  case 618:

/* Line 1455 of yacc.c  */
#line 5937 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= GEOM_MULTILINESTRING; }
    break;

  case 619:

/* Line 1455 of yacc.c  */
#line 5938 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= GEOM_POLYGON; }
    break;

  case 620:

/* Line 1455 of yacc.c  */
#line 5939 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= GEOM_MULTIPOLYGON; }
    break;

  case 621:

/* Line 1455 of yacc.c  */
#line 5943 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 622:

/* Line 1455 of yacc.c  */
#line 5947 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 623:

/* Line 1455 of yacc.c  */
#line 5948 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 624:

/* Line 1455 of yacc.c  */
#line 5952 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 625:

/* Line 1455 of yacc.c  */
#line 5953 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 626:

/* Line 1455 of yacc.c  */
#line 5957 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 627:

/* Line 1455 of yacc.c  */
#line 5958 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 628:

/* Line 1455 of yacc.c  */
#line 5959 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 629:

/* Line 1455 of yacc.c  */
#line 5960 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 630:

/* Line 1455 of yacc.c  */
#line 5961 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 631:

/* Line 1455 of yacc.c  */
#line 5965 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG; }
    break;

  case 632:

/* Line 1455 of yacc.c  */
#line 5966 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY; }
    break;

  case 633:

/* Line 1455 of yacc.c  */
#line 5967 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SHORT; }
    break;

  case 634:

/* Line 1455 of yacc.c  */
#line 5968 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_INT24; }
    break;

  case 635:

/* Line 1455 of yacc.c  */
#line 5969 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
    break;

  case 636:

/* Line 1455 of yacc.c  */
#line 5974 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.num)= YYTHD->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 637:

/* Line 1455 of yacc.c  */
#line 5979 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 638:

/* Line 1455 of yacc.c  */
#line 5981 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 639:

/* Line 1455 of yacc.c  */
#line 5986 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 640:

/* Line 1455 of yacc.c  */
#line 5988 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 641:

/* Line 1455 of yacc.c  */
#line 5990 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 642:

/* Line 1455 of yacc.c  */
#line 5995 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 643:

/* Line 1455 of yacc.c  */
#line 6004 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->dec= (char *) 0; }
    break;

  case 644:

/* Line 1455 of yacc.c  */
#line 6005 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->dec= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 645:

/* Line 1455 of yacc.c  */
#line 6009 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 646:

/* Line 1455 of yacc.c  */
#line 6010 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 647:

/* Line 1455 of yacc.c  */
#line 6012 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
             int error;
             (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(2) - (3)].lex_str).str, NULL, &error);
           }
    break;

  case 648:

/* Line 1455 of yacc.c  */
#line 6019 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 649:

/* Line 1455 of yacc.c  */
#line 6020 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 650:

/* Line 1455 of yacc.c  */
#line 6024 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 651:

/* Line 1455 of yacc.c  */
#line 6025 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 652:

/* Line 1455 of yacc.c  */
#line 6029 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 653:

/* Line 1455 of yacc.c  */
#line 6030 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 654:

/* Line 1455 of yacc.c  */
#line 6031 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 655:

/* Line 1455 of yacc.c  */
#line 6035 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 656:

/* Line 1455 of yacc.c  */
#line 6036 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 657:

/* Line 1455 of yacc.c  */
#line 6037 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 658:

/* Line 1455 of yacc.c  */
#line 6038 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 659:

/* Line 1455 of yacc.c  */
#line 6041 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 660:

/* Line 1455 of yacc.c  */
#line 6042 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { }
    break;

  case 661:

/* Line 1455 of yacc.c  */
#line 6046 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 662:

/* Line 1455 of yacc.c  */
#line 6047 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 663:

/* Line 1455 of yacc.c  */
#line 6051 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 664:

/* Line 1455 of yacc.c  */
#line 6052 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 665:

/* Line 1455 of yacc.c  */
#line 6056 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 667:

/* Line 1455 of yacc.c  */
#line 6061 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 668:

/* Line 1455 of yacc.c  */
#line 6062 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 669:

/* Line 1455 of yacc.c  */
#line 6063 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->default_value=(yyvsp[(2) - (2)].item); }
    break;

  case 670:

/* Line 1455 of yacc.c  */
#line 6064 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->on_update_value= (yyvsp[(3) - (3)].item); }
    break;

  case 671:

/* Line 1455 of yacc.c  */
#line 6065 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 672:

/* Line 1455 of yacc.c  */
#line 6067 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 673:

/* Line 1455 of yacc.c  */
#line 6073 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 674:

/* Line 1455 of yacc.c  */
#line 6079 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if ((yyvsp[(1) - (1)].key_type) & Key::UNIQUE)
              lex->type|= UNIQUE_FLAG; 
            if ((yyvsp[(1) - (1)].key_type) & Key::CLUSTERING)
              lex->type|= CLUSTERING_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 675:

/* Line 1455 of yacc.c  */
#line 6088 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if ((yyvsp[(1) - (2)].key_type) & Key::UNIQUE)
              lex->type|= UNIQUE_KEY_FLAG; 
            if ((yyvsp[(1) - (2)].key_type) & Key::CLUSTERING)
              lex->type|= CLUSTERING_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX; 
          }
    break;

  case 676:

/* Line 1455 of yacc.c  */
#line 6096 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 677:

/* Line 1455 of yacc.c  */
#line 6098 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[(2) - (2)].charset);
            }
          }
    break;

  case 678:

/* Line 1455 of yacc.c  */
#line 6111 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_COLUMN_FORMAT_MASK);
            Lex->type|=
              (COLUMN_FORMAT_TYPE_DEFAULT << FIELD_FLAGS_COLUMN_FORMAT);
          }
    break;

  case 679:

/* Line 1455 of yacc.c  */
#line 6117 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_COLUMN_FORMAT_MASK);
            Lex->type|=
              (COLUMN_FORMAT_TYPE_FIXED << FIELD_FLAGS_COLUMN_FORMAT);
          }
    break;

  case 680:

/* Line 1455 of yacc.c  */
#line 6123 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_COLUMN_FORMAT_MASK);
            Lex->type|=
              (COLUMN_FORMAT_TYPE_DYNAMIC << FIELD_FLAGS_COLUMN_FORMAT);
          }
    break;

  case 681:

/* Line 1455 of yacc.c  */
#line 6129 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_STORAGE_MEDIA_MASK);
            Lex->type|= (HA_SM_DEFAULT << FIELD_FLAGS_STORAGE_MEDIA);
          }
    break;

  case 682:

/* Line 1455 of yacc.c  */
#line 6134 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_STORAGE_MEDIA_MASK);
            Lex->type|= (HA_SM_DISK << FIELD_FLAGS_STORAGE_MEDIA);
          }
    break;

  case 683:

/* Line 1455 of yacc.c  */
#line 6139 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_STORAGE_MEDIA_MASK);
            Lex->type|= (HA_SM_MEMORY << FIELD_FLAGS_STORAGE_MEDIA);
          }
    break;

  case 684:

/* Line 1455 of yacc.c  */
#line 6148 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
          (yyval.num)= (yyvsp[(1) - (2)].num);

          if (Lex->charset) /* Lex->charset is scanned in "type" */
          {
            if (!(Lex->charset= merge_charset_and_collation(Lex->charset, (yyvsp[(2) - (2)].charset))))
              MYSQL_YYABORT;
          }
          else if ((yyvsp[(2) - (2)].charset))
          {
            my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                     "COLLATE with no CHARACTER SET "
                     "in SP parameters, RETURNS, DECLARE");
            MYSQL_YYABORT;
          }
        }
    break;

  case 685:

/* Line 1455 of yacc.c  */
#line 6169 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 687:

/* Line 1455 of yacc.c  */
#line 6178 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 688:

/* Line 1455 of yacc.c  */
#line 6182 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 689:

/* Line 1455 of yacc.c  */
#line 6183 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 690:

/* Line 1455 of yacc.c  */
#line 6188 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 691:

/* Line 1455 of yacc.c  */
#line 6195 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 692:

/* Line 1455 of yacc.c  */
#line 6199 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 693:

/* Line 1455 of yacc.c  */
#line 6200 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 694:

/* Line 1455 of yacc.c  */
#line 6204 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 695:

/* Line 1455 of yacc.c  */
#line 6205 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 696:

/* Line 1455 of yacc.c  */
#line 6210 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 697:

/* Line 1455 of yacc.c  */
#line 6218 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 698:

/* Line 1455 of yacc.c  */
#line 6222 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 699:

/* Line 1455 of yacc.c  */
#line 6223 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 700:

/* Line 1455 of yacc.c  */
#line 6228 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)= mysqld_collation_get_by_name((yyvsp[(1) - (1)].lex_str).str)))
              MYSQL_YYABORT;
          }
    break;

  case 701:

/* Line 1455 of yacc.c  */
#line 6235 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 702:

/* Line 1455 of yacc.c  */
#line 6236 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 703:

/* Line 1455 of yacc.c  */
#line 6240 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 704:

/* Line 1455 of yacc.c  */
#line 6241 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 705:

/* Line 1455 of yacc.c  */
#line 6245 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 706:

/* Line 1455 of yacc.c  */
#line 6246 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 707:

/* Line 1455 of yacc.c  */
#line 6251 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->charset= &my_charset_latin1; }
    break;

  case 708:

/* Line 1455 of yacc.c  */
#line 6253 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 709:

/* Line 1455 of yacc.c  */
#line 6257 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 710:

/* Line 1455 of yacc.c  */
#line 6264 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 711:

/* Line 1455 of yacc.c  */
#line 6273 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (!(Lex->charset= mysqld_collation_get_by_name("ucs2_bin")))
              MYSQL_YYABORT;
          }
    break;

  case 712:

/* Line 1455 of yacc.c  */
#line 6278 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (!(Lex->charset= mysqld_collation_get_by_name("ucs2_bin")))
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
          }
    break;

  case 713:

/* Line 1455 of yacc.c  */
#line 6285 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->charset=NULL; }
    break;

  case 716:

/* Line 1455 of yacc.c  */
#line 6288 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->charset=&my_charset_bin; }
    break;

  case 717:

/* Line 1455 of yacc.c  */
#line 6289 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 718:

/* Line 1455 of yacc.c  */
#line 6291 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->charset= NULL;
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 719:

/* Line 1455 of yacc.c  */
#line 6296 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->charset= (yyvsp[(3) - (3)].charset);
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 720:

/* Line 1455 of yacc.c  */
#line 6303 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { }
    break;

  case 721:

/* Line 1455 of yacc.c  */
#line 6304 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 722:

/* Line 1455 of yacc.c  */
#line 6309 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
          if ((yyvsp[(2) - (2)].ulong_num) == 0)
          {
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
          }
        }
    break;

  case 723:

/* Line 1455 of yacc.c  */
#line 6317 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(2) - (4)].ulong_num); }
    break;

  case 724:

/* Line 1455 of yacc.c  */
#line 6321 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 725:

/* Line 1455 of yacc.c  */
#line 6322 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 1 << MY_STRXFRM_DESC_SHIFT; }
    break;

  case 726:

/* Line 1455 of yacc.c  */
#line 6326 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 1 << MY_STRXFRM_REVERSE_SHIFT; }
    break;

  case 727:

/* Line 1455 of yacc.c  */
#line 6329 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 728:

/* Line 1455 of yacc.c  */
#line 6330 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 729:

/* Line 1455 of yacc.c  */
#line 6331 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (2)].ulong_num) | (yyvsp[(2) - (2)].ulong_num); }
    break;

  case 730:

/* Line 1455 of yacc.c  */
#line 6332 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num) ; }
    break;

  case 731:

/* Line 1455 of yacc.c  */
#line 6337 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
          (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num) < 1 ? 1 : ((yyvsp[(1) - (1)].ulong_num) > MY_STRXFRM_NLEVELS ? MY_STRXFRM_NLEVELS : (yyvsp[(1) - (1)].ulong_num));
          (yyval.ulong_num)--;
        }
    break;

  case 732:

/* Line 1455 of yacc.c  */
#line 6345 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
          (yyval.ulong_num)= (1 | (yyvsp[(2) - (2)].ulong_num)) << (yyvsp[(1) - (2)].ulong_num);
        }
    break;

  case 733:

/* Line 1455 of yacc.c  */
#line 6351 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 734:

/* Line 1455 of yacc.c  */
#line 6352 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.ulong_num)|= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 735:

/* Line 1455 of yacc.c  */
#line 6357 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
          uint start= (yyvsp[(1) - (3)].ulong_num);
          uint end= (yyvsp[(3) - (3)].ulong_num);
          for ((yyval.ulong_num)= 0; start <= end; start++)
            (yyval.ulong_num)|= (1 << start);
        }
    break;

  case 736:

/* Line 1455 of yacc.c  */
#line 6366 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 737:

/* Line 1455 of yacc.c  */
#line 6367 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 738:

/* Line 1455 of yacc.c  */
#line 6371 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 739:

/* Line 1455 of yacc.c  */
#line 6372 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(2) - (2)].ulong_num); }
    break;

  case 742:

/* Line 1455 of yacc.c  */
#line 6386 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (5)].table);
          }
    break;

  case 743:

/* Line 1455 of yacc.c  */
#line 6393 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->ref_list.empty(); }
    break;

  case 745:

/* Line 1455 of yacc.c  */
#line 6399 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(3) - (3)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 746:

/* Line 1455 of yacc.c  */
#line 6406 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key);
          }
    break;

  case 747:

/* Line 1455 of yacc.c  */
#line 6418 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
    break;

  case 748:

/* Line 1455 of yacc.c  */
#line 6420 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 749:

/* Line 1455 of yacc.c  */
#line 6422 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 750:

/* Line 1455 of yacc.c  */
#line 6424 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 751:

/* Line 1455 of yacc.c  */
#line 6429 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 752:

/* Line 1455 of yacc.c  */
#line 6435 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (3)].m_fk_option);
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 753:

/* Line 1455 of yacc.c  */
#line 6441 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[(3) - (3)].m_fk_option);
          }
    break;

  case 754:

/* Line 1455 of yacc.c  */
#line 6448 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(6) - (6)].m_fk_option);
          }
    break;

  case 755:

/* Line 1455 of yacc.c  */
#line 6455 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(6) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(3) - (6)].m_fk_option);
          }
    break;

  case 756:

/* Line 1455 of yacc.c  */
#line 6463 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 757:

/* Line 1455 of yacc.c  */
#line 6464 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 758:

/* Line 1455 of yacc.c  */
#line 6465 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 759:

/* Line 1455 of yacc.c  */
#line 6466 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 760:

/* Line 1455 of yacc.c  */
#line 6467 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 761:

/* Line 1455 of yacc.c  */
#line 6471 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 762:

/* Line 1455 of yacc.c  */
#line 6475 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 763:

/* Line 1455 of yacc.c  */
#line 6476 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.key_type)= (yyvsp[(1) - (2)].key_type); }
    break;

  case 764:

/* Line 1455 of yacc.c  */
#line 6481 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 765:

/* Line 1455 of yacc.c  */
#line 6482 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 766:

/* Line 1455 of yacc.c  */
#line 6486 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 768:

/* Line 1455 of yacc.c  */
#line 6491 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 769:

/* Line 1455 of yacc.c  */
#line 6492 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 770:

/* Line 1455 of yacc.c  */
#line 6493 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 771:

/* Line 1455 of yacc.c  */
#line 6497 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 773:

/* Line 1455 of yacc.c  */
#line 6503 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.key_type)= (enum Key::Keytype)((yyvsp[(1) - (1)].key_type) | Key::MULTIPLE);
          }
    break;

  case 774:

/* Line 1455 of yacc.c  */
#line 6507 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.key_type)= (yyvsp[(1) - (1)].key_type);
          }
    break;

  case 775:

/* Line 1455 of yacc.c  */
#line 6514 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { 
            (yyval.key_type)= (yyvsp[(1) - (1)].key_type); 
          }
    break;

  case 776:

/* Line 1455 of yacc.c  */
#line 6518 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.key_type)= (enum Key::Keytype)((yyvsp[(1) - (2)].key_type) | (yyvsp[(2) - (2)].key_type));
          }
    break;

  case 777:

/* Line 1455 of yacc.c  */
#line 6522 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.key_type)= (enum Key::Keytype)((yyvsp[(1) - (2)].key_type) | (yyvsp[(2) - (2)].key_type));
          }
    break;

  case 778:

/* Line 1455 of yacc.c  */
#line 6528 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 779:

/* Line 1455 of yacc.c  */
#line 6532 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::CLUSTERING; }
    break;

  case 780:

/* Line 1455 of yacc.c  */
#line 6536 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 781:

/* Line 1455 of yacc.c  */
#line 6541 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 782:

/* Line 1455 of yacc.c  */
#line 6553 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->key_create_info= default_key_create_info;
          }
    break;

  case 785:

/* Line 1455 of yacc.c  */
#line 6570 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 787:

/* Line 1455 of yacc.c  */
#line 6575 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 789:

/* Line 1455 of yacc.c  */
#line 6580 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 797:

/* Line 1455 of yacc.c  */
#line 6600 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 798:

/* Line 1455 of yacc.c  */
#line 6601 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 799:

/* Line 1455 of yacc.c  */
#line 6606 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 800:

/* Line 1455 of yacc.c  */
#line 6607 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->key_create_info.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 805:

/* Line 1455 of yacc.c  */
#line 6622 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
              Lex->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 806:

/* Line 1455 of yacc.c  */
#line 6628 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 807:

/* Line 1455 of yacc.c  */
#line 6629 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 808:

/* Line 1455 of yacc.c  */
#line 6630 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 809:

/* Line 1455 of yacc.c  */
#line 6634 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 810:

/* Line 1455 of yacc.c  */
#line 6635 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 811:

/* Line 1455 of yacc.c  */
#line 6640 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 812:

/* Line 1455 of yacc.c  */
#line 6646 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (4)].lex_str), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 813:

/* Line 1455 of yacc.c  */
#line 6659 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 814:

/* Line 1455 of yacc.c  */
#line 6660 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 815:

/* Line 1455 of yacc.c  */
#line 6664 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 816:

/* Line 1455 of yacc.c  */
#line 6665 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 817:

/* Line 1455 of yacc.c  */
#line 6669 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 818:

/* Line 1455 of yacc.c  */
#line 6670 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 819:

/* Line 1455 of yacc.c  */
#line 6678 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->sql_command= SQLCOM_ALTER_TABLE;
            lex->duplicates= DUP_ERROR; 
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(4) - (4)].table), NULL,
                                                   TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            lex->col_list.empty();
            lex->select_lex.init_order();
            lex->select_lex.db= (lex->select_lex.table_list.first)->db;
            memset(&lex->create_info, 0, sizeof(lex->create_info));
            lex->create_info.db_type= 0;
            lex->create_info.default_table_charset= NULL;
            lex->create_info.row_type= ROW_TYPE_NOT_USED;
            lex->alter_info.reset();
            lex->no_write_to_binlog= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
            lex->create_last_non_select_table= lex->last_table();
            DBUG_ASSERT(!lex->m_sql_cmd);
            if (lex->ignore)
            {
              push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                  ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT,
                                  ER(ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT),
                                  "IGNORE");
            }
          }
    break;

  case 820:

/* Line 1455 of yacc.c  */
#line 6709 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (!lex->m_sql_cmd)
            {
              /* Create a generic ALTER TABLE statment. */
              lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_alter_table();
              if (lex->m_sql_cmd == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 821:

/* Line 1455 of yacc.c  */
#line 6721 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 822:

/* Line 1455 of yacc.c  */
#line 6726 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 823:

/* Line 1455 of yacc.c  */
#line 6735 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 824:

/* Line 1455 of yacc.c  */
#line 6746 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 825:

/* Line 1455 of yacc.c  */
#line 6757 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 826:

/* Line 1455 of yacc.c  */
#line 6764 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 827:

/* Line 1455 of yacc.c  */
#line 6775 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 828:

/* Line 1455 of yacc.c  */
#line 6782 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 829:

/* Line 1455 of yacc.c  */
#line 6793 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 830:

/* Line 1455 of yacc.c  */
#line 6800 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 831:

/* Line 1455 of yacc.c  */
#line 6812 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 832:

/* Line 1455 of yacc.c  */
#line 6814 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(YYTHD)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 833:

/* Line 1455 of yacc.c  */
#line 6834 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (!((yyvsp[(6) - (10)].num) || (yyvsp[(7) - (10)].num) || (yyvsp[(8) - (10)].num) || (yyvsp[(9) - (10)].num) || (yyvsp[(10) - (10)].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 834:

/* Line 1455 of yacc.c  */
#line 6847 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 835:

/* Line 1455 of yacc.c  */
#line 6852 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 836:

/* Line 1455 of yacc.c  */
#line 6857 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 837:

/* Line 1455 of yacc.c  */
#line 6862 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 838:

/* Line 1455 of yacc.c  */
#line 6867 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[(3) - (7)].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[(3) - (7)].lex_str).length;
          }
    break;

  case 839:

/* Line 1455 of yacc.c  */
#line 6874 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_ALTER_USER;
          }
    break;

  case 840:

/* Line 1455 of yacc.c  */
#line 6881 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)))
              MYSQL_YYABORT;
        }
    break;

  case 841:

/* Line 1455 of yacc.c  */
#line 6886 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 842:

/* Line 1455 of yacc.c  */
#line 6893 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 843:

/* Line 1455 of yacc.c  */
#line 6894 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 844:

/* Line 1455 of yacc.c  */
#line 6895 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 845:

/* Line 1455 of yacc.c  */
#line 6896 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 846:

/* Line 1455 of yacc.c  */
#line 6900 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 847:

/* Line 1455 of yacc.c  */
#line 6902 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 848:

/* Line 1455 of yacc.c  */
#line 6913 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 849:

/* Line 1455 of yacc.c  */
#line 6914 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 850:

/* Line 1455 of yacc.c  */
#line 6918 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
    break;

  case 851:

/* Line 1455 of yacc.c  */
#line 6919 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 853:

/* Line 1455 of yacc.c  */
#line 6925 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (YYTHD->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::DISCARD_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 854:

/* Line 1455 of yacc.c  */
#line 6933 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (YYTHD->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::IMPORT_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 860:

/* Line 1455 of yacc.c  */
#line 6955 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_DROP_PARTITION;
          }
    break;

  case 861:

/* Line 1455 of yacc.c  */
#line 6960 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 862:

/* Line 1455 of yacc.c  */
#line 6967 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_optimize_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 864:

/* Line 1455 of yacc.c  */
#line 6981 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_analyze_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 865:

/* Line 1455 of yacc.c  */
#line 6993 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_check_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 867:

/* Line 1455 of yacc.c  */
#line 7006 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_repair_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 869:

/* Line 1455 of yacc.c  */
#line 7019 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.num_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 870:

/* Line 1455 of yacc.c  */
#line 7026 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_truncate_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 872:

/* Line 1455 of yacc.c  */
#line 7039 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(6) - (7)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(6) - (7)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_EXCHANGE_PARTITION;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(6) - (7)].table), NULL,
                                                   TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                               Sql_cmd_alter_table_exchange_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 873:

/* Line 1455 of yacc.c  */
#line 7064 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 874:

/* Line 1455 of yacc.c  */
#line 7071 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ALL_PARTITION;
          }
    break;

  case 876:

/* Line 1455 of yacc.c  */
#line 7079 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= Alter_info::ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 877:

/* Line 1455 of yacc.c  */
#line 7091 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 879:

/* Line 1455 of yacc.c  */
#line 7097 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
    break;

  case 880:

/* Line 1455 of yacc.c  */
#line 7102 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->part_info->num_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 881:

/* Line 1455 of yacc.c  */
#line 7109 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 883:

/* Line 1455 of yacc.c  */
#line 7124 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_TABLE_REORG;
          }
    break;

  case 884:

/* Line 1455 of yacc.c  */
#line 7128 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 885:

/* Line 1455 of yacc.c  */
#line 7132 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
    break;

  case 886:

/* Line 1455 of yacc.c  */
#line 7139 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 887:

/* Line 1455 of yacc.c  */
#line 7140 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 888:

/* Line 1455 of yacc.c  */
#line 7145 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 891:

/* Line 1455 of yacc.c  */
#line 7165 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN;
          }
    break;

  case 892:

/* Line 1455 of yacc.c  */
#line 7174 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 893:

/* Line 1455 of yacc.c  */
#line 7178 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 894:

/* Line 1455 of yacc.c  */
#line 7183 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN |
                                    Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 895:

/* Line 1455 of yacc.c  */
#line 7188 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[(3) - (3)].lex_str).str;
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
          }
    break;

  case 896:

/* Line 1455 of yacc.c  */
#line 7194 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 897:

/* Line 1455 of yacc.c  */
#line 7198 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
          }
    break;

  case 898:

/* Line 1455 of yacc.c  */
#line 7207 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[(3) - (6)].lex_str),
                                  (enum enum_field_types) (yyvsp[(5) - (6)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[(3) - (6)].lex_str).str, &lex->interval_list, lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 899:

/* Line 1455 of yacc.c  */
#line 7219 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 900:

/* Line 1455 of yacc.c  */
#line 7223 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(3) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_COLUMN;
          }
    break;

  case 901:

/* Line 1455 of yacc.c  */
#line 7232 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::FOREIGN_KEY, (yyvsp[(4) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::DROP_FOREIGN_KEY;
          }
    break;

  case 902:

/* Line 1455 of yacc.c  */
#line 7241 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 903:

/* Line 1455 of yacc.c  */
#line 7250 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (3)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 904:

/* Line 1455 of yacc.c  */
#line 7259 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::DISABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 905:

/* Line 1455 of yacc.c  */
#line 7265 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::ENABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 906:

/* Line 1455 of yacc.c  */
#line 7271 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 907:

/* Line 1455 of yacc.c  */
#line 7280 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 908:

/* Line 1455 of yacc.c  */
#line 7289 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            enum_ident_name_check ident_check_status=
              check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length, FALSE);
            if (ident_check_status == IDENT_NAME_WRONG)
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            else if (ident_check_status == IDENT_NAME_TOO_LONG)
            {
              my_error(ER_TOO_LONG_IDENT, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            if ((yyvsp[(3) - (3)].table)->db.str &&
                (check_and_convert_db_name(&(yyvsp[(3) - (3)].table)->db, FALSE) != IDENT_NAME_OK))
              MYSQL_YYABORT;
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_RENAME;
          }
    break;

  case 909:

/* Line 1455 of yacc.c  */
#line 7317 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              THD *thd= YYTHD;
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            lex->create_info.table_charset=
            lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
            lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
              HA_CREATE_USED_DEFAULT_CHARSET);
            lex->alter_info.flags|= Alter_info::ALTER_CONVERT;
          }
    break;

  case 910:

/* Line 1455 of yacc.c  */
#line 7338 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_OPTIONS;
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.used_fields&= ~HA_CREATE_USED_ENGINE;
            }
          }
    break;

  case 911:

/* Line 1455 of yacc.c  */
#line 7348 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_RECREATE;
          }
    break;

  case 912:

/* Line 1455 of yacc.c  */
#line 7352 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_ORDER;
          }
    break;

  case 920:

/* Line 1455 of yacc.c  */
#line 7369 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_algorithm=
              Alter_info::ALTER_TABLE_ALGORITHM_DEFAULT;
          }
    break;

  case 921:

/* Line 1455 of yacc.c  */
#line 7374 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_algorithm(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_UNKNOWN_ALTER_ALGORITHM, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 922:

/* Line 1455 of yacc.c  */
#line 7385 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_DEFAULT;
          }
    break;

  case 923:

/* Line 1455 of yacc.c  */
#line 7390 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_lock(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_UNKNOWN_ALTER_LOCK, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 924:

/* Line 1455 of yacc.c  */
#line 7400 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 925:

/* Line 1455 of yacc.c  */
#line 7401 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 926:

/* Line 1455 of yacc.c  */
#line 7405 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 927:

/* Line 1455 of yacc.c  */
#line 7406 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 928:

/* Line 1455 of yacc.c  */
#line 7410 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 929:

/* Line 1455 of yacc.c  */
#line 7411 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 930:

/* Line 1455 of yacc.c  */
#line 7412 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 931:

/* Line 1455 of yacc.c  */
#line 7416 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 932:

/* Line 1455 of yacc.c  */
#line 7418 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            store_position_for_column((yyvsp[(2) - (2)].lex_str).str);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 933:

/* Line 1455 of yacc.c  */
#line 7423 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            store_position_for_column(first_keyword);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 934:

/* Line 1455 of yacc.c  */
#line 7430 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 935:

/* Line 1455 of yacc.c  */
#line 7431 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 936:

/* Line 1455 of yacc.c  */
#line 7432 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 937:

/* Line 1455 of yacc.c  */
#line 7433 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 938:

/* Line 1455 of yacc.c  */
#line 7438 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            /* READ ONLY and READ WRITE are mutually exclusive. */
            if (((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_WRITE) &&
                ((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_ONLY))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 939:

/* Line 1455 of yacc.c  */
#line 7454 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.num)= 0;
          }
    break;

  case 940:

/* Line 1455 of yacc.c  */
#line 7458 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 941:

/* Line 1455 of yacc.c  */
#line 7465 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 942:

/* Line 1455 of yacc.c  */
#line 7469 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (3)].num) | (yyvsp[(3) - (3)].num);
          }
    break;

  case 943:

/* Line 1455 of yacc.c  */
#line 7476 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 944:

/* Line 1455 of yacc.c  */
#line 7480 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
            Lex->value_list.empty();
            Lex->value_list.push_front((yyvsp[(6) - (6)].item));
          }
    break;

  case 945:

/* Line 1455 of yacc.c  */
#line 7486 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_ONLY;
          }
    break;

  case 946:

/* Line 1455 of yacc.c  */
#line 7490 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_WRITE;
          }
    break;

  case 947:

/* Line 1455 of yacc.c  */
#line 7497 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 948:

/* Line 1455 of yacc.c  */
#line 7504 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 949:

/* Line 1455 of yacc.c  */
#line 7508 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 950:

/* Line 1455 of yacc.c  */
#line 7509 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 951:

/* Line 1455 of yacc.c  */
#line 7510 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 952:

/* Line 1455 of yacc.c  */
#line 7515 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 953:

/* Line 1455 of yacc.c  */
#line 7525 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_repair_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 954:

/* Line 1455 of yacc.c  */
#line 7536 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 955:

/* Line 1455 of yacc.c  */
#line 7537 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 956:

/* Line 1455 of yacc.c  */
#line 7541 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 957:

/* Line 1455 of yacc.c  */
#line 7542 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 958:

/* Line 1455 of yacc.c  */
#line 7546 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 959:

/* Line 1455 of yacc.c  */
#line 7547 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 960:

/* Line 1455 of yacc.c  */
#line 7548 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 961:

/* Line 1455 of yacc.c  */
#line 7553 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 962:

/* Line 1455 of yacc.c  */
#line 7563 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_analyze_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 963:

/* Line 1455 of yacc.c  */
#line 7575 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 964:

/* Line 1455 of yacc.c  */
#line 7583 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 965:

/* Line 1455 of yacc.c  */
#line 7598 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_check_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 966:

/* Line 1455 of yacc.c  */
#line 7609 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 967:

/* Line 1455 of yacc.c  */
#line 7610 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 968:

/* Line 1455 of yacc.c  */
#line 7614 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 969:

/* Line 1455 of yacc.c  */
#line 7615 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 970:

/* Line 1455 of yacc.c  */
#line 7619 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 971:

/* Line 1455 of yacc.c  */
#line 7620 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 972:

/* Line 1455 of yacc.c  */
#line 7621 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 973:

/* Line 1455 of yacc.c  */
#line 7622 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 974:

/* Line 1455 of yacc.c  */
#line 7623 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 975:

/* Line 1455 of yacc.c  */
#line 7624 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 976:

/* Line 1455 of yacc.c  */
#line 7629 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 977:

/* Line 1455 of yacc.c  */
#line 7639 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_optimize_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 978:

/* Line 1455 of yacc.c  */
#line 7650 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 979:

/* Line 1455 of yacc.c  */
#line 7651 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 980:

/* Line 1455 of yacc.c  */
#line 7652 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 981:

/* Line 1455 of yacc.c  */
#line 7657 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 982:

/* Line 1455 of yacc.c  */
#line 7661 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 983:

/* Line 1455 of yacc.c  */
#line 7663 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 984:

/* Line 1455 of yacc.c  */
#line 7670 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 985:

/* Line 1455 of yacc.c  */
#line 7675 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 988:

/* Line 1455 of yacc.c  */
#line 7688 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING))
              MYSQL_YYABORT;
          }
    break;

  case 989:

/* Line 1455 of yacc.c  */
#line 7699 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->alter_info.reset();
          }
    break;

  case 990:

/* Line 1455 of yacc.c  */
#line 7703 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 995:

/* Line 1455 of yacc.c  */
#line 7722 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL, 0,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 996:

/* Line 1455 of yacc.c  */
#line 7731 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, 0,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 997:

/* Line 1455 of yacc.c  */
#line 7739 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 998:

/* Line 1455 of yacc.c  */
#line 7740 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 999:

/* Line 1455 of yacc.c  */
#line 7745 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
    break;

  case 1000:

/* Line 1455 of yacc.c  */
#line 7751 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1005:

/* Line 1455 of yacc.c  */
#line 7766 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num),
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1006:

/* Line 1455 of yacc.c  */
#line 7775 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (4)].table), NULL, (yyvsp[(4) - (4)].num),
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1007:

/* Line 1455 of yacc.c  */
#line 7784 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADMIN_PARTITION;
          }
    break;

  case 1009:

/* Line 1455 of yacc.c  */
#line 7791 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(YYTHD);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        old_mode ? 
                                        INDEX_HINT_MASK_JOIN : 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 1011:

/* Line 1455 of yacc.c  */
#line 7802 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { }
    break;

  case 1013:

/* Line 1455 of yacc.c  */
#line 7808 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1014:

/* Line 1455 of yacc.c  */
#line 7809 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 1015:

/* Line 1455 of yacc.c  */
#line 7819 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 1018:

/* Line 1455 of yacc.c  */
#line 7833 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1020:

/* Line 1455 of yacc.c  */
#line 7843 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1022:

/* Line 1455 of yacc.c  */
#line 7852 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1024:

/* Line 1455 of yacc.c  */
#line 7871 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1025:

/* Line 1455 of yacc.c  */
#line 7879 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1027:

/* Line 1455 of yacc.c  */
#line 7886 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1032:

/* Line 1455 of yacc.c  */
#line 7896 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
    break;

  case 1035:

/* Line 1455 of yacc.c  */
#line 7911 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1039:

/* Line 1455 of yacc.c  */
#line 7928 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=0;
              Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
            }
          }
    break;

  case 1040:

/* Line 1455 of yacc.c  */
#line 7956 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }         
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
    break;

  case 1042:

/* Line 1455 of yacc.c  */
#line 7988 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1043:

/* Line 1455 of yacc.c  */
#line 7994 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1046:

/* Line 1455 of yacc.c  */
#line 8006 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 1047:

/* Line 1455 of yacc.c  */
#line 8021 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_item_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1048:

/* Line 1455 of yacc.c  */
#line 8028 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info, false);
            }
            else if (!(yyvsp[(2) - (4)].item)->item_name.is_set())
            {
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 1049:

/* Line 1455 of yacc.c  */
#line 8052 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 1050:

/* Line 1455 of yacc.c  */
#line 8058 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 1051:

/* Line 1455 of yacc.c  */
#line 8064 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 1052:

/* Line 1455 of yacc.c  */
#line 8065 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1053:

/* Line 1455 of yacc.c  */
#line 8066 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1054:

/* Line 1455 of yacc.c  */
#line 8067 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1055:

/* Line 1455 of yacc.c  */
#line 8068 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1056:

/* Line 1455 of yacc.c  */
#line 8072 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1057:

/* Line 1455 of yacc.c  */
#line 8073 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1058:

/* Line 1455 of yacc.c  */
#line 8079 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1059:

/* Line 1455 of yacc.c  */
#line 8130 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (YYTHD->mem_root) Item_func_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1060:

/* Line 1455 of yacc.c  */
#line 8137 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1061:

/* Line 1455 of yacc.c  */
#line 8180 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1062:

/* Line 1455 of yacc.c  */
#line 8186 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1063:

/* Line 1455 of yacc.c  */
#line 8192 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1064:

/* Line 1455 of yacc.c  */
#line 8198 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1065:

/* Line 1455 of yacc.c  */
#line 8204 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1066:

/* Line 1455 of yacc.c  */
#line 8210 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1067:

/* Line 1455 of yacc.c  */
#line 8216 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1069:

/* Line 1455 of yacc.c  */
#line 8226 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1070:

/* Line 1455 of yacc.c  */
#line 8232 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1071:

/* Line 1455 of yacc.c  */
#line 8238 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1072:

/* Line 1455 of yacc.c  */
#line 8244 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1073:

/* Line 1455 of yacc.c  */
#line 8250 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1075:

/* Line 1455 of yacc.c  */
#line 8260 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1076:

/* Line 1455 of yacc.c  */
#line 8266 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1077:

/* Line 1455 of yacc.c  */
#line 8276 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1078:

/* Line 1455 of yacc.c  */
#line 8282 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1079:

/* Line 1455 of yacc.c  */
#line 8290 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1080:

/* Line 1455 of yacc.c  */
#line 8296 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (YYTHD->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1081:

/* Line 1455 of yacc.c  */
#line 8306 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1082:

/* Line 1455 of yacc.c  */
#line 8312 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1083:

/* Line 1455 of yacc.c  */
#line 8321 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Item *item1= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1084:

/* Line 1455 of yacc.c  */
#line 8331 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1085:

/* Line 1455 of yacc.c  */
#line 8337 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1086:

/* Line 1455 of yacc.c  */
#line 8347 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1087:

/* Line 1455 of yacc.c  */
#line 8353 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(YYTHD, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1089:

/* Line 1455 of yacc.c  */
#line 8366 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1090:

/* Line 1455 of yacc.c  */
#line 8372 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1091:

/* Line 1455 of yacc.c  */
#line 8378 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1092:

/* Line 1455 of yacc.c  */
#line 8384 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1093:

/* Line 1455 of yacc.c  */
#line 8390 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1094:

/* Line 1455 of yacc.c  */
#line 8396 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1095:

/* Line 1455 of yacc.c  */
#line 8402 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1096:

/* Line 1455 of yacc.c  */
#line 8408 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1097:

/* Line 1455 of yacc.c  */
#line 8414 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1098:

/* Line 1455 of yacc.c  */
#line 8420 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1099:

/* Line 1455 of yacc.c  */
#line 8426 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1100:

/* Line 1455 of yacc.c  */
#line 8432 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1101:

/* Line 1455 of yacc.c  */
#line 8438 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1102:

/* Line 1455 of yacc.c  */
#line 8444 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1112:

/* Line 1455 of yacc.c  */
#line 8473 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1113:

/* Line 1455 of yacc.c  */
#line 8474 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1114:

/* Line 1455 of yacc.c  */
#line 8475 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1115:

/* Line 1455 of yacc.c  */
#line 8476 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1116:

/* Line 1455 of yacc.c  */
#line 8477 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1117:

/* Line 1455 of yacc.c  */
#line 8478 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1118:

/* Line 1455 of yacc.c  */
#line 8482 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1119:

/* Line 1455 of yacc.c  */
#line 8483 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1125:

/* Line 1455 of yacc.c  */
#line 8493 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_string((yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1130:

/* Line 1455 of yacc.c  */
#line 8509 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1131:

/* Line 1455 of yacc.c  */
#line 8515 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1132:

/* Line 1455 of yacc.c  */
#line 8519 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1133:

/* Line 1455 of yacc.c  */
#line 8525 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1134:

/* Line 1455 of yacc.c  */
#line 8531 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1135:

/* Line 1455 of yacc.c  */
#line 8537 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { 
            (yyval.item)= new (YYTHD->mem_root) Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1136:

/* Line 1455 of yacc.c  */
#line 8543 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1137:

/* Line 1455 of yacc.c  */
#line 8545 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1138:

/* Line 1455 of yacc.c  */
#line 8552 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1139:

/* Line 1455 of yacc.c  */
#line 8559 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_exists_subselect((yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1140:

/* Line 1455 of yacc.c  */
#line 8565 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Item_string *item;
            (yyval.item)= NULL;
            /*
              If "expr" is reasonably short pure ASCII string literal,
              try to parse known ODBC style date, time or timestamp literals,
              e.g:
              SELECT {d'2001-01-01'};
              SELECT {t'10:20:30'};
              SELECT {ts'2001-01-01 10:20:30'};
            */
            if ((yyvsp[(3) - (4)].item)->type() == Item::STRING_ITEM &&
               (item= (Item_string *) (yyvsp[(3) - (4)].item)) &&
                item->collation.repertoire == MY_REPERTOIRE_ASCII &&
                item->str_value.length() < MAX_DATE_STRING_REP_LENGTH * 4)
            {
              enum_field_types type= MYSQL_TYPE_STRING;
              ErrConvString str(&item->str_value);
              LEX_STRING *ls= &(yyvsp[(2) - (4)].lex_str);
              if (ls->length == 1)
              {
                if (ls->str[0] == 'd')  /* {d'2001-01-01'} */
                  type= MYSQL_TYPE_DATE;
                else if (ls->str[0] == 't') /* {t'10:20:30'} */
                  type= MYSQL_TYPE_TIME;
              }
              else if (ls->length == 2) /* {ts'2001-01-01 10:20:30'} */
              {
                if (ls->str[0] == 't' && ls->str[1] == 's')
                  type= MYSQL_TYPE_DATETIME;
              }
              if (type != MYSQL_TYPE_STRING)
                (yyval.item)= create_temporal_literal(YYTHD,
                                            str.ptr(), str.length(),
                                            system_charset_info,
                                            type, false);
            }
            if ((yyval.item) == NULL)
              (yyval.item)= (yyvsp[(3) - (4)].item);
          }
    break;

  case 1141:

/* Line 1455 of yacc.c  */
#line 8606 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *i1= new (YYTHD->mem_root) Item_func_match(*(yyvsp[(2) - (7)].item_list), (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
    break;

  case 1142:

/* Line 1455 of yacc.c  */
#line 8615 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1143:

/* Line 1455 of yacc.c  */
#line 8622 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1144:

/* Line 1455 of yacc.c  */
#line 8630 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1145:

/* Line 1455 of yacc.c  */
#line 8636 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1146:

/* Line 1455 of yacc.c  */
#line 8643 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1147:

/* Line 1455 of yacc.c  */
#line 8649 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->m_name.ptr());
              MYSQL_YYABORT;
            }
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1148:

/* Line 1455 of yacc.c  */
#line 8663 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1149:

/* Line 1455 of yacc.c  */
#line 8671 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(5) - (5)].item),(yyvsp[(2) - (5)].item),(yyvsp[(3) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1150:

/* Line 1455 of yacc.c  */
#line 8686 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1151:

/* Line 1455 of yacc.c  */
#line 8692 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1152:

/* Line 1455 of yacc.c  */
#line 8698 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1153:

/* Line 1455 of yacc.c  */
#line 8706 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1154:

/* Line 1455 of yacc.c  */
#line 8712 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1155:

/* Line 1455 of yacc.c  */
#line 8718 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1156:

/* Line 1455 of yacc.c  */
#line 8724 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1157:

/* Line 1455 of yacc.c  */
#line 8730 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item));
            list->push_front((yyvsp[(3) - (6)].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1158:

/* Line 1455 of yacc.c  */
#line 8745 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1159:

/* Line 1455 of yacc.c  */
#line 8757 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1160:

/* Line 1455 of yacc.c  */
#line 8763 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1161:

/* Line 1455 of yacc.c  */
#line 8769 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1162:

/* Line 1455 of yacc.c  */
#line 8775 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1163:

/* Line 1455 of yacc.c  */
#line 8781 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1164:

/* Line 1455 of yacc.c  */
#line 8787 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_time_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1165:

/* Line 1455 of yacc.c  */
#line 8793 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_datetime_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1166:

/* Line 1455 of yacc.c  */
#line 8799 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1167:

/* Line 1455 of yacc.c  */
#line 8805 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1168:

/* Line 1455 of yacc.c  */
#line 8811 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1169:

/* Line 1455 of yacc.c  */
#line 8817 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1170:

/* Line 1455 of yacc.c  */
#line 8823 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1171:

/* Line 1455 of yacc.c  */
#line 8829 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1172:

/* Line 1455 of yacc.c  */
#line 8835 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1173:

/* Line 1455 of yacc.c  */
#line 8841 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1174:

/* Line 1455 of yacc.c  */
#line 8847 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1175:

/* Line 1455 of yacc.c  */
#line 8853 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1176:

/* Line 1455 of yacc.c  */
#line 8861 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1177:

/* Line 1455 of yacc.c  */
#line 8882 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1178:

/* Line 1455 of yacc.c  */
#line 8889 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1179:

/* Line 1455 of yacc.c  */
#line 8895 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1180:

/* Line 1455 of yacc.c  */
#line 8902 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1181:

/* Line 1455 of yacc.c  */
#line 8910 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1182:

/* Line 1455 of yacc.c  */
#line 8917 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1183:

/* Line 1455 of yacc.c  */
#line 8923 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1184:

/* Line 1455 of yacc.c  */
#line 8929 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1185:

/* Line 1455 of yacc.c  */
#line 8935 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(1) - (1)].item);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1186:

/* Line 1455 of yacc.c  */
#line 8940 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1187:

/* Line 1455 of yacc.c  */
#line 8946 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1188:

/* Line 1455 of yacc.c  */
#line 8953 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1189:

/* Line 1455 of yacc.c  */
#line 8959 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1190:

/* Line 1455 of yacc.c  */
#line 8965 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1191:

/* Line 1455 of yacc.c  */
#line 8971 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1192:

/* Line 1455 of yacc.c  */
#line 8977 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1193:

/* Line 1455 of yacc.c  */
#line 8983 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local((yyvsp[(2) - (2)].ulong_num));
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1194:

/* Line 1455 of yacc.c  */
#line 9001 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1195:

/* Line 1455 of yacc.c  */
#line 9007 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1196:

/* Line 1455 of yacc.c  */
#line 9013 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1197:

/* Line 1455 of yacc.c  */
#line 9020 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_utc((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1198:

/* Line 1455 of yacc.c  */
#line 9027 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_utc((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1199:

/* Line 1455 of yacc.c  */
#line 9042 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1200:

/* Line 1455 of yacc.c  */
#line 9048 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1201:

/* Line 1455 of yacc.c  */
#line 9054 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1202:

/* Line 1455 of yacc.c  */
#line 9060 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1203:

/* Line 1455 of yacc.c  */
#line 9066 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1204:

/* Line 1455 of yacc.c  */
#line 9073 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1205:

/* Line 1455 of yacc.c  */
#line 9079 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_format((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1206:

/* Line 1455 of yacc.c  */
#line 9085 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_format((yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1207:

/* Line 1455 of yacc.c  */
#line 9091 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1208:

/* Line 1455 of yacc.c  */
#line 9097 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_mod((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1209:

/* Line 1455 of yacc.c  */
#line 9103 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            WARN_DEPRECATED(YYTHD, "OLD_PASSWORD", "PASSWORD");
            (yyval.item)=  new (YYTHD->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            Lex->contains_plaintext_password= true;
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1210:

/* Line 1455 of yacc.c  */
#line 9111 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item* i1;
            Lex->contains_plaintext_password= true;
            if (thd->variables.old_passwords == 1)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1211:

/* Line 1455 of yacc.c  */
#line 9124 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1212:

/* Line 1455 of yacc.c  */
#line 9130 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1213:

/* Line 1455 of yacc.c  */
#line 9136 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1214:

/* Line 1455 of yacc.c  */
#line 9142 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_reverse((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1215:

/* Line 1455 of yacc.c  */
#line 9148 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_row_count();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1216:

/* Line 1455 of yacc.c  */
#line 9156 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1217:

/* Line 1455 of yacc.c  */
#line 9162 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_int(NAME_STRING("0"),
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1218:

/* Line 1455 of yacc.c  */
#line 9174 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1219:

/* Line 1455 of yacc.c  */
#line 9180 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_weight_string((yyvsp[(3) - (5)].item), 0, 0, (yyvsp[(4) - (5)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1220:

/* Line 1455 of yacc.c  */
#line 9186 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root)
                Item_func_weight_string((yyvsp[(3) - (8)].item), 0, (yyvsp[(6) - (8)].ulong_num),
                                        (yyvsp[(7) - (8)].ulong_num) | MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1221:

/* Line 1455 of yacc.c  */
#line 9194 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_char_typecast((yyvsp[(3) - (7)].item), (yyvsp[(6) - (7)].ulong_num), &my_charset_bin);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root)
                Item_func_weight_string(item, 0, (yyvsp[(6) - (7)].ulong_num), MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1222:

/* Line 1455 of yacc.c  */
#line 9204 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_weight_string((yyvsp[(3) - (10)].item), (yyvsp[(5) - (10)].ulong_num), (yyvsp[(7) - (10)].ulong_num), (yyvsp[(9) - (10)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1223:

/* Line 1455 of yacc.c  */
#line 9210 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 1224:

/* Line 1455 of yacc.c  */
#line 9226 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_mbr_rel((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                               Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1225:

/* Line 1455 of yacc.c  */
#line 9232 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1226:

/* Line 1455 of yacc.c  */
#line 9239 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1227:

/* Line 1455 of yacc.c  */
#line 9246 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1228:

/* Line 1455 of yacc.c  */
#line 9253 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1229:

/* Line 1455 of yacc.c  */
#line 9260 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1230:

/* Line 1455 of yacc.c  */
#line 9267 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD, Item_func_point((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item)));
          }
    break;

  case 1231:

/* Line 1455 of yacc.c  */
#line 9271 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1232:

/* Line 1455 of yacc.c  */
#line 9290 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
          }
    break;

  case 1233:

/* Line 1455 of yacc.c  */
#line 9293 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_func *builder;
            Item *item= NULL;

            if (sp_check_name(&(yyvsp[(1) - (5)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
            }
            else
            {
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1234:

/* Line 1455 of yacc.c  */
#line 9332 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[(1) - (6)].lex_str).str ||
                (check_and_convert_db_name(&(yyvsp[(1) - (6)].lex_str), FALSE) != IDENT_NAME_OK))
              MYSQL_YYABORT;
            if (sp_check_name(&(yyvsp[(3) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1235:

/* Line 1455 of yacc.c  */
#line 9372 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1236:

/* Line 1455 of yacc.c  */
#line 9374 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1237:

/* Line 1455 of yacc.c  */
#line 9378 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1238:

/* Line 1455 of yacc.c  */
#line 9379 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1239:

/* Line 1455 of yacc.c  */
#line 9383 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1240:

/* Line 1455 of yacc.c  */
#line 9384 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1241:

/* Line 1455 of yacc.c  */
#line 9388 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1242:

/* Line 1455 of yacc.c  */
#line 9389 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1243:

/* Line 1455 of yacc.c  */
#line 9394 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1244:

/* Line 1455 of yacc.c  */
#line 9401 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1245:

/* Line 1455 of yacc.c  */
#line 9409 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info, false);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[(2) - (4)].item)->type() != Item::FIELD_ITEM &&
                     (yyvsp[(2) - (4)].item)->type() != Item::REF_ITEM /* For HAVING */ )
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), YYTHD->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1246:

/* Line 1455 of yacc.c  */
#line 9435 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1247:

/* Line 1455 of yacc.c  */
#line 9441 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1248:

/* Line 1455 of yacc.c  */
#line 9447 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1249:

/* Line 1455 of yacc.c  */
#line 9453 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1250:

/* Line 1455 of yacc.c  */
#line 9459 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1251:

/* Line 1455 of yacc.c  */
#line 9465 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1252:

/* Line 1455 of yacc.c  */
#line 9474 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1253:

/* Line 1455 of yacc.c  */
#line 9480 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1254:

/* Line 1455 of yacc.c  */
#line 9482 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1255:

/* Line 1455 of yacc.c  */
#line 9484 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(* (yyvsp[(5) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1256:

/* Line 1455 of yacc.c  */
#line 9490 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1257:

/* Line 1455 of yacc.c  */
#line 9501 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1258:

/* Line 1455 of yacc.c  */
#line 9507 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1259:

/* Line 1455 of yacc.c  */
#line 9513 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1260:

/* Line 1455 of yacc.c  */
#line 9519 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1261:

/* Line 1455 of yacc.c  */
#line 9525 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1262:

/* Line 1455 of yacc.c  */
#line 9531 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1263:

/* Line 1455 of yacc.c  */
#line 9537 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1264:

/* Line 1455 of yacc.c  */
#line 9543 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1265:

/* Line 1455 of yacc.c  */
#line 9549 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1266:

/* Line 1455 of yacc.c  */
#line 9555 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1267:

/* Line 1455 of yacc.c  */
#line 9559 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (YYTHD->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
            sel->gorder_list.empty();
          }
    break;

  case 1268:

/* Line 1455 of yacc.c  */
#line 9574 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1269:

/* Line 1455 of yacc.c  */
#line 9582 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1270:

/* Line 1455 of yacc.c  */
#line 9589 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item=
              new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item), false);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
            lex->set_var_list.push_back(item);
          }
    break;

  case 1271:

/* Line 1455 of yacc.c  */
#line 9600 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
          }
    break;

  case 1272:

/* Line 1455 of yacc.c  */
#line 9608 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(YYTHD, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
          }
    break;

  case 1273:

/* Line 1455 of yacc.c  */
#line 9621 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1274:

/* Line 1455 of yacc.c  */
#line 9622 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1275:

/* Line 1455 of yacc.c  */
#line 9627 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1276:

/* Line 1455 of yacc.c  */
#line 9632 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1278:

/* Line 1455 of yacc.c  */
#line 9638 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1280:

/* Line 1455 of yacc.c  */
#line 9655 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { if (add_gorder_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1281:

/* Line 1455 of yacc.c  */
#line 9657 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { if (add_gorder_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1282:

/* Line 1455 of yacc.c  */
#line 9662 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1283:

/* Line 1455 of yacc.c  */
#line 9671 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1284:

/* Line 1455 of yacc.c  */
#line 9679 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1285:

/* Line 1455 of yacc.c  */
#line 9681 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1286:

/* Line 1455 of yacc.c  */
#line 9683 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1287:

/* Line 1455 of yacc.c  */
#line 9685 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1288:

/* Line 1455 of yacc.c  */
#line 9687 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1289:

/* Line 1455 of yacc.c  */
#line 9689 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1290:

/* Line 1455 of yacc.c  */
#line 9691 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1291:

/* Line 1455 of yacc.c  */
#line 9693 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.cast_type)= ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec= Lex->length= (char *) 0; }
    break;

  case 1292:

/* Line 1455 of yacc.c  */
#line 9695 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.cast_type)= ITEM_CAST_TIME; Lex->charset= NULL; Lex->length= (char *) 0; }
    break;

  case 1293:

/* Line 1455 of yacc.c  */
#line 9697 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.cast_type)= ITEM_CAST_DATETIME; Lex->charset= NULL; Lex->length= (char *) 0; }
    break;

  case 1294:

/* Line 1455 of yacc.c  */
#line 9699 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1295:

/* Line 1455 of yacc.c  */
#line 9703 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1296:

/* Line 1455 of yacc.c  */
#line 9704 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1297:

/* Line 1455 of yacc.c  */
#line 9709 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1298:

/* Line 1455 of yacc.c  */
#line 9716 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1299:

/* Line 1455 of yacc.c  */
#line 9723 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1300:

/* Line 1455 of yacc.c  */
#line 9724 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1301:

/* Line 1455 of yacc.c  */
#line 9729 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1302:

/* Line 1455 of yacc.c  */
#line 9736 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1303:

/* Line 1455 of yacc.c  */
#line 9743 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1304:

/* Line 1455 of yacc.c  */
#line 9744 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1305:

/* Line 1455 of yacc.c  */
#line 9748 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1306:

/* Line 1455 of yacc.c  */
#line 9749 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1307:

/* Line 1455 of yacc.c  */
#line 9754 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1308:

/* Line 1455 of yacc.c  */
#line 9762 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1309:

/* Line 1455 of yacc.c  */
#line 9772 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1310:

/* Line 1455 of yacc.c  */
#line 9774 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
              MYSQL_YYABORT;
          }
    break;

  case 1311:

/* Line 1455 of yacc.c  */
#line 9782 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1312:

/* Line 1455 of yacc.c  */
#line 9793 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1313:

/* Line 1455 of yacc.c  */
#line 9794 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1314:

/* Line 1455 of yacc.c  */
#line 9800 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1315:

/* Line 1455 of yacc.c  */
#line 9802 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1316:

/* Line 1455 of yacc.c  */
#line 9822 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); }
    break;

  case 1317:

/* Line 1455 of yacc.c  */
#line 9824 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=1; }
    break;

  case 1318:

/* Line 1455 of yacc.c  */
#line 9827 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1319:

/* Line 1455 of yacc.c  */
#line 9835 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1320:

/* Line 1455 of yacc.c  */
#line 9842 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1321:

/* Line 1455 of yacc.c  */
#line 9850 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyvsp[(3) - (6)].table_list)->straight=1;
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1322:

/* Line 1455 of yacc.c  */
#line 9858 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1323:

/* Line 1455 of yacc.c  */
#line 9862 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); (yyval.table_list)=(yyvsp[(3) - (8)].table_list); }
    break;

  case 1324:

/* Line 1455 of yacc.c  */
#line 9864 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1325:

/* Line 1455 of yacc.c  */
#line 9872 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1326:

/* Line 1455 of yacc.c  */
#line 9880 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1327:

/* Line 1455 of yacc.c  */
#line 9888 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1328:

/* Line 1455 of yacc.c  */
#line 9892 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1329:

/* Line 1455 of yacc.c  */
#line 9898 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1330:

/* Line 1455 of yacc.c  */
#line 9908 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1331:

/* Line 1455 of yacc.c  */
#line 9916 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1332:

/* Line 1455 of yacc.c  */
#line 9925 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1333:

/* Line 1455 of yacc.c  */
#line 9929 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1334:

/* Line 1455 of yacc.c  */
#line 9936 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1335:

/* Line 1455 of yacc.c  */
#line 9946 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1336:

/* Line 1455 of yacc.c  */
#line 9947 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1337:

/* Line 1455 of yacc.c  */
#line 9948 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1338:

/* Line 1455 of yacc.c  */
#line 9956 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.string_list)= 0;}
    break;

  case 1340:

/* Line 1455 of yacc.c  */
#line 9962 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.string_list)= (yyvsp[(3) - (5)].string_list);
          }
    break;

  case 1341:

/* Line 1455 of yacc.c  */
#line 9976 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1342:

/* Line 1455 of yacc.c  */
#line 9981 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(YYTHD, (yyvsp[(2) - (5)].table), (yyvsp[(4) - (5)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                Select->pop_index_hints(),
                                                (yyvsp[(3) - (5)].string_list))))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1343:

/* Line 1455 of yacc.c  */
#line 9990 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1344:

/* Line 1455 of yacc.c  */
#line 10030 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[(3) - (5)].table_list) || (yyvsp[(5) - (5)].lex_str_ptr)) && (yyvsp[(2) - (5)].select_lex)->embedding &&
                !(yyvsp[(2) - (5)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (5)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               ti, (yyvsp[(5) - (5)].lex_str_ptr), 0)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            else if ((yyvsp[(5) - (5)].lex_str_ptr) != NULL)
            {
              /*
                Tables with or without joins within parentheses cannot
                have aliases, and we ruled out derived tables above.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (5)].table_list);
            }
          }
    break;

  case 1345:

/* Line 1455 of yacc.c  */
#line 10102 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (2)].table_list) && (yyvsp[(2) - (2)].is_not_empty))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1346:

/* Line 1455 of yacc.c  */
#line 10112 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 1347:

/* Line 1455 of yacc.c  */
#line 10117 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
             */
            Lex->pop_context();
          }
    break;

  case 1348:

/* Line 1455 of yacc.c  */
#line 10125 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (7)].table_list) != NULL)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1349:

/* Line 1455 of yacc.c  */
#line 10137 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1350:

/* Line 1455 of yacc.c  */
#line 10156 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1351:

/* Line 1455 of yacc.c  */
#line 10164 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1353:

/* Line 1455 of yacc.c  */
#line 10173 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1354:

/* Line 1455 of yacc.c  */
#line 10179 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1355:

/* Line 1455 of yacc.c  */
#line 10195 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1356:

/* Line 1455 of yacc.c  */
#line 10212 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1358:

/* Line 1455 of yacc.c  */
#line 10219 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1359:

/* Line 1455 of yacc.c  */
#line 10224 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1360:

/* Line 1455 of yacc.c  */
#line 10249 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1361:

/* Line 1455 of yacc.c  */
#line 10250 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1362:

/* Line 1455 of yacc.c  */
#line 10255 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.num)= old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1363:

/* Line 1455 of yacc.c  */
#line 10258 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1364:

/* Line 1455 of yacc.c  */
#line 10259 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1365:

/* Line 1455 of yacc.c  */
#line 10260 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1366:

/* Line 1455 of yacc.c  */
#line 10264 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1367:

/* Line 1455 of yacc.c  */
#line 10265 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1368:

/* Line 1455 of yacc.c  */
#line 10270 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1370:

/* Line 1455 of yacc.c  */
#line 10275 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1375:

/* Line 1455 of yacc.c  */
#line 10288 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Select->alloc_index_hints(YYTHD); }
    break;

  case 1377:

/* Line 1455 of yacc.c  */
#line 10292 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1379:

/* Line 1455 of yacc.c  */
#line 10297 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, NULL, 0); }
    break;

  case 1380:

/* Line 1455 of yacc.c  */
#line 10298 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1381:

/* Line 1455 of yacc.c  */
#line 10303 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1382:

/* Line 1455 of yacc.c  */
#line 10305 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (char *)"PRIMARY", 7); }
    break;

  case 1385:

/* Line 1455 of yacc.c  */
#line 10315 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
    break;

  case 1386:

/* Line 1455 of yacc.c  */
#line 10326 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1387:

/* Line 1455 of yacc.c  */
#line 10338 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1388:

/* Line 1455 of yacc.c  */
#line 10339 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1389:

/* Line 1455 of yacc.c  */
#line 10340 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1390:

/* Line 1455 of yacc.c  */
#line 10341 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1391:

/* Line 1455 of yacc.c  */
#line 10342 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1392:

/* Line 1455 of yacc.c  */
#line 10343 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1393:

/* Line 1455 of yacc.c  */
#line 10344 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1394:

/* Line 1455 of yacc.c  */
#line 10345 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1395:

/* Line 1455 of yacc.c  */
#line 10346 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1396:

/* Line 1455 of yacc.c  */
#line 10347 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1397:

/* Line 1455 of yacc.c  */
#line 10348 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1398:

/* Line 1455 of yacc.c  */
#line 10349 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1399:

/* Line 1455 of yacc.c  */
#line 10353 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1400:

/* Line 1455 of yacc.c  */
#line 10354 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1401:

/* Line 1455 of yacc.c  */
#line 10355 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1402:

/* Line 1455 of yacc.c  */
#line 10356 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1403:

/* Line 1455 of yacc.c  */
#line 10357 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1404:

/* Line 1455 of yacc.c  */
#line 10358 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1405:

/* Line 1455 of yacc.c  */
#line 10359 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1406:

/* Line 1455 of yacc.c  */
#line 10360 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1407:

/* Line 1455 of yacc.c  */
#line 10361 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1408:

/* Line 1455 of yacc.c  */
#line 10365 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_DATE; }
    break;

  case 1409:

/* Line 1455 of yacc.c  */
#line 10366 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_TIME; }
    break;

  case 1410:

/* Line 1455 of yacc.c  */
#line 10367 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_DATETIME; }
    break;

  case 1411:

/* Line 1455 of yacc.c  */
#line 10368 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_DATETIME; }
    break;

  case 1415:

/* Line 1455 of yacc.c  */
#line 10378 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1416:

/* Line 1455 of yacc.c  */
#line 10380 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1419:

/* Line 1455 of yacc.c  */
#line 10393 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1420:

/* Line 1455 of yacc.c  */
#line 10395 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1421:

/* Line 1455 of yacc.c  */
#line 10399 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= (yyvsp[(3) - (3)].item);
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1423:

/* Line 1455 of yacc.c  */
#line 10411 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1424:

/* Line 1455 of yacc.c  */
#line 10415 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= (yyvsp[(3) - (3)].item);
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1425:

/* Line 1455 of yacc.c  */
#line 10426 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1426:

/* Line 1455 of yacc.c  */
#line 10431 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string("", 0, &my_charset_latin1) :
                 new (thd->mem_root) Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1429:

/* Line 1455 of yacc.c  */
#line 10453 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1430:

/* Line 1455 of yacc.c  */
#line 10455 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1431:

/* Line 1455 of yacc.c  */
#line 10459 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1432:

/* Line 1455 of yacc.c  */
#line 10461 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT;
          }
    break;

  case 1433:

/* Line 1455 of yacc.c  */
#line 10481 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            if (lex->current_select->options & SELECT_DISTINCT)
            {
              // DISTINCT+ROLLUP does not work
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP", "DISTINCT");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1437:

/* Line 1455 of yacc.c  */
#line 10521 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1440:

/* Line 1455 of yacc.c  */
#line 10540 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1442:

/* Line 1455 of yacc.c  */
#line 10575 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1443:

/* Line 1455 of yacc.c  */
#line 10577 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1444:

/* Line 1455 of yacc.c  */
#line 10581 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1445:

/* Line 1455 of yacc.c  */
#line 10582 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1446:

/* Line 1455 of yacc.c  */
#line 10583 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1447:

/* Line 1455 of yacc.c  */
#line 10588 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
          }
    break;

  case 1448:

/* Line 1455 of yacc.c  */
#line 10594 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1449:

/* Line 1455 of yacc.c  */
#line 10598 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1450:

/* Line 1455 of yacc.c  */
#line 10599 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1451:

/* Line 1455 of yacc.c  */
#line 10604 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (Select->select_limit->fixed &&
                Select->select_limit->val_int() != 0)
            {
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            }
          }
    break;

  case 1452:

/* Line 1455 of yacc.c  */
#line 10615 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1453:

/* Line 1455 of yacc.c  */
#line 10622 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1454:

/* Line 1455 of yacc.c  */
#line 10629 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1455:

/* Line 1455 of yacc.c  */
#line 10639 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
          THD *thd= YYTHD;
          LEX *lex= Lex;
          Lex_input_stream *lip= YYLIP;
          sp_head *sp= lex->sphead;
          const char *query_start_ptr=
            sp ? sp->m_parser_data.get_current_stmt_start_ptr() : NULL;

          Item_splocal *v= create_item_for_sp_var(thd, (yyvsp[(1) - (1)].lex_str), NULL,
                                                  query_start_ptr,
                                                  lip->get_tok_start(),
                                                  lip->get_ptr());
          if (!v)
            MYSQL_YYABORT;

          lex->safe_to_cache_query= false;

          if (v->type() != Item::INT_ITEM)
          {
            my_error(ER_WRONG_SPVAR_TYPE_IN_LIMIT, MYF(0));
            MYSQL_YYABORT;
          }

          v->limit_clause_param= true;
          (yyval.item)= v;
        }
    break;

  case 1456:

/* Line 1455 of yacc.c  */
#line 10666 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1457:

/* Line 1455 of yacc.c  */
#line 10670 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1458:

/* Line 1455 of yacc.c  */
#line 10676 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1459:

/* Line 1455 of yacc.c  */
#line 10682 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1460:

/* Line 1455 of yacc.c  */
#line 10691 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1461:

/* Line 1455 of yacc.c  */
#line 10696 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            if (Select->select_limit->fixed &&
                Select->select_limit->val_int() != 0)
            {
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            }
            sel->explicit_limit= 1;
          }
    break;

  case 1462:

/* Line 1455 of yacc.c  */
#line 10709 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1463:

/* Line 1455 of yacc.c  */
#line 10710 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1464:

/* Line 1455 of yacc.c  */
#line 10711 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1465:

/* Line 1455 of yacc.c  */
#line 10712 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1466:

/* Line 1455 of yacc.c  */
#line 10713 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1467:

/* Line 1455 of yacc.c  */
#line 10714 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1468:

/* Line 1455 of yacc.c  */
#line 10718 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1469:

/* Line 1455 of yacc.c  */
#line 10719 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1470:

/* Line 1455 of yacc.c  */
#line 10720 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1471:

/* Line 1455 of yacc.c  */
#line 10721 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1472:

/* Line 1455 of yacc.c  */
#line 10722 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1473:

/* Line 1455 of yacc.c  */
#line 10726 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1474:

/* Line 1455 of yacc.c  */
#line 10727 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1475:

/* Line 1455 of yacc.c  */
#line 10728 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1476:

/* Line 1455 of yacc.c  */
#line 10729 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1477:

/* Line 1455 of yacc.c  */
#line 10730 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1478:

/* Line 1455 of yacc.c  */
#line 10734 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1479:

/* Line 1455 of yacc.c  */
#line 10735 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1480:

/* Line 1455 of yacc.c  */
#line 10736 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1481:

/* Line 1455 of yacc.c  */
#line 10737 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1482:

/* Line 1455 of yacc.c  */
#line 10742 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
    break;

  case 1486:

/* Line 1455 of yacc.c  */
#line 10753 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            
            if (!lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }

            if (lex->result != NULL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "INTO");
              MYSQL_YYABORT;
            }

            if ((lex->proc_analyse= new Proc_analyse_params) == NULL)
            {
              my_error(ER_OUTOFMEMORY, MYF(ME_FATALERROR));
              MYSQL_YYABORT;
            }
            
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1488:

/* Line 1455 of yacc.c  */
#line 10786 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1489:

/* Line 1455 of yacc.c  */
#line 10788 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->proc_analyse->max_tree_elements= (yyvsp[(1) - (1)].ulonglong_number);
          }
    break;

  case 1490:

/* Line 1455 of yacc.c  */
#line 10792 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->proc_analyse->max_tree_elements= (yyvsp[(1) - (3)].ulonglong_number);
            Lex->proc_analyse->max_treemem= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 1491:

/* Line 1455 of yacc.c  */
#line 10800 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            int error;
            (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error);
            if (error != 0)
            {
              my_error(ER_WRONG_PARAMETERS_TO_PROCEDURE, MYF(0), "ANALYSE");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1492:

/* Line 1455 of yacc.c  */
#line 10812 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe && (!(lex->result= new select_dumpvar())))
              MYSQL_YYABORT;
          }
    break;

  case 1493:

/* Line 1455 of yacc.c  */
#line 10818 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1495:

/* Line 1455 of yacc.c  */
#line 10823 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1496:

/* Line 1455 of yacc.c  */
#line 10828 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result) 
            {
              my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1497:

/* Line 1455 of yacc.c  */
#line 10847 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
#ifndef DBUG_OFF
            sp_head *sp= lex->sphead;
#endif
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (!pctx || !(spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(1) - (1)].lex_str), 1, spv->offset, spv->type);

              if (var == NULL)
                MYSQL_YYABORT;

              ((select_dumpvar *) lex->result)->var_list.push_back(var);

#ifndef DBUG_OFF
              var->sp= sp;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1498:

/* Line 1455 of yacc.c  */
#line 10886 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1500:

/* Line 1455 of yacc.c  */
#line 10898 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange)))
              MYSQL_YYABORT;
          }
    break;

  case 1501:

/* Line 1455 of yacc.c  */
#line 10906 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1503:

/* Line 1455 of yacc.c  */
#line 10909 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1504:

/* Line 1455 of yacc.c  */
#line 10921 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1505:

/* Line 1455 of yacc.c  */
#line 10932 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1506:

/* Line 1455 of yacc.c  */
#line 10938 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1507:

/* Line 1455 of yacc.c  */
#line 10949 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[(2) - (4)].num);
            lex->drop_if_exists= (yyvsp[(4) - (4)].num);
          }
    break;

  case 1508:

/* Line 1455 of yacc.c  */
#line 10956 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1509:

/* Line 1455 of yacc.c  */
#line 10957 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1510:

/* Line 1455 of yacc.c  */
#line 10958 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (6)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= Alter_info::ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad);
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(5) - (6)].table), NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
          }
    break;

  case 1511:

/* Line 1455 of yacc.c  */
#line 10971 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1512:

/* Line 1455 of yacc.c  */
#line 10973 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->drop_if_exists=(yyvsp[(3) - (4)].num);
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1513:

/* Line 1455 of yacc.c  */
#line 10980 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str &&
                (check_and_convert_db_name(&(yyvsp[(4) - (6)].lex_str), FALSE) != IDENT_NAME_OK))
               MYSQL_YYABORT;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (6)].num);
            spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1514:

/* Line 1455 of yacc.c  */
#line 11001 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1515:

/* Line 1455 of yacc.c  */
#line 11022 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1516:

/* Line 1455 of yacc.c  */
#line 11034 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1517:

/* Line 1455 of yacc.c  */
#line 11038 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->drop_if_exists= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1518:

/* Line 1455 of yacc.c  */
#line 11044 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1519:

/* Line 1455 of yacc.c  */
#line 11046 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
    break;

  case 1520:

/* Line 1455 of yacc.c  */
#line 11052 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1521:

/* Line 1455 of yacc.c  */
#line 11059 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1522:

/* Line 1455 of yacc.c  */
#line 11064 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1523:

/* Line 1455 of yacc.c  */
#line 11069 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->server_options.server_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(4) - (4)].lex_str).length;
          }
    break;

  case 1526:

/* Line 1455 of yacc.c  */
#line 11084 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING))
              MYSQL_YYABORT;
          }
    break;

  case 1527:

/* Line 1455 of yacc.c  */
#line 11093 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           NULL,
                                           (yyvsp[(2) - (2)].string_list)))
              MYSQL_YYABORT;
          }
    break;

  case 1530:

/* Line 1455 of yacc.c  */
#line 11109 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS))
              MYSQL_YYABORT;
          }
    break;

  case 1531:

/* Line 1455 of yacc.c  */
#line 11117 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1532:

/* Line 1455 of yacc.c  */
#line 11118 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1533:

/* Line 1455 of yacc.c  */
#line 11122 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1534:

/* Line 1455 of yacc.c  */
#line 11123 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1542:

/* Line 1455 of yacc.c  */
#line 11146 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
    break;

  case 1543:

/* Line 1455 of yacc.c  */
#line 11154 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1544:

/* Line 1455 of yacc.c  */
#line 11159 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1545:

/* Line 1455 of yacc.c  */
#line 11164 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1546:

/* Line 1455 of yacc.c  */
#line 11171 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1547:

/* Line 1455 of yacc.c  */
#line 11176 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1548:

/* Line 1455 of yacc.c  */
#line 11181 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              If it is SP we do not allow insert optimisation whan result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
#else
            (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
#endif
          }
    break;

  case 1549:

/* Line 1455 of yacc.c  */
#line 11193 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1550:

/* Line 1455 of yacc.c  */
#line 11195 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;

          push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                              ER_WARN_DEPRECATED_SYNTAX,
                              ER(ER_WARN_DEPRECATED_SYNTAX),
                              "INSERT DELAYED", "INSERT");
        }
    break;

  case 1551:

/* Line 1455 of yacc.c  */
#line 11207 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1552:

/* Line 1455 of yacc.c  */
#line 11211 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1553:

/* Line 1455 of yacc.c  */
#line 11213 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;

          push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                              ER_WARN_DEPRECATED_SYNTAX,
                              ER(ER_WARN_DEPRECATED_SYNTAX),
                              "REPLACE DELAYED", "REPLACE");
        }
    break;

  case 1554:

/* Line 1455 of yacc.c  */
#line 11228 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1555:

/* Line 1455 of yacc.c  */
#line 11229 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1556:

/* Line 1455 of yacc.c  */
#line 11234 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1557:

/* Line 1455 of yacc.c  */
#line 11242 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1558:

/* Line 1455 of yacc.c  */
#line 11243 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1559:

/* Line 1455 of yacc.c  */
#line 11244 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1560:

/* Line 1455 of yacc.c  */
#line 11246 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1562:

/* Line 1455 of yacc.c  */
#line 11256 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1563:

/* Line 1455 of yacc.c  */
#line 11257 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1564:

/* Line 1455 of yacc.c  */
#line 11261 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1565:

/* Line 1455 of yacc.c  */
#line 11262 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1566:

/* Line 1455 of yacc.c  */
#line 11264 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1567:

/* Line 1455 of yacc.c  */
#line 11265 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1568:

/* Line 1455 of yacc.c  */
#line 11267 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1569:

/* Line 1455 of yacc.c  */
#line 11268 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1574:

/* Line 1455 of yacc.c  */
#line 11283 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1575:

/* Line 1455 of yacc.c  */
#line 11292 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1576:

/* Line 1455 of yacc.c  */
#line 11293 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1577:

/* Line 1455 of yacc.c  */
#line 11297 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1578:

/* Line 1455 of yacc.c  */
#line 11298 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1579:

/* Line 1455 of yacc.c  */
#line 11303 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1580:

/* Line 1455 of yacc.c  */
#line 11308 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1581:

/* Line 1455 of yacc.c  */
#line 11316 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1583:

/* Line 1455 of yacc.c  */
#line 11322 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1584:

/* Line 1455 of yacc.c  */
#line 11327 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1585:

/* Line 1455 of yacc.c  */
#line 11334 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1586:

/* Line 1455 of yacc.c  */
#line 11336 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1588:

/* Line 1455 of yacc.c  */
#line 11345 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1590:

/* Line 1455 of yacc.c  */
#line 11353 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1591:

/* Line 1455 of yacc.c  */
#line 11361 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1592:

/* Line 1455 of yacc.c  */
#line 11379 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1595:

/* Line 1455 of yacc.c  */
#line 11389 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (add_item_to_list(YYTHD, (yyvsp[(1) - (3)].item)) || add_value_to_list(YYTHD, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1598:

/* Line 1455 of yacc.c  */
#line 11402 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1599:

/* Line 1455 of yacc.c  */
#line 11411 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1600:

/* Line 1455 of yacc.c  */
#line 11412 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1601:

/* Line 1455 of yacc.c  */
#line 11419 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1603:

/* Line 1455 of yacc.c  */
#line 11432 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(2) - (3)].table), NULL, TL_OPTION_UPDATING,
                                           NULL,
                                           (yyvsp[(3) - (3)].string_list)))
              MYSQL_YYABORT;
          }
    break;

  case 1604:

/* Line 1455 of yacc.c  */
#line 11439 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1605:

/* Line 1455 of yacc.c  */
#line 11441 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
          }
    break;

  case 1606:

/* Line 1455 of yacc.c  */
#line 11445 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1607:

/* Line 1455 of yacc.c  */
#line 11450 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
          }
    break;

  case 1608:

/* Line 1455 of yacc.c  */
#line 11454 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1611:

/* Line 1455 of yacc.c  */
#line 11467 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS))
              MYSQL_YYABORT;
          }
    break;

  case 1612:

/* Line 1455 of yacc.c  */
#line 11478 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS))
              MYSQL_YYABORT;
          }
    break;

  case 1613:

/* Line 1455 of yacc.c  */
#line 11491 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1614:

/* Line 1455 of yacc.c  */
#line 11492 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1615:

/* Line 1455 of yacc.c  */
#line 11496 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1616:

/* Line 1455 of yacc.c  */
#line 11497 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1617:

/* Line 1455 of yacc.c  */
#line 11501 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1618:

/* Line 1455 of yacc.c  */
#line 11502 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1619:

/* Line 1455 of yacc.c  */
#line 11503 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1620:

/* Line 1455 of yacc.c  */
#line 11508 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
          }
    break;

  case 1621:

/* Line 1455 of yacc.c  */
#line 11517 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_truncate_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1628:

/* Line 1455 of yacc.c  */
#line 11542 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1629:

/* Line 1455 of yacc.c  */
#line 11546 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1630:

/* Line 1455 of yacc.c  */
#line 11550 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1631:

/* Line 1455 of yacc.c  */
#line 11554 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1632:

/* Line 1455 of yacc.c  */
#line 11558 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1633:

/* Line 1455 of yacc.c  */
#line 11562 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1634:

/* Line 1455 of yacc.c  */
#line 11566 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1635:

/* Line 1455 of yacc.c  */
#line 11570 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1636:

/* Line 1455 of yacc.c  */
#line 11574 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1637:

/* Line 1455 of yacc.c  */
#line 11581 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1638:

/* Line 1455 of yacc.c  */
#line 11585 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1639:

/* Line 1455 of yacc.c  */
#line 11594 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            memset(&lex->create_info, 0, sizeof(lex->create_info));
          }
    break;

  case 1640:

/* Line 1455 of yacc.c  */
#line 11602 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1641:

/* Line 1455 of yacc.c  */
#line 11609 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
           }
    break;

  case 1642:

/* Line 1455 of yacc.c  */
#line 11614 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
           }
    break;

  case 1643:

/* Line 1455 of yacc.c  */
#line 11620 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
           }
    break;

  case 1644:

/* Line 1455 of yacc.c  */
#line 11626 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
           }
    break;

  case 1645:

/* Line 1455 of yacc.c  */
#line 11632 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
           }
    break;

  case 1646:

/* Line 1455 of yacc.c  */
#line 11638 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
          }
    break;

  case 1647:

/* Line 1455 of yacc.c  */
#line 11644 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
          }
    break;

  case 1648:

/* Line 1455 of yacc.c  */
#line 11649 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1649:

/* Line 1455 of yacc.c  */
#line 11651 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1650:

/* Line 1455 of yacc.c  */
#line 11653 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
          }
    break;

  case 1651:

/* Line 1455 of yacc.c  */
#line 11660 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1652:

/* Line 1455 of yacc.c  */
#line 11664 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1653:

/* Line 1455 of yacc.c  */
#line 11668 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1655:

/* Line 1455 of yacc.c  */
#line 11673 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
    break;

  case 1657:

/* Line 1455 of yacc.c  */
#line 11678 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
          }
    break;

  case 1658:

/* Line 1455 of yacc.c  */
#line 11685 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
          }
    break;

  case 1659:

/* Line 1455 of yacc.c  */
#line 11690 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1660:

/* Line 1455 of yacc.c  */
#line 11695 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1661:

/* Line 1455 of yacc.c  */
#line 11697 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1662:

/* Line 1455 of yacc.c  */
#line 11699 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1663:

/* Line 1455 of yacc.c  */
#line 11701 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1664:

/* Line 1455 of yacc.c  */
#line 11703 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX,
                                ER(ER_WARN_DEPRECATED_SYNTAX),
                                "SHOW PROFILES", "Performance Schema");
            Lex->sql_command = SQLCOM_SHOW_PROFILES;
          }
    break;

  case 1665:

/* Line 1455 of yacc.c  */
#line 11711 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX,
                                ER(ER_WARN_DEPRECATED_SYNTAX),
                                "SHOW PROFILE", "Performance Schema");
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
          }
    break;

  case 1666:

/* Line 1455 of yacc.c  */
#line 11720 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
          }
    break;

  case 1667:

/* Line 1455 of yacc.c  */
#line 11726 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1668:

/* Line 1455 of yacc.c  */
#line 11728 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
          }
    break;

  case 1669:

/* Line 1455 of yacc.c  */
#line 11734 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
          }
    break;

  case 1670:

/* Line 1455 of yacc.c  */
#line 11739 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
          }
    break;

  case 1671:

/* Line 1455 of yacc.c  */
#line 11744 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            LEX_USER *curr_user;
            if (!(curr_user= (LEX_USER*) lex->thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            memset(curr_user, 0, sizeof(st_lex_user));
            lex->grant_user= curr_user;
          }
    break;

  case 1672:

/* Line 1455 of yacc.c  */
#line 11754 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (3)].lex_user);
            lex->grant_user->password=null_lex_str;
          }
    break;

  case 1673:

/* Line 1455 of yacc.c  */
#line 11761 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[(3) - (4)].num);
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1674:

/* Line 1455 of yacc.c  */
#line 11767 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->only_view= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1675:

/* Line 1455 of yacc.c  */
#line 11776 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1676:

/* Line 1455 of yacc.c  */
#line 11784 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1677:

/* Line 1455 of yacc.c  */
#line 11788 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
          }
    break;

  case 1678:

/* Line 1455 of yacc.c  */
#line 11793 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            WARN_DEPRECATED(YYTHD, "SHOW SLAVE STATUS NOLOCK", "SHOW SLAVE STATUS NONBLOCKING");
            Lex->sql_command = SQLCOM_SHOW_SLAVE_NOLOCK_STAT;
          }
    break;

  case 1679:

/* Line 1455 of yacc.c  */
#line 11798 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
	    Lex->sql_command = SQLCOM_SHOW_SLAVE_NOLOCK_STAT;
          }
    break;

  case 1680:

/* Line 1455 of yacc.c  */
#line 11802 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
           LEX *lex= Lex;
           Lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 1681:

/* Line 1455 of yacc.c  */
#line 11807 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
           LEX *lex= Lex;
           lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 1682:

/* Line 1455 of yacc.c  */
#line 11812 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
           LEX *lex= Lex;
           Lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 1683:

/* Line 1455 of yacc.c  */
#line 11817 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
           LEX *lex= Lex;
           lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 1684:

/* Line 1455 of yacc.c  */
#line 11822 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
           LEX *lex= Lex;
           lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 1685:

/* Line 1455 of yacc.c  */
#line 11827 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1686:

/* Line 1455 of yacc.c  */
#line 11834 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1687:

/* Line 1455 of yacc.c  */
#line 11841 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1688:

/* Line 1455 of yacc.c  */
#line 11847 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
          }
    break;

  case 1689:

/* Line 1455 of yacc.c  */
#line 11852 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
          }
    break;

  case 1690:

/* Line 1455 of yacc.c  */
#line 11857 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1691:

/* Line 1455 of yacc.c  */
#line 11862 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1692:

/* Line 1455 of yacc.c  */
#line 11867 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1693:

/* Line 1455 of yacc.c  */
#line 11875 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1694:

/* Line 1455 of yacc.c  */
#line 11877 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1695:

/* Line 1455 of yacc.c  */
#line 11879 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1700:

/* Line 1455 of yacc.c  */
#line 11893 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1701:

/* Line 1455 of yacc.c  */
#line 11894 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1702:

/* Line 1455 of yacc.c  */
#line 11898 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1703:

/* Line 1455 of yacc.c  */
#line 11899 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1706:

/* Line 1455 of yacc.c  */
#line 11908 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1707:

/* Line 1455 of yacc.c  */
#line 11909 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1708:

/* Line 1455 of yacc.c  */
#line 11913 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1709:

/* Line 1455 of yacc.c  */
#line 11914 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1711:

/* Line 1455 of yacc.c  */
#line 11920 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1712:

/* Line 1455 of yacc.c  */
#line 11927 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Select->where= (yyvsp[(2) - (2)].item);
            if ((yyvsp[(2) - (2)].item))
              (yyvsp[(2) - (2)].item)->top_level_item();
          }
    break;

  case 1713:

/* Line 1455 of yacc.c  */
#line 11937 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
          }
    break;

  case 1714:

/* Line 1455 of yacc.c  */
#line 11946 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1715:

/* Line 1455 of yacc.c  */
#line 11950 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1716:

/* Line 1455 of yacc.c  */
#line 11952 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->select_lex.options|= SELECT_DESCRIBE; }
    break;

  case 1724:

/* Line 1455 of yacc.c  */
#line 11970 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if ((Lex->explain_format= new Explain_format_traditional) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1725:

/* Line 1455 of yacc.c  */
#line 11975 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if ((Lex->explain_format= new Explain_format_traditional) == NULL)
              MYSQL_YYABORT;
            Lex->describe|= DESCRIBE_EXTENDED;
          }
    break;

  case 1726:

/* Line 1455 of yacc.c  */
#line 11981 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if ((Lex->explain_format= new Explain_format_traditional) == NULL)
              MYSQL_YYABORT;
            Lex->describe|= DESCRIBE_PARTITIONS;
          }
    break;

  case 1727:

/* Line 1455 of yacc.c  */
#line 11987 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (!my_strcasecmp(system_charset_info, (yyvsp[(3) - (3)].lex_str).str, "JSON"))
            {
              if ((Lex->explain_format= new Explain_format_JSON) == NULL)
                MYSQL_YYABORT;
              Lex->describe|= DESCRIBE_EXTENDED | DESCRIBE_PARTITIONS;
            }
            else if (!my_strcasecmp(system_charset_info, (yyvsp[(3) - (3)].lex_str).str, "TRADITIONAL"))
            {
              if ((Lex->explain_format= new Explain_format_traditional) == NULL)
                MYSQL_YYABORT;
            }
            else
            {
              my_error(ER_UNKNOWN_EXPLAIN_FORMAT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1728:

/* Line 1455 of yacc.c  */
#line 12008 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1729:

/* Line 1455 of yacc.c  */
#line 12009 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1730:

/* Line 1455 of yacc.c  */
#line 12011 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1731:

/* Line 1455 of yacc.c  */
#line 12025 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1732:

/* Line 1455 of yacc.c  */
#line 12032 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1733:

/* Line 1455 of yacc.c  */
#line 12037 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_TABLES;

          }
    break;

  case 1734:

/* Line 1455 of yacc.c  */
#line 12041 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1735:

/* Line 1455 of yacc.c  */
#line 12042 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1737:

/* Line 1455 of yacc.c  */
#line 12047 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1738:

/* Line 1455 of yacc.c  */
#line 12049 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            TABLE_LIST *tables= Lex->query_tables;
            Lex->type|= REFRESH_READ_LOCK;
            for (; tables; tables= tables->next_global)
            {

              tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
            }
          }
    break;

  case 1739:

/* Line 1455 of yacc.c  */
#line 12060 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (Lex->query_tables == NULL) // Table list can't be empty
            {
              my_parse_error(ER(ER_NO_TABLES_USED));
              MYSQL_YYABORT;
            } 
          }
    break;

  case 1740:

/* Line 1455 of yacc.c  */
#line 12068 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            TABLE_LIST *tables= Lex->query_tables;
            Lex->type|= REFRESH_FOR_EXPORT;
            for (; tables; tables= tables->next_global)
            {

              tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
            }
          }
    break;

  case 1742:

/* Line 1455 of yacc.c  */
#line 12083 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1743:

/* Line 1455 of yacc.c  */
#line 12088 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ERROR_LOG; }
    break;

  case 1744:

/* Line 1455 of yacc.c  */
#line 12090 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ENGINE_LOG; }
    break;

  case 1745:

/* Line 1455 of yacc.c  */
#line 12092 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GENERAL_LOG; }
    break;

  case 1746:

/* Line 1455 of yacc.c  */
#line 12094 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLOW_LOG; }
    break;

  case 1747:

/* Line 1455 of yacc.c  */
#line 12096 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_BINARY_LOG; }
    break;

  case 1748:

/* Line 1455 of yacc.c  */
#line 12098 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_RELAY_LOG; }
    break;

  case 1749:

/* Line 1455 of yacc.c  */
#line 12100 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1750:

/* Line 1455 of yacc.c  */
#line 12102 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1751:

/* Line 1455 of yacc.c  */
#line 12104 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1752:

/* Line 1455 of yacc.c  */
#line 12106 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_LOG; }
    break;

  case 1753:

/* Line 1455 of yacc.c  */
#line 12108 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1754:

/* Line 1455 of yacc.c  */
#line 12110 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_CLIENT_STATS; }
    break;

  case 1755:

/* Line 1455 of yacc.c  */
#line 12112 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_STATS; }
    break;

  case 1756:

/* Line 1455 of yacc.c  */
#line 12114 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_THREAD_STATS; }
    break;

  case 1757:

/* Line 1455 of yacc.c  */
#line 12116 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_TABLE_STATS; }
    break;

  case 1758:

/* Line 1455 of yacc.c  */
#line 12118 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_INDEX_STATS; }
    break;

  case 1759:

/* Line 1455 of yacc.c  */
#line 12120 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1760:

/* Line 1455 of yacc.c  */
#line 12122 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1761:

/* Line 1455 of yacc.c  */
#line 12124 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_FLUSH_PAGE_BITMAPS; }
    break;

  case 1762:

/* Line 1455 of yacc.c  */
#line 12128 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1763:

/* Line 1455 of yacc.c  */
#line 12129 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1764:

/* Line 1455 of yacc.c  */
#line 12134 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1765:

/* Line 1455 of yacc.c  */
#line 12139 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1768:

/* Line 1455 of yacc.c  */
#line 12148 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1769:

/* Line 1455 of yacc.c  */
#line 12149 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { }
    break;

  case 1770:

/* Line 1455 of yacc.c  */
#line 12150 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1771:

/* Line 1455 of yacc.c  */
#line 12151 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1772:

/* Line 1455 of yacc.c  */
#line 12153 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->type |= REFRESH_RESET_PAGE_BITMAPS; }
    break;

  case 1773:

/* Line 1455 of yacc.c  */
#line 12157 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= false; }
    break;

  case 1774:

/* Line 1455 of yacc.c  */
#line 12158 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= true; }
    break;

  case 1775:

/* Line 1455 of yacc.c  */
#line 12163 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1776:

/* Line 1455 of yacc.c  */
#line 12169 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1778:

/* Line 1455 of yacc.c  */
#line 12175 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front(new Item_uint((yyvsp[(3) - (3)].ulonglong_number)));
            lex->type= PURGE_BITMAPS_TO_LSN;
          }
    break;

  case 1780:

/* Line 1455 of yacc.c  */
#line 12186 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1781:

/* Line 1455 of yacc.c  */
#line 12190 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1782:

/* Line 1455 of yacc.c  */
#line 12200 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
            Lex->sql_command= SQLCOM_PURGE_ARCHIVE;
          }
    break;

  case 1783:

/* Line 1455 of yacc.c  */
#line 12205 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_ARCHIVE_BEFORE;
          }
    break;

  case 1784:

/* Line 1455 of yacc.c  */
#line 12217 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(3) - (3)].item));
            lex->sql_command= SQLCOM_KILL;
          }
    break;

  case 1785:

/* Line 1455 of yacc.c  */
#line 12226 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1786:

/* Line 1455 of yacc.c  */
#line 12227 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1787:

/* Line 1455 of yacc.c  */
#line 12228 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->type= ONLY_KILL_QUERY; }
    break;

  case 1788:

/* Line 1455 of yacc.c  */
#line 12235 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1789:

/* Line 1455 of yacc.c  */
#line 12246 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[(2) - (2)].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1790:

/* Line 1455 of yacc.c  */
#line 12258 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[(5) - (7)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[(7) - (7)].lex_str).str, 0, (yyvsp[(2) - (7)].filetype))))
              MYSQL_YYABORT;
          }
    break;

  case 1791:

/* Line 1455 of yacc.c  */
#line 12268 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(12) - (13)].table), NULL, TL_OPTION_UPDATING,
                                          NULL, (yyvsp[(13) - (13)].string_list)))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 1792:

/* Line 1455 of yacc.c  */
#line 12278 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(15) - (15)].charset); }
    break;

  case 1793:

/* Line 1455 of yacc.c  */
#line 12282 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1794:

/* Line 1455 of yacc.c  */
#line 12286 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_CSV; }
    break;

  case 1795:

/* Line 1455 of yacc.c  */
#line 12287 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_XML; }
    break;

  case 1796:

/* Line 1455 of yacc.c  */
#line 12291 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 1797:

/* Line 1455 of yacc.c  */
#line 12292 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 1798:

/* Line 1455 of yacc.c  */
#line 12296 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1799:

/* Line 1455 of yacc.c  */
#line 12298 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              Ignore this option in SP to avoid problem with query cache
            */
            if (Lex->sphead != 0)
              (yyval.lock_type)= TL_WRITE_DEFAULT;
            else
#endif
              (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
          }
    break;

  case 1800:

/* Line 1455 of yacc.c  */
#line 12309 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1801:

/* Line 1455 of yacc.c  */
#line 12313 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 1802:

/* Line 1455 of yacc.c  */
#line 12314 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 1803:

/* Line 1455 of yacc.c  */
#line 12315 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1808:

/* Line 1455 of yacc.c  */
#line 12330 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1809:

/* Line 1455 of yacc.c  */
#line 12335 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 1810:

/* Line 1455 of yacc.c  */
#line 12342 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1811:

/* Line 1455 of yacc.c  */
#line 12347 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1816:

/* Line 1455 of yacc.c  */
#line 12365 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1817:

/* Line 1455 of yacc.c  */
#line 12370 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1818:

/* Line 1455 of yacc.c  */
#line 12377 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { }
    break;

  case 1819:

/* Line 1455 of yacc.c  */
#line 12379 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->exchange->line_term = (yyvsp[(4) - (4)].string); }
    break;

  case 1821:

/* Line 1455 of yacc.c  */
#line 12384 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 1822:

/* Line 1455 of yacc.c  */
#line 12391 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { }
    break;

  case 1823:

/* Line 1455 of yacc.c  */
#line 12393 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { }
    break;

  case 1824:

/* Line 1455 of yacc.c  */
#line 12397 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1825:

/* Line 1455 of yacc.c  */
#line 12398 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1826:

/* Line 1455 of yacc.c  */
#line 12399 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1827:

/* Line 1455 of yacc.c  */
#line 12404 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1828:

/* Line 1455 of yacc.c  */
#line 12406 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1829:

/* Line 1455 of yacc.c  */
#line 12410 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1830:

/* Line 1455 of yacc.c  */
#line 12412 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1831:

/* Line 1455 of yacc.c  */
#line 12420 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1832:

/* Line 1455 of yacc.c  */
#line 12421 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1835:

/* Line 1455 of yacc.c  */
#line 12431 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint length= (uint) ((yyvsp[(5) - (5)].simple_string) - (yyvsp[(3) - (5)].simple_string));
            String *val= new (YYTHD->mem_root) String((yyvsp[(3) - (5)].simple_string),
                                                      length,
                                                      YYTHD->charset());
            if (val == NULL)
              MYSQL_YYABORT;
            if (lex->update_list.push_back((yyvsp[(1) - (5)].item)) ||
                lex->value_list.push_back((yyvsp[(4) - (5)].item)) ||
                lex->load_set_str_list.push_back(val))
                MYSQL_YYABORT;
            (yyvsp[(4) - (5)].item)->item_name.copy((yyvsp[(3) - (5)].simple_string), length, YYTHD->charset());
          }
    break;

  case 1836:

/* Line 1455 of yacc.c  */
#line 12451 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX_STRING tmp;
            THD *thd= YYTHD;
            const CHARSET_INFO *cs_con= thd->variables.collation_connection;
            const CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1837:

/* Line 1455 of yacc.c  */
#line 12475 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (YYTHD->mem_root) Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1838:

/* Line 1455 of yacc.c  */
#line 12487 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Item_string *str= new (YYTHD->mem_root) Item_string((yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if (str == NULL)
              MYSQL_YYABORT;
            str->set_repertoire_from_value();
            str->set_cs_specified(TRUE);

            (yyval.item)= str;
          }
    break;

  case 1839:

/* Line 1455 of yacc.c  */
#line 12498 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              const CHARSET_INFO *cs= YYTHD->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 1840:

/* Line 1455 of yacc.c  */
#line 12517 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             YYTHD->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1841:

/* Line 1455 of yacc.c  */
#line 12525 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1842:

/* Line 1455 of yacc.c  */
#line 12537 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1843:

/* Line 1455 of yacc.c  */
#line 12552 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query()));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1844:

/* Line 1455 of yacc.c  */
#line 12572 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1845:

/* Line 1455 of yacc.c  */
#line 12573 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 1846:

/* Line 1455 of yacc.c  */
#line 12575 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
          }
    break;

  case 1847:

/* Line 1455 of yacc.c  */
#line 12583 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1848:

/* Line 1455 of yacc.c  */
#line 12584 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 1849:

/* Line 1455 of yacc.c  */
#line 12585 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1850:

/* Line 1455 of yacc.c  */
#line 12587 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 1851:

/* Line 1455 of yacc.c  */
#line 12594 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int(NAME_STRING("FALSE"), 0, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1852:

/* Line 1455 of yacc.c  */
#line 12600 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int(NAME_STRING("TRUE"), 1, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1853:

/* Line 1455 of yacc.c  */
#line 12606 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1854:

/* Line 1455 of yacc.c  */
#line 12612 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1855:

/* Line 1455 of yacc.c  */
#line 12618 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(null_name_string, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_repertoire_from_value();
            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1856:

/* Line 1455 of yacc.c  */
#line 12647 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(null_name_string, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1857:

/* Line 1455 of yacc.c  */
#line 12678 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str),
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1858:

/* Line 1455 of yacc.c  */
#line 12688 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str),
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1859:

/* Line 1455 of yacc.c  */
#line 12698 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1860:

/* Line 1455 of yacc.c  */
#line 12704 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   YYTHD->charset());
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1861:

/* Line 1455 of yacc.c  */
#line 12713 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1862:

/* Line 1455 of yacc.c  */
#line 12725 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATE, true)))
              MYSQL_YYABORT;
          }
    break;

  case 1863:

/* Line 1455 of yacc.c  */
#line 12731 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_TIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 1864:

/* Line 1455 of yacc.c  */
#line 12737 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATETIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 1865:

/* Line 1455 of yacc.c  */
#line 12752 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1866:

/* Line 1455 of yacc.c  */
#line 12753 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1867:

/* Line 1455 of yacc.c  */
#line 12758 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (YYTHD->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1868:

/* Line 1455 of yacc.c  */
#line 12767 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1869:

/* Line 1455 of yacc.c  */
#line 12782 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1870:

/* Line 1455 of yacc.c  */
#line 12787 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx = lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (pctx && (spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              Lex_input_stream *lip= &thd->m_parser_state->m_lip;
              sp_head *sp= lex->sphead;

              DBUG_ASSERT(sp);

              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              (yyval.item)=
                create_item_for_sp_var(
                  thd, (yyvsp[(1) - (1)].lex_str), spv,
                  sp->m_parser_data.get_current_stmt_start_ptr(),
                  lip->get_tok_start_prev(),
                  lip->get_tok_end());

              if ((yyval.item) == NULL)
                MYSQL_YYABORT;

              lex->safe_to_cache_query= false;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1871:

/* Line 1455 of yacc.c  */
#line 12837 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1872:

/* Line 1455 of yacc.c  */
#line 12842 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1873:

/* Line 1455 of yacc.c  */
#line 12859 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1874:

/* Line 1455 of yacc.c  */
#line 12864 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (sp && sp->m_type == SP_TYPE_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (sp->m_trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (sp->m_trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (sp->m_trg_chistics.event == TRG_EVENT_INSERT ||
                           sp->m_trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && sp->m_trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->sphead->m_cur_instr_trig_field_items.link_in_list(
                trg_fld, &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1875:

/* Line 1455 of yacc.c  */
#line 12944 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1876:

/* Line 1455 of yacc.c  */
#line 12969 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1877:

/* Line 1455 of yacc.c  */
#line 12999 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1878:

/* Line 1455 of yacc.c  */
#line 13001 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 1879:

/* Line 1455 of yacc.c  */
#line 13017 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 1880:

/* Line 1455 of yacc.c  */
#line 13026 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 1881:

/* Line 1455 of yacc.c  */
#line 13031 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1882:

/* Line 1455 of yacc.c  */
#line 13037 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1883:

/* Line 1455 of yacc.c  */
#line 13043 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1884:

/* Line 1455 of yacc.c  */
#line 13053 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1885:

/* Line 1455 of yacc.c  */
#line 13059 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str),(yyvsp[(3) - (4)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1886:

/* Line 1455 of yacc.c  */
#line 13068 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(YYTHD, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1887:

/* Line 1455 of yacc.c  */
#line 13077 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1888:

/* Line 1455 of yacc.c  */
#line 13079 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
            {
              const CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                ErrConvString err((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, &my_charset_bin);
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, err.ptr());
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1889:

/* Line 1455 of yacc.c  */
#line 13122 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1890:

/* Line 1455 of yacc.c  */
#line 13138 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 1891:

/* Line 1455 of yacc.c  */
#line 13154 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1892:

/* Line 1455 of yacc.c  */
#line 13170 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1893:

/* Line 1455 of yacc.c  */
#line 13172 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1894:

/* Line 1455 of yacc.c  */
#line 13182 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1895:

/* Line 1455 of yacc.c  */
#line 13184 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1896:

/* Line 1455 of yacc.c  */
#line 13194 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1897:

/* Line 1455 of yacc.c  */
#line 13195 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1898:

/* Line 1455 of yacc.c  */
#line 13196 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1899:

/* Line 1455 of yacc.c  */
#line 13201 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host.str= (char *) "%";
            (yyval.lex_user)->host.length= 1;
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
            (yyval.lex_user)->uses_identified_by_clause= false;
            (yyval.lex_user)->uses_identified_with_clause= false;
            (yyval.lex_user)->uses_identified_by_password_clause= false;
            (yyval.lex_user)->uses_authentication_string_clause= false;

            /*
              Trim whitespace as the values will go to a CHAR field
              when stored.
            */
            trim_whitespace(system_charset_info, &(yyval.lex_user)->user);

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 1900:

/* Line 1455 of yacc.c  */
#line 13228 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= (yyvsp[(1) - (3)].lex_str);
            (yyval.lex_user)->host= (yyvsp[(3) - (3)].lex_str);
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
            (yyval.lex_user)->uses_identified_by_clause= false;
            (yyval.lex_user)->uses_identified_with_clause= false;
            (yyval.lex_user)->uses_identified_by_password_clause= false;
            (yyval.lex_user)->uses_authentication_string_clause= false;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            /*
              Convert hostname part of username to lowercase.
              It's OK to use in-place lowercase as long as
              the character set is utf8.
            */
            my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
            /*
              Trim whitespace as the values will go to a CHAR field
              when stored.
            */
            trim_whitespace(system_charset_info, &(yyval.lex_user)->user);
            trim_whitespace(system_charset_info, &(yyval.lex_user)->host);
          }
    break;

  case 1901:

/* Line 1455 of yacc.c  */
#line 13261 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) YYTHD->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            /* 
              empty LEX_USER means current_user and 
              will be handled in the  get_current_user() function
              later
            */
            memset((yyval.lex_user), 0, sizeof(LEX_USER));
          }
    break;

  case 1902:

/* Line 1455 of yacc.c  */
#line 13275 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1903:

/* Line 1455 of yacc.c  */
#line 13276 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1904:

/* Line 1455 of yacc.c  */
#line 13277 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1905:

/* Line 1455 of yacc.c  */
#line 13278 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1906:

/* Line 1455 of yacc.c  */
#line 13279 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1907:

/* Line 1455 of yacc.c  */
#line 13280 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1908:

/* Line 1455 of yacc.c  */
#line 13281 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1909:

/* Line 1455 of yacc.c  */
#line 13282 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1910:

/* Line 1455 of yacc.c  */
#line 13283 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1911:

/* Line 1455 of yacc.c  */
#line 13284 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1912:

/* Line 1455 of yacc.c  */
#line 13285 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1913:

/* Line 1455 of yacc.c  */
#line 13286 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1914:

/* Line 1455 of yacc.c  */
#line 13287 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1915:

/* Line 1455 of yacc.c  */
#line 13288 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1916:

/* Line 1455 of yacc.c  */
#line 13289 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1917:

/* Line 1455 of yacc.c  */
#line 13290 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1918:

/* Line 1455 of yacc.c  */
#line 13291 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1919:

/* Line 1455 of yacc.c  */
#line 13292 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1920:

/* Line 1455 of yacc.c  */
#line 13293 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1921:

/* Line 1455 of yacc.c  */
#line 13294 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1922:

/* Line 1455 of yacc.c  */
#line 13295 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1923:

/* Line 1455 of yacc.c  */
#line 13296 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1924:

/* Line 1455 of yacc.c  */
#line 13297 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1925:

/* Line 1455 of yacc.c  */
#line 13298 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1926:

/* Line 1455 of yacc.c  */
#line 13299 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1927:

/* Line 1455 of yacc.c  */
#line 13300 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1928:

/* Line 1455 of yacc.c  */
#line 13301 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1929:

/* Line 1455 of yacc.c  */
#line 13302 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1930:

/* Line 1455 of yacc.c  */
#line 13303 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1931:

/* Line 1455 of yacc.c  */
#line 13304 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1932:

/* Line 1455 of yacc.c  */
#line 13305 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1933:

/* Line 1455 of yacc.c  */
#line 13306 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1934:

/* Line 1455 of yacc.c  */
#line 13307 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1935:

/* Line 1455 of yacc.c  */
#line 13308 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1936:

/* Line 1455 of yacc.c  */
#line 13309 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1937:

/* Line 1455 of yacc.c  */
#line 13310 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1938:

/* Line 1455 of yacc.c  */
#line 13311 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1939:

/* Line 1455 of yacc.c  */
#line 13312 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1940:

/* Line 1455 of yacc.c  */
#line 13313 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1941:

/* Line 1455 of yacc.c  */
#line 13314 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1942:

/* Line 1455 of yacc.c  */
#line 13315 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1943:

/* Line 1455 of yacc.c  */
#line 13316 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1944:

/* Line 1455 of yacc.c  */
#line 13317 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1945:

/* Line 1455 of yacc.c  */
#line 13318 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1946:

/* Line 1455 of yacc.c  */
#line 13319 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1947:

/* Line 1455 of yacc.c  */
#line 13320 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1948:

/* Line 1455 of yacc.c  */
#line 13321 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1949:

/* Line 1455 of yacc.c  */
#line 13322 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1950:

/* Line 1455 of yacc.c  */
#line 13323 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1951:

/* Line 1455 of yacc.c  */
#line 13324 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1952:

/* Line 1455 of yacc.c  */
#line 13334 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1953:

/* Line 1455 of yacc.c  */
#line 13335 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1954:

/* Line 1455 of yacc.c  */
#line 13336 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1955:

/* Line 1455 of yacc.c  */
#line 13337 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1956:

/* Line 1455 of yacc.c  */
#line 13338 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1957:

/* Line 1455 of yacc.c  */
#line 13339 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1958:

/* Line 1455 of yacc.c  */
#line 13340 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1959:

/* Line 1455 of yacc.c  */
#line 13341 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1960:

/* Line 1455 of yacc.c  */
#line 13342 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1961:

/* Line 1455 of yacc.c  */
#line 13343 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1962:

/* Line 1455 of yacc.c  */
#line 13344 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1963:

/* Line 1455 of yacc.c  */
#line 13345 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1964:

/* Line 1455 of yacc.c  */
#line 13346 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1965:

/* Line 1455 of yacc.c  */
#line 13347 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1966:

/* Line 1455 of yacc.c  */
#line 13348 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1967:

/* Line 1455 of yacc.c  */
#line 13349 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1968:

/* Line 1455 of yacc.c  */
#line 13350 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1969:

/* Line 1455 of yacc.c  */
#line 13351 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1970:

/* Line 1455 of yacc.c  */
#line 13352 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1971:

/* Line 1455 of yacc.c  */
#line 13353 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1972:

/* Line 1455 of yacc.c  */
#line 13354 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1973:

/* Line 1455 of yacc.c  */
#line 13355 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1974:

/* Line 1455 of yacc.c  */
#line 13356 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1975:

/* Line 1455 of yacc.c  */
#line 13357 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1976:

/* Line 1455 of yacc.c  */
#line 13358 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1977:

/* Line 1455 of yacc.c  */
#line 13359 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1978:

/* Line 1455 of yacc.c  */
#line 13360 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1979:

/* Line 1455 of yacc.c  */
#line 13361 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1980:

/* Line 1455 of yacc.c  */
#line 13362 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1981:

/* Line 1455 of yacc.c  */
#line 13363 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1982:

/* Line 1455 of yacc.c  */
#line 13364 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1983:

/* Line 1455 of yacc.c  */
#line 13365 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1984:

/* Line 1455 of yacc.c  */
#line 13366 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1985:

/* Line 1455 of yacc.c  */
#line 13367 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1986:

/* Line 1455 of yacc.c  */
#line 13368 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1987:

/* Line 1455 of yacc.c  */
#line 13369 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1988:

/* Line 1455 of yacc.c  */
#line 13370 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1989:

/* Line 1455 of yacc.c  */
#line 13371 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1990:

/* Line 1455 of yacc.c  */
#line 13372 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1991:

/* Line 1455 of yacc.c  */
#line 13373 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1992:

/* Line 1455 of yacc.c  */
#line 13374 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1993:

/* Line 1455 of yacc.c  */
#line 13375 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1994:

/* Line 1455 of yacc.c  */
#line 13376 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1995:

/* Line 1455 of yacc.c  */
#line 13377 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1996:

/* Line 1455 of yacc.c  */
#line 13378 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1997:

/* Line 1455 of yacc.c  */
#line 13379 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1998:

/* Line 1455 of yacc.c  */
#line 13380 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 1999:

/* Line 1455 of yacc.c  */
#line 13381 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2000:

/* Line 1455 of yacc.c  */
#line 13386 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2001:

/* Line 1455 of yacc.c  */
#line 13387 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2002:

/* Line 1455 of yacc.c  */
#line 13388 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2003:

/* Line 1455 of yacc.c  */
#line 13389 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2004:

/* Line 1455 of yacc.c  */
#line 13390 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2005:

/* Line 1455 of yacc.c  */
#line 13391 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2006:

/* Line 1455 of yacc.c  */
#line 13392 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2007:

/* Line 1455 of yacc.c  */
#line 13393 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2008:

/* Line 1455 of yacc.c  */
#line 13394 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2009:

/* Line 1455 of yacc.c  */
#line 13395 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2010:

/* Line 1455 of yacc.c  */
#line 13396 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2011:

/* Line 1455 of yacc.c  */
#line 13397 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2012:

/* Line 1455 of yacc.c  */
#line 13398 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2013:

/* Line 1455 of yacc.c  */
#line 13399 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2014:

/* Line 1455 of yacc.c  */
#line 13400 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2015:

/* Line 1455 of yacc.c  */
#line 13401 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2016:

/* Line 1455 of yacc.c  */
#line 13402 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2017:

/* Line 1455 of yacc.c  */
#line 13403 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2018:

/* Line 1455 of yacc.c  */
#line 13404 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2019:

/* Line 1455 of yacc.c  */
#line 13405 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2020:

/* Line 1455 of yacc.c  */
#line 13406 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2021:

/* Line 1455 of yacc.c  */
#line 13407 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2022:

/* Line 1455 of yacc.c  */
#line 13408 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2023:

/* Line 1455 of yacc.c  */
#line 13409 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2024:

/* Line 1455 of yacc.c  */
#line 13410 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2025:

/* Line 1455 of yacc.c  */
#line 13411 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2026:

/* Line 1455 of yacc.c  */
#line 13412 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2027:

/* Line 1455 of yacc.c  */
#line 13413 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2028:

/* Line 1455 of yacc.c  */
#line 13414 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2029:

/* Line 1455 of yacc.c  */
#line 13415 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2030:

/* Line 1455 of yacc.c  */
#line 13416 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2031:

/* Line 1455 of yacc.c  */
#line 13417 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2032:

/* Line 1455 of yacc.c  */
#line 13418 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2033:

/* Line 1455 of yacc.c  */
#line 13419 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2034:

/* Line 1455 of yacc.c  */
#line 13420 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2035:

/* Line 1455 of yacc.c  */
#line 13421 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2036:

/* Line 1455 of yacc.c  */
#line 13422 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2037:

/* Line 1455 of yacc.c  */
#line 13423 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2038:

/* Line 1455 of yacc.c  */
#line 13424 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2039:

/* Line 1455 of yacc.c  */
#line 13425 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2040:

/* Line 1455 of yacc.c  */
#line 13426 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2041:

/* Line 1455 of yacc.c  */
#line 13427 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2042:

/* Line 1455 of yacc.c  */
#line 13428 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2043:

/* Line 1455 of yacc.c  */
#line 13429 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2044:

/* Line 1455 of yacc.c  */
#line 13430 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2045:

/* Line 1455 of yacc.c  */
#line 13431 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2046:

/* Line 1455 of yacc.c  */
#line 13432 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2047:

/* Line 1455 of yacc.c  */
#line 13433 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2048:

/* Line 1455 of yacc.c  */
#line 13434 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2049:

/* Line 1455 of yacc.c  */
#line 13435 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2050:

/* Line 1455 of yacc.c  */
#line 13436 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2051:

/* Line 1455 of yacc.c  */
#line 13437 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2052:

/* Line 1455 of yacc.c  */
#line 13438 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2053:

/* Line 1455 of yacc.c  */
#line 13439 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2054:

/* Line 1455 of yacc.c  */
#line 13440 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2055:

/* Line 1455 of yacc.c  */
#line 13441 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2056:

/* Line 1455 of yacc.c  */
#line 13442 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2057:

/* Line 1455 of yacc.c  */
#line 13443 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2058:

/* Line 1455 of yacc.c  */
#line 13444 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2059:

/* Line 1455 of yacc.c  */
#line 13445 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2060:

/* Line 1455 of yacc.c  */
#line 13446 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2061:

/* Line 1455 of yacc.c  */
#line 13447 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2062:

/* Line 1455 of yacc.c  */
#line 13448 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2063:

/* Line 1455 of yacc.c  */
#line 13449 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2064:

/* Line 1455 of yacc.c  */
#line 13450 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2065:

/* Line 1455 of yacc.c  */
#line 13451 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2066:

/* Line 1455 of yacc.c  */
#line 13452 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2067:

/* Line 1455 of yacc.c  */
#line 13453 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2068:

/* Line 1455 of yacc.c  */
#line 13454 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2069:

/* Line 1455 of yacc.c  */
#line 13455 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2070:

/* Line 1455 of yacc.c  */
#line 13456 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2071:

/* Line 1455 of yacc.c  */
#line 13457 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2072:

/* Line 1455 of yacc.c  */
#line 13458 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2073:

/* Line 1455 of yacc.c  */
#line 13459 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2074:

/* Line 1455 of yacc.c  */
#line 13460 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2075:

/* Line 1455 of yacc.c  */
#line 13461 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2076:

/* Line 1455 of yacc.c  */
#line 13462 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2077:

/* Line 1455 of yacc.c  */
#line 13463 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2078:

/* Line 1455 of yacc.c  */
#line 13464 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2079:

/* Line 1455 of yacc.c  */
#line 13465 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2080:

/* Line 1455 of yacc.c  */
#line 13466 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2081:

/* Line 1455 of yacc.c  */
#line 13467 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2082:

/* Line 1455 of yacc.c  */
#line 13468 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2083:

/* Line 1455 of yacc.c  */
#line 13469 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2084:

/* Line 1455 of yacc.c  */
#line 13470 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2085:

/* Line 1455 of yacc.c  */
#line 13471 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2086:

/* Line 1455 of yacc.c  */
#line 13472 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2087:

/* Line 1455 of yacc.c  */
#line 13473 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2088:

/* Line 1455 of yacc.c  */
#line 13474 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2089:

/* Line 1455 of yacc.c  */
#line 13475 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2090:

/* Line 1455 of yacc.c  */
#line 13476 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2091:

/* Line 1455 of yacc.c  */
#line 13477 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2092:

/* Line 1455 of yacc.c  */
#line 13478 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2093:

/* Line 1455 of yacc.c  */
#line 13479 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2094:

/* Line 1455 of yacc.c  */
#line 13480 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2095:

/* Line 1455 of yacc.c  */
#line 13481 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2096:

/* Line 1455 of yacc.c  */
#line 13482 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2097:

/* Line 1455 of yacc.c  */
#line 13483 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2098:

/* Line 1455 of yacc.c  */
#line 13484 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2099:

/* Line 1455 of yacc.c  */
#line 13485 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2100:

/* Line 1455 of yacc.c  */
#line 13486 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2101:

/* Line 1455 of yacc.c  */
#line 13487 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2102:

/* Line 1455 of yacc.c  */
#line 13488 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2103:

/* Line 1455 of yacc.c  */
#line 13489 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2104:

/* Line 1455 of yacc.c  */
#line 13490 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2105:

/* Line 1455 of yacc.c  */
#line 13491 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2106:

/* Line 1455 of yacc.c  */
#line 13492 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2107:

/* Line 1455 of yacc.c  */
#line 13493 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2108:

/* Line 1455 of yacc.c  */
#line 13494 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2109:

/* Line 1455 of yacc.c  */
#line 13495 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2110:

/* Line 1455 of yacc.c  */
#line 13496 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2111:

/* Line 1455 of yacc.c  */
#line 13497 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2112:

/* Line 1455 of yacc.c  */
#line 13498 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2113:

/* Line 1455 of yacc.c  */
#line 13499 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2114:

/* Line 1455 of yacc.c  */
#line 13500 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2115:

/* Line 1455 of yacc.c  */
#line 13501 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2116:

/* Line 1455 of yacc.c  */
#line 13502 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2117:

/* Line 1455 of yacc.c  */
#line 13503 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2118:

/* Line 1455 of yacc.c  */
#line 13504 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2119:

/* Line 1455 of yacc.c  */
#line 13505 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2120:

/* Line 1455 of yacc.c  */
#line 13506 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2121:

/* Line 1455 of yacc.c  */
#line 13507 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2122:

/* Line 1455 of yacc.c  */
#line 13508 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2123:

/* Line 1455 of yacc.c  */
#line 13509 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2124:

/* Line 1455 of yacc.c  */
#line 13510 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2125:

/* Line 1455 of yacc.c  */
#line 13511 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2126:

/* Line 1455 of yacc.c  */
#line 13512 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2127:

/* Line 1455 of yacc.c  */
#line 13513 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2128:

/* Line 1455 of yacc.c  */
#line 13514 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2129:

/* Line 1455 of yacc.c  */
#line 13515 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2130:

/* Line 1455 of yacc.c  */
#line 13516 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2131:

/* Line 1455 of yacc.c  */
#line 13517 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2132:

/* Line 1455 of yacc.c  */
#line 13518 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2133:

/* Line 1455 of yacc.c  */
#line 13519 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2134:

/* Line 1455 of yacc.c  */
#line 13520 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2135:

/* Line 1455 of yacc.c  */
#line 13521 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2136:

/* Line 1455 of yacc.c  */
#line 13522 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2137:

/* Line 1455 of yacc.c  */
#line 13523 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2138:

/* Line 1455 of yacc.c  */
#line 13524 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2139:

/* Line 1455 of yacc.c  */
#line 13525 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2140:

/* Line 1455 of yacc.c  */
#line 13526 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2141:

/* Line 1455 of yacc.c  */
#line 13527 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2142:

/* Line 1455 of yacc.c  */
#line 13528 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2143:

/* Line 1455 of yacc.c  */
#line 13529 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2144:

/* Line 1455 of yacc.c  */
#line 13530 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2145:

/* Line 1455 of yacc.c  */
#line 13531 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2146:

/* Line 1455 of yacc.c  */
#line 13532 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2147:

/* Line 1455 of yacc.c  */
#line 13533 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2148:

/* Line 1455 of yacc.c  */
#line 13534 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2149:

/* Line 1455 of yacc.c  */
#line 13535 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2150:

/* Line 1455 of yacc.c  */
#line 13536 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2151:

/* Line 1455 of yacc.c  */
#line 13537 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2152:

/* Line 1455 of yacc.c  */
#line 13538 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2153:

/* Line 1455 of yacc.c  */
#line 13539 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2154:

/* Line 1455 of yacc.c  */
#line 13540 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2155:

/* Line 1455 of yacc.c  */
#line 13541 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2156:

/* Line 1455 of yacc.c  */
#line 13542 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2157:

/* Line 1455 of yacc.c  */
#line 13543 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2158:

/* Line 1455 of yacc.c  */
#line 13544 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2159:

/* Line 1455 of yacc.c  */
#line 13545 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2160:

/* Line 1455 of yacc.c  */
#line 13546 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2161:

/* Line 1455 of yacc.c  */
#line 13547 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2162:

/* Line 1455 of yacc.c  */
#line 13548 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2163:

/* Line 1455 of yacc.c  */
#line 13549 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2164:

/* Line 1455 of yacc.c  */
#line 13550 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2165:

/* Line 1455 of yacc.c  */
#line 13551 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2166:

/* Line 1455 of yacc.c  */
#line 13552 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2167:

/* Line 1455 of yacc.c  */
#line 13553 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2168:

/* Line 1455 of yacc.c  */
#line 13554 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2169:

/* Line 1455 of yacc.c  */
#line 13555 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2170:

/* Line 1455 of yacc.c  */
#line 13556 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2171:

/* Line 1455 of yacc.c  */
#line 13557 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2172:

/* Line 1455 of yacc.c  */
#line 13558 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2173:

/* Line 1455 of yacc.c  */
#line 13559 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2174:

/* Line 1455 of yacc.c  */
#line 13560 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2175:

/* Line 1455 of yacc.c  */
#line 13561 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2176:

/* Line 1455 of yacc.c  */
#line 13562 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2177:

/* Line 1455 of yacc.c  */
#line 13563 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2178:

/* Line 1455 of yacc.c  */
#line 13564 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2179:

/* Line 1455 of yacc.c  */
#line 13565 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2180:

/* Line 1455 of yacc.c  */
#line 13566 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2181:

/* Line 1455 of yacc.c  */
#line 13567 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2182:

/* Line 1455 of yacc.c  */
#line 13568 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2183:

/* Line 1455 of yacc.c  */
#line 13569 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2184:

/* Line 1455 of yacc.c  */
#line 13570 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2185:

/* Line 1455 of yacc.c  */
#line 13571 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2186:

/* Line 1455 of yacc.c  */
#line 13572 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2187:

/* Line 1455 of yacc.c  */
#line 13573 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2188:

/* Line 1455 of yacc.c  */
#line 13574 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2189:

/* Line 1455 of yacc.c  */
#line 13575 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2190:

/* Line 1455 of yacc.c  */
#line 13576 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2191:

/* Line 1455 of yacc.c  */
#line 13577 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2192:

/* Line 1455 of yacc.c  */
#line 13578 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2193:

/* Line 1455 of yacc.c  */
#line 13579 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2194:

/* Line 1455 of yacc.c  */
#line 13580 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2195:

/* Line 1455 of yacc.c  */
#line 13581 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2196:

/* Line 1455 of yacc.c  */
#line 13582 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2197:

/* Line 1455 of yacc.c  */
#line 13583 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2198:

/* Line 1455 of yacc.c  */
#line 13584 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2199:

/* Line 1455 of yacc.c  */
#line 13585 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2200:

/* Line 1455 of yacc.c  */
#line 13586 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2201:

/* Line 1455 of yacc.c  */
#line 13587 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2202:

/* Line 1455 of yacc.c  */
#line 13588 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2203:

/* Line 1455 of yacc.c  */
#line 13589 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2204:

/* Line 1455 of yacc.c  */
#line 13590 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2205:

/* Line 1455 of yacc.c  */
#line 13591 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2206:

/* Line 1455 of yacc.c  */
#line 13592 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2207:

/* Line 1455 of yacc.c  */
#line 13593 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2208:

/* Line 1455 of yacc.c  */
#line 13594 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2209:

/* Line 1455 of yacc.c  */
#line 13595 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2210:

/* Line 1455 of yacc.c  */
#line 13596 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2211:

/* Line 1455 of yacc.c  */
#line 13597 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2212:

/* Line 1455 of yacc.c  */
#line 13598 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2213:

/* Line 1455 of yacc.c  */
#line 13599 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2214:

/* Line 1455 of yacc.c  */
#line 13600 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2215:

/* Line 1455 of yacc.c  */
#line 13601 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2216:

/* Line 1455 of yacc.c  */
#line 13602 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2217:

/* Line 1455 of yacc.c  */
#line 13603 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2218:

/* Line 1455 of yacc.c  */
#line 13604 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2219:

/* Line 1455 of yacc.c  */
#line 13605 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2220:

/* Line 1455 of yacc.c  */
#line 13606 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2221:

/* Line 1455 of yacc.c  */
#line 13607 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2222:

/* Line 1455 of yacc.c  */
#line 13608 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2223:

/* Line 1455 of yacc.c  */
#line 13609 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2224:

/* Line 1455 of yacc.c  */
#line 13610 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2225:

/* Line 1455 of yacc.c  */
#line 13611 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2226:

/* Line 1455 of yacc.c  */
#line 13612 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2227:

/* Line 1455 of yacc.c  */
#line 13613 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2228:

/* Line 1455 of yacc.c  */
#line 13614 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2229:

/* Line 1455 of yacc.c  */
#line 13615 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2230:

/* Line 1455 of yacc.c  */
#line 13616 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2231:

/* Line 1455 of yacc.c  */
#line 13617 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2232:

/* Line 1455 of yacc.c  */
#line 13618 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2233:

/* Line 1455 of yacc.c  */
#line 13619 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2234:

/* Line 1455 of yacc.c  */
#line 13620 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2235:

/* Line 1455 of yacc.c  */
#line 13621 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2236:

/* Line 1455 of yacc.c  */
#line 13622 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2237:

/* Line 1455 of yacc.c  */
#line 13623 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2238:

/* Line 1455 of yacc.c  */
#line 13624 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2239:

/* Line 1455 of yacc.c  */
#line 13625 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2240:

/* Line 1455 of yacc.c  */
#line 13626 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2241:

/* Line 1455 of yacc.c  */
#line 13627 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2242:

/* Line 1455 of yacc.c  */
#line 13628 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2243:

/* Line 1455 of yacc.c  */
#line 13629 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2244:

/* Line 1455 of yacc.c  */
#line 13630 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2245:

/* Line 1455 of yacc.c  */
#line 13631 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2246:

/* Line 1455 of yacc.c  */
#line 13632 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2247:

/* Line 1455 of yacc.c  */
#line 13633 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2248:

/* Line 1455 of yacc.c  */
#line 13634 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2249:

/* Line 1455 of yacc.c  */
#line 13635 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2250:

/* Line 1455 of yacc.c  */
#line 13636 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2251:

/* Line 1455 of yacc.c  */
#line 13637 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2252:

/* Line 1455 of yacc.c  */
#line 13638 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2253:

/* Line 1455 of yacc.c  */
#line 13639 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2254:

/* Line 1455 of yacc.c  */
#line 13640 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2255:

/* Line 1455 of yacc.c  */
#line 13641 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2256:

/* Line 1455 of yacc.c  */
#line 13642 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2257:

/* Line 1455 of yacc.c  */
#line 13643 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2258:

/* Line 1455 of yacc.c  */
#line 13644 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2259:

/* Line 1455 of yacc.c  */
#line 13645 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2260:

/* Line 1455 of yacc.c  */
#line 13646 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2261:

/* Line 1455 of yacc.c  */
#line 13647 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2262:

/* Line 1455 of yacc.c  */
#line 13648 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2263:

/* Line 1455 of yacc.c  */
#line 13649 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2264:

/* Line 1455 of yacc.c  */
#line 13650 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2265:

/* Line 1455 of yacc.c  */
#line 13651 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2266:

/* Line 1455 of yacc.c  */
#line 13652 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2267:

/* Line 1455 of yacc.c  */
#line 13664 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_SET_OPTION;
            lex->option_type= OPT_SESSION;
            lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;

            sp_create_assignment_lex(YYTHD, YY_TOKEN_END);
          }
    break;

  case 2268:

/* Line 1455 of yacc.c  */
#line 13676 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2269:

/* Line 1455 of yacc.c  */
#line 13678 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_SET_OPTION;
	    /* Don't clear var_list in the case of recursive statement */
	    if (!lex->set_statement)
              lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;
            lex->set_statement= true;
            sp_head *sp= lex->sphead;
            if (sp && !sp->is_invoked())
            {
              sp->m_parser_data.set_current_stmt_start_ptr(YY_TOKEN_START);
              sp->m_parser_data.set_option_start_ptr(YY_TOKEN_END);
            }
          }
    break;

  case 2270:

/* Line 1455 of yacc.c  */
#line 13696 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2273:

/* Line 1455 of yacc.c  */
#line 13711 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT;
          }
    break;

  case 2275:

/* Line 1455 of yacc.c  */
#line 13717 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->option_type= OPT_DEFAULT;
          }
    break;

  case 2276:

/* Line 1455 of yacc.c  */
#line 13721 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT;
          }
    break;

  case 2277:

/* Line 1455 of yacc.c  */
#line 13726 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2279:

/* Line 1455 of yacc.c  */
#line 13736 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2281:

/* Line 1455 of yacc.c  */
#line 13742 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2284:

/* Line 1455 of yacc.c  */
#line 13756 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(YYTHD, YY_TOKEN_START);
          }
    break;

  case 2285:

/* Line 1455 of yacc.c  */
#line 13760 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2286:

/* Line 1455 of yacc.c  */
#line 13765 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(YYTHD, YY_TOKEN_START);
          }
    break;

  case 2287:

/* Line 1455 of yacc.c  */
#line 13769 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2288:

/* Line 1455 of yacc.c  */
#line 13778 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2291:

/* Line 1455 of yacc.c  */
#line 13786 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2292:

/* Line 1455 of yacc.c  */
#line 13787 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2293:

/* Line 1455 of yacc.c  */
#line 13788 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2294:

/* Line 1455 of yacc.c  */
#line 13792 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2295:

/* Line 1455 of yacc.c  */
#line 13793 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2296:

/* Line 1455 of yacc.c  */
#line 13794 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2297:

/* Line 1455 of yacc.c  */
#line 13795 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2298:

/* Line 1455 of yacc.c  */
#line 13799 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2299:

/* Line 1455 of yacc.c  */
#line 13800 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2300:

/* Line 1455 of yacc.c  */
#line 13801 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2301:

/* Line 1455 of yacc.c  */
#line 13802 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2302:

/* Line 1455 of yacc.c  */
#line 13808 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
	  }
    break;

  case 2303:

/* Line 1455 of yacc.c  */
#line 13817 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;

            if (sp)
              sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_START);
          }
    break;

  case 2304:

/* Line 1455 of yacc.c  */
#line 13824 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            const char *expr_start_ptr= NULL;

            if (sp)
              expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if ((yyvsp[(1) - (4)].variable).var == trg_new_row_fake_var)
            {
              DBUG_ASSERT(sp);
              DBUG_ASSERT(expr_start_ptr);

              /* We are parsing trigger and this is a trigger NEW-field. */

              LEX_STRING expr_query= EMPTY_STR;

              if (!(yyvsp[(4) - (4)].item))
              {
                // This is: SET NEW.x = DEFAULT
                // DEFAULT clause is not supported in triggers.

                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              else if (lex->is_metadata_used())
              {
                expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);

                if (!expr_query.str)
                  MYSQL_YYABORT;
              }

              if (set_trigger_new_row(thd, (yyvsp[(1) - (4)].variable).base_name, (yyvsp[(4) - (4)].item), expr_query))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(1) - (4)].variable).var)
            {
            }
            else
            {
              DBUG_ASSERT(sp);
              DBUG_ASSERT(expr_start_ptr);

              /* We're parsing SP and this is an SP-variable. */

              sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
              sp_variable *spv= pctx->find_variable((yyvsp[(1) - (4)].variable).base_name, false);

              LEX_STRING expr_query= EMPTY_STR;

              if (!(yyvsp[(4) - (4)].item))
              {
                // This is: SET x = DEFAULT, where x is a SP-variable.
                // This is not supported.

                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              else if (lex->is_metadata_used())
              {
                expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);

                if (!expr_query.str)
                  MYSQL_YYABORT;
              }

              /*
                NOTE: every SET-expression has its own LEX-object, even if it is
                a multiple SET-statement, like:

                  SET spv1 = expr1, spv2 = expr2, ...

                Every SET-expression has its own sp_instr_set. Thus, the
                instruction owns the LEX-object, i.e. the instruction is
                responsible for destruction of the LEX-object.
              */

              sp_instr_set *i=
                new sp_instr_set(sp->instructions(), lex,
                                 spv->offset, (yyvsp[(4) - (4)].item), expr_query,
                                 true); // The instruction owns its lex.

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2305:

/* Line 1455 of yacc.c  */
#line 13913 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item), false);
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
    break;

  case 2306:

/* Line 1455 of yacc.c  */
#line 13924 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
          }
    break;

  case 2307:

/* Line 1455 of yacc.c  */
#line 13927 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            int flags= (yyvsp[(2) - (2)].charset) ? 0 : set_var_collation_client::SET_CS_DEFAULT;
            const CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(flags,
                                              cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2308:

/* Line 1455 of yacc.c  */
#line 13943 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            LEX_STRING names= { C_STRING_WITH_LEN("names") };

            if (pctx && pctx->find_variable(names, false))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
    break;

  case 2309:

/* Line 1455 of yacc.c  */
#line 13956 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            const CHARSET_INFO *cs2;
            const CHARSET_INFO *cs3;
            int flags= set_var_collation_client::SET_CS_NAMES
                       | ((yyvsp[(2) - (3)].charset) ? 0 : set_var_collation_client::SET_CS_DEFAULT)
                       | ((yyvsp[(3) - (3)].charset) ? set_var_collation_client::SET_CS_COLLATE : 0);
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(flags, cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2310:

/* Line 1455 of yacc.c  */
#line 13978 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            LEX_STRING pw= { C_STRING_WITH_LEN("password") };

            if (pctx && pctx->find_variable(pw, false))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }

            LEX_USER *user= (LEX_USER*) thd->alloc(sizeof(LEX_USER));

            if (!user)
              MYSQL_YYABORT;

            user->host=null_lex_str;
            user->user.str=thd->security_ctx->user;
            user->user.length= strlen(thd->security_ctx->user);

            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;

            lex->var_list.push_back(var);
            lex->autocommit= TRUE;
            lex->is_set_password_sql= true;
            lex->is_change_password= TRUE;

            if (sp)
              sp->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2311:

/* Line 1455 of yacc.c  */
#line 14013 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX_USER *user= (yyvsp[(3) - (5)].lex_user);
            LEX *lex= Lex;
            set_var_password *var;

            var= new set_var_password(user,(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
            lex->autocommit= TRUE;
            lex->is_set_password_sql= true;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
            /*
              'is_change_password' should be set if the user is setting his
              own password. This is later used to determine if the password
              expiration flag should be reset.
              Either the user exactly matches the currently authroized user or
              the CURRENT_USER keyword was used.

              If CURRENT_USER was used for the <user> rule then
              user->user.str=0. See rule below:
              
              user:
                 [..]
              | CURRENT_USER optional_braces
                {
                 [..]
                  memset($$, 0, sizeof(LEX_USER));
                }
            */
            if (user->user.str ||
                match_authorized_user(&current_thd->main_security_ctx,
                                      user))
              lex->is_change_password= TRUE;
            else
              lex->is_change_password= FALSE;
          }
    break;

  case 2312:

/* Line 1455 of yacc.c  */
#line 14055 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            /* Best effort lookup for system variable. */
            if (!pctx || !(spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[(1) - (1)].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2313:

/* Line 1455 of yacc.c  */
#line 14083 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }

            if (sp && sp->m_type == SP_TYPE_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (sp->m_trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (sp->m_trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2314:

/* Line 1455 of yacc.c  */
#line 14129 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2319:

/* Line 1455 of yacc.c  */
#line 14150 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(1) - (1)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_read_only"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2320:

/* Line 1455 of yacc.c  */
#line 14168 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(3) - (3)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2321:

/* Line 1455 of yacc.c  */
#line 14185 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= true; }
    break;

  case 2322:

/* Line 1455 of yacc.c  */
#line 14186 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= false; }
    break;

  case 2323:

/* Line 1455 of yacc.c  */
#line 14190 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2324:

/* Line 1455 of yacc.c  */
#line 14191 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2325:

/* Line 1455 of yacc.c  */
#line 14192 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2326:

/* Line 1455 of yacc.c  */
#line 14193 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2327:

/* Line 1455 of yacc.c  */
#line 14197 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 2328:

/* Line 1455 of yacc.c  */
#line 14199 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].lex_str).length == 0)
             (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).str;
            else
            switch (YYTHD->variables.old_passwords) {
              case 1: (yyval.simple_string)= Item_func_old_password::
                alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length);
                break;
              case 0:
              case 2: (yyval.simple_string)= Item_func_password::
                create_password_hash_buffer(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length);
                break;
            }
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 2329:

/* Line 1455 of yacc.c  */
#line 14217 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
		    WARN_DEPRECATED(YYTHD, "OLD_PASSWORD", "PASSWORD");
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::
              alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 2330:

/* Line 1455 of yacc.c  */
#line 14230 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2331:

/* Line 1455 of yacc.c  */
#line 14231 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2332:

/* Line 1455 of yacc.c  */
#line 14233 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2333:

/* Line 1455 of yacc.c  */
#line 14239 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2334:

/* Line 1455 of yacc.c  */
#line 14245 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2335:

/* Line 1455 of yacc.c  */
#line 14256 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
          }
    break;

  case 2336:

/* Line 1455 of yacc.c  */
#line 14267 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_LOCK_BINLOG_FOR_BACKUP;
          }
    break;

  case 2337:

/* Line 1455 of yacc.c  */
#line 14271 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_LOCK_TABLES_FOR_BACKUP;
          }
    break;

  case 2338:

/* Line 1455 of yacc.c  */
#line 14275 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2339:

/* Line 1455 of yacc.c  */
#line 14279 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2344:

/* Line 1455 of yacc.c  */
#line 14294 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            bool lock_for_write= (lock_type >= TL_WRITE_ALLOW_WRITE);
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0))
              MYSQL_YYABORT;
          }
    break;

  case 2345:

/* Line 1455 of yacc.c  */
#line 14303 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2346:

/* Line 1455 of yacc.c  */
#line 14304 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2347:

/* Line 1455 of yacc.c  */
#line 14306 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { 
            (yyval.num)= TL_WRITE_LOW_PRIORITY; 
            WARN_DEPRECATED(YYTHD, "LOW_PRIORITY WRITE", "WRITE");
          }
    break;

  case 2348:

/* Line 1455 of yacc.c  */
#line 14310 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2349:

/* Line 1455 of yacc.c  */
#line 14315 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
          }
    break;

  case 2350:

/* Line 1455 of yacc.c  */
#line 14326 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_UNLOCK_BINLOG;
          }
    break;

  case 2351:

/* Line 1455 of yacc.c  */
#line 14330 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2352:

/* Line 1455 of yacc.c  */
#line 14341 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_handler_open();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2353:

/* Line 1455 of yacc.c  */
#line 14357 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_handler_close();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2354:

/* Line 1455 of yacc.c  */
#line 14373 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            Item *one= new (YYTHD->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2355:

/* Line 1455 of yacc.c  */
#line 14391 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_handler_read((yyvsp[(5) - (7)].ha_read_mode),
                                  lex->ident.str, lex->insert_list,
                                  thd->m_parser_state->m_yacc.m_ha_rkey_mode);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2356:

/* Line 1455 of yacc.c  */
#line 14411 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->ident= null_lex_str; (yyval.ha_read_mode)=(yyvsp[(1) - (1)].ha_read_mode); }
    break;

  case 2357:

/* Line 1455 of yacc.c  */
#line 14412 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); (yyval.ha_read_mode)=(yyvsp[(2) - (2)].ha_read_mode); }
    break;

  case 2358:

/* Line 1455 of yacc.c  */
#line 14416 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RFIRST; }
    break;

  case 2359:

/* Line 1455 of yacc.c  */
#line 14417 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RNEXT;  }
    break;

  case 2360:

/* Line 1455 of yacc.c  */
#line 14421 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RFIRST; }
    break;

  case 2361:

/* Line 1455 of yacc.c  */
#line 14422 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RNEXT;  }
    break;

  case 2362:

/* Line 1455 of yacc.c  */
#line 14423 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RPREV;  }
    break;

  case 2363:

/* Line 1455 of yacc.c  */
#line 14424 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RLAST;  }
    break;

  case 2364:

/* Line 1455 of yacc.c  */
#line 14426 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            YYTHD->m_parser_state->m_yacc.m_ha_rkey_mode= (yyvsp[(1) - (1)].ha_rkey_mode);
            Lex->insert_list= new List_item;
            if (! Lex->insert_list)
              MYSQL_YYABORT;
          }
    break;

  case 2365:

/* Line 1455 of yacc.c  */
#line 14433 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.ha_read_mode)= RKEY;
          }
    break;

  case 2366:

/* Line 1455 of yacc.c  */
#line 14439 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2367:

/* Line 1455 of yacc.c  */
#line 14440 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2368:

/* Line 1455 of yacc.c  */
#line 14441 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2369:

/* Line 1455 of yacc.c  */
#line 14442 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2370:

/* Line 1455 of yacc.c  */
#line 14443 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2371:

/* Line 1455 of yacc.c  */
#line 14449 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_REVOKE; }
    break;

  case 2372:

/* Line 1455 of yacc.c  */
#line 14450 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2373:

/* Line 1455 of yacc.c  */
#line 14455 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->type= 0;
          }
    break;

  case 2374:

/* Line 1455 of yacc.c  */
#line 14460 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2375:

/* Line 1455 of yacc.c  */
#line 14470 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2376:

/* Line 1455 of yacc.c  */
#line 14480 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2377:

/* Line 1455 of yacc.c  */
#line 14484 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (5)].lex_user));
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2378:

/* Line 1455 of yacc.c  */
#line 14492 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_GRANT; }
    break;

  case 2379:

/* Line 1455 of yacc.c  */
#line 14493 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2380:

/* Line 1455 of yacc.c  */
#line 14499 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->type= 0;
          }
    break;

  case 2381:

/* Line 1455 of yacc.c  */
#line 14505 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2382:

/* Line 1455 of yacc.c  */
#line 14516 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2383:

/* Line 1455 of yacc.c  */
#line 14526 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (6)].lex_user));
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2386:

/* Line 1455 of yacc.c  */
#line 14540 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->grant == GLOBAL_ACLS &&
                lex->sql_command == SQLCOM_REVOKE)
              lex->sql_command= SQLCOM_REVOKE_ALL;
          }
    break;

  case 2387:

/* Line 1455 of yacc.c  */
#line 14547 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2392:

/* Line 1455 of yacc.c  */
#line 14565 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2393:

/* Line 1455 of yacc.c  */
#line 14566 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2394:

/* Line 1455 of yacc.c  */
#line 14568 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2395:

/* Line 1455 of yacc.c  */
#line 14569 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2396:

/* Line 1455 of yacc.c  */
#line 14571 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2397:

/* Line 1455 of yacc.c  */
#line 14572 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2398:

/* Line 1455 of yacc.c  */
#line 14574 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2399:

/* Line 1455 of yacc.c  */
#line 14575 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2400:

/* Line 1455 of yacc.c  */
#line 14576 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2401:

/* Line 1455 of yacc.c  */
#line 14577 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2402:

/* Line 1455 of yacc.c  */
#line 14578 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2403:

/* Line 1455 of yacc.c  */
#line 14579 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2404:

/* Line 1455 of yacc.c  */
#line 14580 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2405:

/* Line 1455 of yacc.c  */
#line 14581 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2406:

/* Line 1455 of yacc.c  */
#line 14582 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2407:

/* Line 1455 of yacc.c  */
#line 14583 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2408:

/* Line 1455 of yacc.c  */
#line 14584 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2409:

/* Line 1455 of yacc.c  */
#line 14585 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2410:

/* Line 1455 of yacc.c  */
#line 14586 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2411:

/* Line 1455 of yacc.c  */
#line 14587 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2412:

/* Line 1455 of yacc.c  */
#line 14588 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2413:

/* Line 1455 of yacc.c  */
#line 14589 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2414:

/* Line 1455 of yacc.c  */
#line 14590 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2415:

/* Line 1455 of yacc.c  */
#line 14591 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2416:

/* Line 1455 of yacc.c  */
#line 14592 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2417:

/* Line 1455 of yacc.c  */
#line 14593 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2418:

/* Line 1455 of yacc.c  */
#line 14594 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2419:

/* Line 1455 of yacc.c  */
#line 14595 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2420:

/* Line 1455 of yacc.c  */
#line 14596 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2421:

/* Line 1455 of yacc.c  */
#line 14597 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2422:

/* Line 1455 of yacc.c  */
#line 14598 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2423:

/* Line 1455 of yacc.c  */
#line 14599 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2424:

/* Line 1455 of yacc.c  */
#line 14600 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2425:

/* Line 1455 of yacc.c  */
#line 14601 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
    break;

  case 2426:

/* Line 1455 of yacc.c  */
#line 14605 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2427:

/* Line 1455 of yacc.c  */
#line 14606 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2430:

/* Line 1455 of yacc.c  */
#line 14616 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2431:

/* Line 1455 of yacc.c  */
#line 14626 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2432:

/* Line 1455 of yacc.c  */
#line 14636 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2433:

/* Line 1455 of yacc.c  */
#line 14649 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2434:

/* Line 1455 of yacc.c  */
#line 14664 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2435:

/* Line 1455 of yacc.c  */
#line 14677 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2436:

/* Line 1455 of yacc.c  */
#line 14690 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2437:

/* Line 1455 of yacc.c  */
#line 14702 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2438:

/* Line 1455 of yacc.c  */
#line 14707 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2439:

/* Line 1455 of yacc.c  */
#line 14715 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2440:

/* Line 1455 of yacc.c  */
#line 14720 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2441:

/* Line 1455 of yacc.c  */
#line 14728 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
            if (Lex->sql_command == SQLCOM_REVOKE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            String *password = new (YYTHD->mem_root) String((const char*)(yyvsp[(4) - (4)].lex_str).str,
                                    YYTHD->variables.character_set_client);
            /*
              1. Plugin must be resolved
              2. Password must be digested
            */
            (yyvsp[(1) - (4)].lex_user)->uses_identified_by_clause= true;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 2442:

/* Line 1455 of yacc.c  */
#line 14745 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { 
            if (Lex->sql_command == SQLCOM_REVOKE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); 
            (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str);
            /*
              1. Plugin must be resolved
            */
            (yyvsp[(1) - (5)].lex_user)->uses_identified_by_password_clause= true;
          }
    break;

  case 2443:

/* Line 1455 of yacc.c  */
#line 14759 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (Lex->sql_command == SQLCOM_REVOKE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.lex_user)= (yyvsp[(1) - (4)].lex_user);
            (yyvsp[(1) - (4)].lex_user)->plugin= (yyvsp[(4) - (4)].lex_str);
            (yyvsp[(1) - (4)].lex_user)->auth= empty_lex_str;
            (yyvsp[(1) - (4)].lex_user)->uses_identified_with_clause= true;
          }
    break;

  case 2444:

/* Line 1455 of yacc.c  */
#line 14771 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (Lex->sql_command == SQLCOM_REVOKE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.lex_user)= (yyvsp[(1) - (6)].lex_user);
            (yyvsp[(1) - (6)].lex_user)->plugin= (yyvsp[(4) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->auth= (yyvsp[(6) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->uses_identified_with_clause= true;
            (yyvsp[(1) - (6)].lex_user)->uses_authentication_string_clause= true;
          }
    break;

  case 2445:

/* Line 1455 of yacc.c  */
#line 14784 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user);
            (yyvsp[(1) - (1)].lex_user)->password= null_lex_str;
          }
    break;

  case 2446:

/* Line 1455 of yacc.c  */
#line 14792 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2450:

/* Line 1455 of yacc.c  */
#line 14806 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            String *new_str = new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.ptr(), new_str->ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
    break;

  case 2452:

/* Line 1455 of yacc.c  */
#line 14835 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2453:

/* Line 1455 of yacc.c  */
#line 14839 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2454:

/* Line 1455 of yacc.c  */
#line 14843 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2455:

/* Line 1455 of yacc.c  */
#line 14847 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2456:

/* Line 1455 of yacc.c  */
#line 14853 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2458:

/* Line 1455 of yacc.c  */
#line 14858 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2459:

/* Line 1455 of yacc.c  */
#line 14859 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2460:

/* Line 1455 of yacc.c  */
#line 14863 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2461:

/* Line 1455 of yacc.c  */
#line 14864 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2462:

/* Line 1455 of yacc.c  */
#line 14868 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2463:

/* Line 1455 of yacc.c  */
#line 14870 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2464:

/* Line 1455 of yacc.c  */
#line 14876 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2465:

/* Line 1455 of yacc.c  */
#line 14882 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2466:

/* Line 1455 of yacc.c  */
#line 14888 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2467:

/* Line 1455 of yacc.c  */
#line 14897 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2468:

/* Line 1455 of yacc.c  */
#line 14902 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2469:

/* Line 1455 of yacc.c  */
#line 14906 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2470:

/* Line 1455 of yacc.c  */
#line 14907 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2471:

/* Line 1455 of yacc.c  */
#line 14912 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2472:

/* Line 1455 of yacc.c  */
#line 14913 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2473:

/* Line 1455 of yacc.c  */
#line 14914 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2474:

/* Line 1455 of yacc.c  */
#line 14919 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2475:

/* Line 1455 of yacc.c  */
#line 14920 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2476:

/* Line 1455 of yacc.c  */
#line 14921 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2477:

/* Line 1455 of yacc.c  */
#line 14925 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2478:

/* Line 1455 of yacc.c  */
#line 14926 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2479:

/* Line 1455 of yacc.c  */
#line 14931 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2480:

/* Line 1455 of yacc.c  */
#line 14943 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2481:

/* Line 1455 of yacc.c  */
#line 14953 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2482:

/* Line 1455 of yacc.c  */
#line 14962 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2483:

/* Line 1455 of yacc.c  */
#line 14971 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2484:

/* Line 1455 of yacc.c  */
#line 14984 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2486:

/* Line 1455 of yacc.c  */
#line 14990 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(2) - (2)].num), TRUE))
              MYSQL_YYABORT;
          }
    break;

  case 2487:

/* Line 1455 of yacc.c  */
#line 14995 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2488:

/* Line 1455 of yacc.c  */
#line 15005 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2489:

/* Line 1455 of yacc.c  */
#line 15006 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2490:

/* Line 1455 of yacc.c  */
#line 15007 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2491:

/* Line 1455 of yacc.c  */
#line 15011 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.is_not_empty)= false; }
    break;

  case 2492:

/* Line 1455 of yacc.c  */
#line 15012 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.is_not_empty)= true; }
    break;

  case 2493:

/* Line 1455 of yacc.c  */
#line 15016 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2494:

/* Line 1455 of yacc.c  */
#line 15032 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2497:

/* Line 1455 of yacc.c  */
#line 15045 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2498:

/* Line 1455 of yacc.c  */
#line 15046 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2499:

/* Line 1455 of yacc.c  */
#line 15047 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2500:

/* Line 1455 of yacc.c  */
#line 15052 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2501:

/* Line 1455 of yacc.c  */
#line 15056 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2503:

/* Line 1455 of yacc.c  */
#line 15065 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 2504:

/* Line 1455 of yacc.c  */
#line 15071 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->pop_context();
            (yyval.select_lex)= (yyvsp[(1) - (6)].select_lex);
          }
    break;

  case 2505:

/* Line 1455 of yacc.c  */
#line 15080 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= (yyvsp[(2) - (3)].select_lex);
          }
    break;

  case 2506:

/* Line 1455 of yacc.c  */
#line 15086 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2507:

/* Line 1455 of yacc.c  */
#line 15107 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->outer_select();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;
          }
    break;

  case 2512:

/* Line 1455 of yacc.c  */
#line 15135 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 2513:

/* Line 1455 of yacc.c  */
#line 15137 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
    break;

  case 2514:

/* Line 1455 of yacc.c  */
#line 15142 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 2515:

/* Line 1455 of yacc.c  */
#line 15143 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 2516:

/* Line 1455 of yacc.c  */
#line 15144 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 2517:

/* Line 1455 of yacc.c  */
#line 15146 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 2518:

/* Line 1455 of yacc.c  */
#line 15152 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 2519:

/* Line 1455 of yacc.c  */
#line 15157 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 2520:

/* Line 1455 of yacc.c  */
#line 15168 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2521:

/* Line 1455 of yacc.c  */
#line 15170 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2522:

/* Line 1455 of yacc.c  */
#line 15172 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2536:

/* Line 1455 of yacc.c  */
#line 15205 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            YYTHD->lex->definer= 0;
          }
    break;

  case 2537:

/* Line 1455 of yacc.c  */
#line 15219 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            YYTHD->lex->definer= get_current_user(YYTHD, (yyvsp[(3) - (3)].lex_user));
          }
    break;

  case 2538:

/* Line 1455 of yacc.c  */
#line 15232 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2539:

/* Line 1455 of yacc.c  */
#line 15234 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2540:

/* Line 1455 of yacc.c  */
#line 15236 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2541:

/* Line 1455 of yacc.c  */
#line 15241 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->create_view_mode= VIEW_CREATE_OR_REPLACE; }
    break;

  case 2542:

/* Line 1455 of yacc.c  */
#line 15246 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED; }
    break;

  case 2543:

/* Line 1455 of yacc.c  */
#line 15248 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2544:

/* Line 1455 of yacc.c  */
#line 15250 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2545:

/* Line 1455 of yacc.c  */
#line 15255 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2546:

/* Line 1455 of yacc.c  */
#line 15257 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2547:

/* Line 1455 of yacc.c  */
#line 15259 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2548:

/* Line 1455 of yacc.c  */
#line 15264 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,
                                                   TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
    break;

  case 2550:

/* Line 1455 of yacc.c  */
#line 15279 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2552:

/* Line 1455 of yacc.c  */
#line 15285 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2553:

/* Line 1455 of yacc.c  */
#line 15290 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2554:

/* Line 1455 of yacc.c  */
#line 15297 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2555:

/* Line 1455 of yacc.c  */
#line 15306 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2556:

/* Line 1455 of yacc.c  */
#line 15323 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (Lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              For statment as "CREATE VIEW v1 AS SELECT1 UNION SELECT2",
              parsing of Select query (SELECT1) is completed and UNION_CLAUSE
              is not yet parsed. So check for
              Lex->current_select->master_unit()->first_select()->braces
              (as its done in "select_init2" for "select_part2" rule) is not
              done here.
            */
          }
    break;

  case 2559:

/* Line 1455 of yacc.c  */
#line 15344 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 2561:

/* Line 1455 of yacc.c  */
#line 15353 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->current_select->table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 2562:

/* Line 1455 of yacc.c  */
#line 15357 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 2563:

/* Line 1455 of yacc.c  */
#line 15364 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2564:

/* Line 1455 of yacc.c  */
#line 15366 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2565:

/* Line 1455 of yacc.c  */
#line 15368 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2566:

/* Line 1455 of yacc.c  */
#line 15370 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2567:

/* Line 1455 of yacc.c  */
#line 15387 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {                 /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2568:

/* Line 1455 of yacc.c  */
#line 15393 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {                 /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2569:

/* Line 1455 of yacc.c  */
#line 15398 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {                 /* $15 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            sp_head *sp= sp_start_parsing(thd, SP_TYPE_TRIGGER, (yyvsp[(3) - (14)].spname));

            if (!sp)
              MYSQL_YYABORT;

            sp->m_trg_chistics.action_time= (enum trg_action_time_type) (yyvsp[(4) - (14)].num);
            sp->m_trg_chistics.event= (enum trg_event_type) (yyvsp[(5) - (14)].num);
            lex->stmt_definition_begin= (yyvsp[(2) - (14)].simple_string);
            lex->ident.str= (yyvsp[(7) - (14)].simple_string);
            lex->ident.length= (yyvsp[(11) - (14)].simple_string) - (yyvsp[(7) - (14)].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[(3) - (14)].spname);

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
            sp->m_chistics= &lex->sp_chistics;
            sp->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2570:

/* Line 1455 of yacc.c  */
#line 15428 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { /* $17 */
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp_finish_parsing(thd);

            lex->sql_command= SQLCOM_CREATE_TRIGGER;

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(9) - (16)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING))
              MYSQL_YYABORT;
          }
    break;

  case 2571:

/* Line 1455 of yacc.c  */
#line 15461 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(4) - (8)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(4) - (8)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
            lex->udf.name = (yyvsp[(4) - (8)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
            lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
          }
    break;

  case 2572:

/* Line 1455 of yacc.c  */
#line 15479 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(3) - (7)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
            lex->udf.name = (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2573:

/* Line 1455 of yacc.c  */
#line 15502 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { /* $5 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }

            sp_head *sp= sp_start_parsing(thd, SP_TYPE_FUNCTION, lex->spname);

            if (!sp)
              MYSQL_YYABORT;

            lex->sphead= sp;

            /*
              NOTE: the start of the parameters in the query string is
              YYLIP->get_cpp_tok_start() + 1. 1 is the length of '(', which the
              tokenizer has just passed (just YYLIP->get_cpp_tok_start() points
              to the '(').
            */

            sp->m_parser_data.set_parameter_start_ptr(
              YYLIP->get_cpp_tok_start() + 1);
          }
    break;

  case 2574:

/* Line 1455 of yacc.c  */
#line 15534 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_parser_data.set_parameter_end_ptr(
              YYLIP->get_cpp_tok_start());
          }
    break;

  case 2575:

/* Line 1455 of yacc.c  */
#line 15539 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
          }
    break;

  case 2576:

/* Line 1455 of yacc.c  */
#line 15547 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[(11) - (11)].num) == MYSQL_TYPE_STRING || (yyvsp[(11) - (11)].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (fill_field_definition(YYTHD, sp,
                                      (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                      &sp->m_return_field_def))
              MYSQL_YYABORT;

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 2577:

/* Line 1455 of yacc.c  */
#line 15570 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { /* $14 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2578:

/* Line 1455 of yacc.c  */
#line 15578 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            sp_finish_parsing(thd);

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;

            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }

            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  Sql_condition::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
          }
    break;

  case 2579:

/* Line 1455 of yacc.c  */
#line 15636 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

            sp_head *sp= sp_start_parsing(thd, SP_TYPE_PROCEDURE, (yyvsp[(3) - (3)].spname));

            if (!sp)
              MYSQL_YYABORT;

            lex->sphead= sp;
          }
    break;

  case 2580:

/* Line 1455 of yacc.c  */
#line 15656 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            /*
              NOTE: the start of the parameters in the query string is
              YYLIP->get_cpp_tok_start() + 1. 1 is the length of '(', which the
              tokenizer has just passed (just YYLIP->get_cpp_tok_start() points
              to the '(').
            */

            Lex->sphead->m_parser_data.set_parameter_start_ptr(
              YYLIP->get_cpp_tok_start() + 1);
          }
    break;

  case 2581:

/* Line 1455 of yacc.c  */
#line 15669 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            Lex->sphead->m_parser_data.set_parameter_end_ptr(
              YYLIP->get_cpp_tok_start());

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 2582:

/* Line 1455 of yacc.c  */
#line 15679 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2583:

/* Line 1455 of yacc.c  */
#line 15687 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            sp_finish_parsing(thd);

            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
          }
    break;

  case 2584:

/* Line 1455 of yacc.c  */
#line 15701 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 2585:

/* Line 1455 of yacc.c  */
#line 15705 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2586:

/* Line 1455 of yacc.c  */
#line 15709 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2587:

/* Line 1455 of yacc.c  */
#line 15713 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2588:

/* Line 1455 of yacc.c  */
#line 15717 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2589:

/* Line 1455 of yacc.c  */
#line 15721 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2590:

/* Line 1455 of yacc.c  */
#line 15728 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2591:

/* Line 1455 of yacc.c  */
#line 15735 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2592:

/* Line 1455 of yacc.c  */
#line 15742 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2593:

/* Line 1455 of yacc.c  */
#line 15751 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2594:

/* Line 1455 of yacc.c  */
#line 15752 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2595:

/* Line 1455 of yacc.c  */
#line 15756 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2596:

/* Line 1455 of yacc.c  */
#line 15757 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2597:

/* Line 1455 of yacc.c  */
#line 15758 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2598:

/* Line 1455 of yacc.c  */
#line 15762 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2599:

/* Line 1455 of yacc.c  */
#line 15763 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2600:

/* Line 1455 of yacc.c  */
#line 15768 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2601:

/* Line 1455 of yacc.c  */
#line 15770 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2603:

/* Line 1455 of yacc.c  */
#line 15775 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {}
    break;

  case 2604:

/* Line 1455 of yacc.c  */
#line 15776 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2605:

/* Line 1455 of yacc.c  */
#line 15781 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2606:

/* Line 1455 of yacc.c  */
#line 15791 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;



/* Line 1455 of yacc.c  */
#line 40829 "/home/longxuegang/dba_public_scripts_tools/sqlparser/sql/sql_yacc.cc"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YYTHD, YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (YYTHD, yymsg);
	  }
	else
	  {
	    yyerror (YYTHD, YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, YYTHD);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, YYTHD);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YYTHD, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, YYTHD);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, YYTHD);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



