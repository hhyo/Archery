from typing import Callable, Union, Tuple, Optional

__all__ = ['generate', 'construct', 'ElGamalKey']


def generate(bits: int, randfunc: Callable) -> ElGamalKey: ...
def construct(tup: Union[Tuple[int, int, int], Tuple[int, int, int, int]]) -> ElGamalKey: ...

class ElGamalKey(object):
    def __init__(self, randfunc: Optional[Callable]=None) -> None: ...
    def has_private(self) -> bool: ...
    def can_encrypt(self) -> bool: ...
    def can_sign(self) -> bool: ...
    def publickey(self) -> ElGamalKey: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __getstate__(self) -> None: ...
